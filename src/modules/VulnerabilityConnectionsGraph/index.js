import { useCallback, useEffect, useState } from 'react'
import ReactFlow, { BaseEdge, Controls, EdgeLabelRenderer, Handle, Position, applyEdgeChanges, applyNodeChanges, getSmoothStepPath } from 'reactflow'
import classNames from 'classnames'

import { getVulnerabilityConnections } from '@/data/graphs'
import useChartDimensions from '@/hooks/useChartDimensions'
import { useData } from '@/hooks/data'

const chartSettings = {
  marginLeft: 0,
  marginTop: 0,
  marginRight: 0,
  marginBottom: 0
}

function NodeTemplate ({ data, nodeClassName, handleClassName }) {
  return (
    <>
      <div
        className={classNames('flex items-center justify-center overflow-hidden text-sm text-center', nodeClassName)}
        style={{ width: `${data.width}px`, height: `${data.height}px` }}
      >
        {data.label}
      </div>
      <Handle type='source' position={Position.Top} className={classNames(handleClassName)} />
      <Handle type='target' position={Position.Bottom} className={classNames(handleClassName)} />
    </>
  )
}

function Node ({ data }) {
  return (
    <NodeTemplate data={data} nodeClassName='bg-slate-200 text-slate-800' handleClassName='bg-slate-200 border-slate-200' />
  )
}

function NodeSelected ({ data }) {
  return (
    <NodeTemplate data={data} nodeClassName='bg-slate-600 text-slate-100' handleClassName='bg-slate-600 border-slate-600' />
  )
}

function EdgeTemplate ({ id, sourceX, sourceY, targetX, targetY, style, label, labelClassName, markerEnd }) {
  const [edgePath, labelX, labelY] = getSmoothStepPath({
    sourceX,
    sourceY,
    targetX,
    targetY,
    sourcePosition: Position.Top,
    targetPosition: Position.Bottom
  })
  return (
    <>
      <BaseEdge id={id} path={edgePath} style={style} markerEnd={markerEnd} />
      <EdgeLabelRenderer>
        <div
          style={{
            position: 'absolute',
            transform: `translate(-50%, -50%) translate(${labelX}px, ${labelY}px)`,
            pointerEvents: 'all'
          }}
          className={classNames('nodrag nopan bg-white px-1 italic', labelClassName)}
        >
          {label}
        </div>
      </EdgeLabelRenderer>
    </>
  )
}

const nodeTypes = { node: Node, selectedNode: NodeSelected }

const edgeTypes = { edge: EdgeTemplate }

function Flow ({ initialNodes, initialEdges, selectVulnerability }) {
  const [ref, dms] = useChartDimensions(chartSettings)
  const [nodes, setNodes] = useState(initialNodes)
  const [edges, setEdges] = useState(initialEdges)
  useEffect(() => {
    setNodes(initialNodes)
    setEdges(initialEdges)
  }, [initialNodes, initialEdges])
  const onNodesChange = useCallback(
    (changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []
  )
  const onEdgesChange = useCallback(
    (changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []
  )
  const onNodeClick = useCallback((_event, node) => { selectVulnerability(node.id) }, [])
  return (
    <div ref={ref} className='flex-1'>
      <div style={{ width: dms.width, height: dms.height }}>
        {dms.height > 0 &&
          <ReactFlow
            nodes={nodes}
            nodeTypes={nodeTypes}
            onNodesChange={onNodesChange}
            onNodeClick={onNodeClick}
            edges={edges}
            edgeTypes={edgeTypes}
            onEdgesChange={onEdgesChange}
            proOptions={{ hideAttribution: true }}
            minZoom={0.3}
            fitView
            snapToGrid
          >
            <Controls />
          </ReactFlow>}
      </div>
    </div>
  )
}

export default function VulnerabilityConnectionsGraph ({ selectedVulnerability, selectVulnerability }) {
  const { vulnerabilitiesById } = useData()
  const [graph, setGraph] = useState(getVulnerabilityConnections({ vulnerabilitiesById, selectedVulnerability }))
  useEffect(() => {
    setGraph(getVulnerabilityConnections({ vulnerabilitiesById, selectedVulnerability }))
  }, [selectedVulnerability])
  return (
    <Flow key={selectedVulnerability} initialNodes={graph.nodes} initialEdges={graph.edges} selectVulnerability={selectVulnerability} />
  )
}
