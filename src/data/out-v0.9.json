{
    "vulnerabilities": [
        {
            "id": "vul-294df700-0df0-4072-ae0d-f89d18bcf52e",
            "name": "51% Vulnerability",
            "description": "The \"51% vulnerability\" refers to a scenario in blockchain networks, particularly in proof-of-work consensus mechanisms, where an entity or group controls more than 50% of the network's mining power. This control enables them to potentially manipulate transactions, reverse transactions, or execute double-spending attacks, undermining the integrity and security of the network.",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "51% Vulnerability"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-6c0ab7ac-a849-42c3-8550-edd7b93bcaa7"
            ]
        },
        {
            "id": "vul-3b4bffcf-8960-4cda-b584-b405198be3a0",
            "name": "Absence of Logic",
            "description": "no guards to access sensitive resources and APIs",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Absence of Logic"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Missing Logic, Logical Errors or Dead Code"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Absence of Coding Logic or Sanity Check"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c9162492-3820-4b11-b6ad-5190d1280719",
            "name": "Access Control (Tainted Owner Variable)",
            "description": "manipulating the owner control variable may lead to exploit some contract  function or feature owner variable accessible to arbitrary users or arbitrary addresses can flow into the  owner variable, i.e. exposing a constructor either by using a public access control modifier or by mispelling its name access control modifier of the constructor not defined, making it public and  accessible to arbitrary users  > the owner field can be arbitrarily overwritten (the owner variable should be only initialized in the constructor, which itself is  declared as private and has the same name as the contract)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71"
            ],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Owner Manipulation"
                },
                {
                    "ref_id": "ref-e835c41a-6b9e-447f-94fd-e9b57260c41f",
                    "alias": "Tainted Owner Variable"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Denial of Service through Owner Account - DoS"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Inconsistent, Improper or Unprotected Access Control"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Owner Operations"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Tainted Owner Variable"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Exceeded Authority Access"
                },
                {
                    "ref_id": "ref-1415a694-6569-495f-b7ad-8aec77e0175d",
                    "alias": "Authority Control Issue"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unrestricted Action"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Stealing Ether"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Access Control (Tainted Owner Variable)"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Insufficient Access Control"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Griefing"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Griefing"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [
                "mit-357865b1-51e8-4da1-8778-2f90b56e8b6e"
            ],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-052e1a82-2f09-4244-bf01-9d22154c988c",
                "vul-054be538-9c34-4a44-b537-de695e6ed513"
            ]
        },
        {
            "id": "vul-63bb50af-be60-43f7-bf54-0c95981727c6",
            "name": "Approval Frontrunning",
            "description": "approvals are a component of tokens on Ethereum which  allow users to grant  permission to third-party addresses to move funds on their behalf (after a trade is  completed or if specific business logic conditions are met) Since the ERC20's approve function directly sets the spender\u2019s allowance,  submitting multiple approve calls is subject to frontrunning  i.e.  the approve function is used by an user to transfer x of their ERC20 tokens,  later it modifies the allowance to y and thus send another approve request but before  the user Tx gets included an attacker has already issued a transferFrom to move x  tokens from the user\u2019s wallet.If the latter Tx is processed before the new user's  approve Tx the aggregate unauthorized transfer would amount to x+y tokens",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924",
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Approval Frontrunning"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Approval Frontrunning"
                },
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Front Running"
                }
            ],
            "cwes": [
                "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019"
            ],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [
                "mit-51057c21-f244-4489-bba0-15aed79ef521"
            ],
            "parent_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f",
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-052e1a82-2f09-4244-bf01-9d22154c988c"
            ]
        },
        {
            "id": "vul-2117e0cc-b5fe-45c6-8df2-b5dd82fbeb4f",
            "name": "Approval Not Cleared",
            "description": "ERC-20: insufficient token balance in the account issuing a transfer() operation  should raise an exception allowing the caller to understand; otherwise it will deposit  invalid tokens while adding or checking approval via require/if statements before the token transfer  and there is no clear/reset of the approval when the transfer finishes or encounters  exceptions",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Approval Not Cleared"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Thrown Exception"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Fake Deposit"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-28d9f403-8bec-4020-ab50-454b62042979",
            "name": "Arithmetic Issues",
            "description": "bugs arising from type conversions, incorrect usage of operators and  others",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793"
            ],
            "attacks": [
                "att-b93b4d29-7d2c-44dc-924b-65a1bb5743bd",
                "att-4c3e4ac1-bc39-42c0-8b30-0de3c94dcb55"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Integer Bugs or Arithmetic Issues"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Arithmetic Issues"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Unchecked Math"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Unchecked Math"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Integer Bug - IB"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unsafe Type Conversion"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Arithmetic Issues"
                }
            ],
            "cwes": [
                "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
            ],
            "swcs": [],
            "tools": [
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d"
            ],
            "mitigations": [
                "mit-44c3792c-4b9a-4f5e-b45d-7066a87ee6ed"
            ],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-eb9931f9-55ca-4e6e-9d2b-807f54747d6a"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7fd9e1fe-b7d8-4c64-a144-7514a41e1a3d",
            "name": "Array Access Clean Higher Order Bits",
            "description": "When elements in an array were changed to values that were <32 bits long, the  compiler doesn't properly clear the higher order bits. Thus on accessing the element it appears to have a different value than the assigned (data corruption); enabling an  attacker to pick input data to gain access to undesired code paths through an overflow",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Array Access Clean Higher Order Bits"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d9d9423c-7075-42bb-ba36-8402be51db35",
            "name": "Assembly Return in Constructor",
            "description": "Actually deployed bytecode has little in common with the source code, tampering   with standard deployment process",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Assembly Return in Constructor"
                }
            ],
            "cwes": [
                "cwe-d20b2915-c270-4732-a2a9-dcd46bfbd9cd"
            ],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ae0c5775-91fc-40bb-9a58-7ad1b8093c4a",
            "name": "Assert / Require / Revert Violation",
            "description": "Vulnerability where the conditions specified by the contract's assertions, requirements, or revert statements are not properly met during execution",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Assert / Require / Revert Violation"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Selection of Guard Function"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-110: Assert Violation"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Assertion Failure - AF"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Strict require"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Using Built-in Functions"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Requirement Violation"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Requirement Violation"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Assert / Require / Revert Violation"
                }
            ],
            "cwes": [
                "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d",
                "cwe-1d7eb3a7-8810-46da-8e7d-15fbe7b4d968"
            ],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-d9ecaa37-3017-4619-80bf-324afc7d1438"
            ]
        },
        {
            "id": "vul-9183baea-cd2e-43f9-8900-899d035ca309",
            "name": "Asserting Contract from Code Size",
            "description": "A common method for asserting whether a sender is a contract or EOA has been to  check the code size of the sender. This check asserts that if the sender has a code  size > 0 that it must be a contract and if not then it must be an EOA. However as  noted in the Ethereum Yellow Paper, \"During initialization code execution,  EXTCODESIZE on the address should return zero, which is the length of the code  of the account while CODESIZE should return the length of the initialization\" although we may be certain that an account with a non-zero codesize is a contract,  we can't be certain that an account with a zero codesize is not a contract",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Asserting Contract from Code Size"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-cf0ce1a6-0ebc-4dea-8eca-6194c022c87d",
            "name": "Assertion Failure",
            "description": "assert used to check invariants which should hold true, if the condition checked is  false the contract is halted and the remaining gas is refunded to the caller",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Assertion Failure"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-110: Assert Violation"
                }
            ],
            "cwes": [
                "cwe-d745593f-beea-488f-9cfc-9daaa7d64c2d"
            ],
            "swcs": [
                "swc-68fe907c-32b1-4aa2-b070-7e2b85a72f77"
            ],
            "tools": [
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ae0c5775-91fc-40bb-9a58-7ad1b8093c4a"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-132b3491-974e-4756-b91d-b3b157399c22",
            "name": "Atomicity Violations (Machine Unauditable)",
            "description": "Business Logics may often interleave and interfere with each other but some of them  require business level atomicity and that state variables are not accessed by other  flows while they are ongoing. Developers may fail to guarantee atomicity if they  assume it is guaranteed by the runtime, as runtime only guarantees atomicity of Txs",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Atomicity Violations (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unfair Business Models"
                },
                {
                    "ref_id": "ref-882e6418-f8f7-4bdf-ba76-764e8031aeb5",
                    "alias": "Not Atomic Updates in Concurrent Blockchain Transactions"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-727d900d-73ec-498c-be2e-270e2190b4dc",
            "name": "Lack of proper locks for a business flow consisting of multiple transactions",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Lack of proper locks for a business flow consisting of multiple transactions"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-132b3491-974e-4756-b91d-b3b157399c22"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f",
            "name": "Bad Coding Pattern",
            "description": "bad quality coding patterns (i.e. Dynamic array elements, continue-statements in  do-while-statements, nonstandard naming conventions)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Bad Coding Pattern"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Bad Coding Pattern"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Coding Mistakes"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Naming Conventions"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-24dad210-0a3e-4162-94ea-bafa6a4dd5e2",
                "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-249ba507-923a-4eec-949b-65d198a069c4",
            "name": "Balance Equality",
            "description": "if the contract logic depends on its balance ethers can be sent forcefully by using  selfDestruct(victim_addr) or sending ether before deployment (since SCs addresses  are deterministic), this will avoid to call the contract's fallback function meaning he  cannot reject the ethers, causing the equal balance check to fail  i.e. case where a contract assumes that all entities participating in a Tx must have  the same credit balance before the contract operations can execute, if there  are no adequate locking mechanisms attackers can send credit to entities  and make the condition (==) never met, making  the contract unusable (caused by forcing ether to a contract) Forcing ethers to a contract can happen through: - Selfdestruct - Pre-calculated Deployments (addresses of newly deployed SCs are deterministic) - Block Rewards and Coinbase (in PoW mining setting the target address to the  coinbase and gaining block rewards)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Balance Equality"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Incorrect Equality"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Locking"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-132: Unexpected Ether balance"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unexpected Ether Balance"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Exact Balance Dependency"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Manipulated Balance"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Strict Balance Equality"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Strict Balance Equality"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Strict Balance Equality"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Forced Ether to Contract"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unexpected Ether Balance"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Equality on the Balance"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Strict Equality of Balance"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Unexpected Ether Transfers - Force Feeding"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Unexpected Ether Transfers - Force Feeding"
                }
            ],
            "cwes": [
                "cwe-61e91e04-4cc9-423a-a8e7-9d5c66ce877a",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-05f574a5-33c4-4ca0-8de5-e6582b768245"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-e946deff-7233-4b63-bac9-6190d16ed218"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-9fc190cb-9847-4b1e-b370-7edb70c553a4",
                "vul-8c68c309-621d-44fa-940c-46c8c6074dd9",
                "vul-4ab596af-7196-4cc7-bbdd-59f775bc54f1"
            ]
        },
        {
            "id": "vul-2cd6762b-202b-4220-ae44-fd8f544561b5",
            "name": "Behavior of The Specific Function",
            "description": "Check on the function behaviour / purpose that can have different effects. (mainly operate on the folowing aspects: total supply, account's balance, contract  status and contract authority)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-1415a694-6569-495f-b7ad-8aec77e0175d",
                    "alias": "Behavior of The Specific Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b4bffcf-8960-4cda-b584-b405198be3a0",
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c08fa682-8c8a-4632-956d-4d241ea50827",
            "name": "Block Number Dependency",
            "description": "block.number can't be directly modified by miners but indirectly manipulated as they can decide whether do add a specific transaction to the next block ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cbe33fa7-6285-4f55-88e0-390212e84119"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Block Number Dependency"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Timestamp Dependence"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-116: Block Values as a Proxy for Time"
                }
            ],
            "cwes": [
                "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538"
            ],
            "swcs": [
                "swc-9dace717-c658-4ceb-86f0-1eea5df436d4"
            ],
            "tools": [
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3fe125e1-4b1a-4260-9dd1-8fa0824176b9",
            "name": "Blockhash Dependency",
            "description": "Usage of blockhash in critical operations, which can be manipulated by miners",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cbe33fa7-6285-4f55-88e0-390212e84119"
            ],
            "attacks": [
                "att-440221a9-e2e1-47fd-bf96-2e3960bf0767",
                "att-5417b086-e911-42f6-872e-df0ea6bfe498"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Blockhash Dependency"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Blockhash"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Blockhash Usage"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Block-state Dependency - BD"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Blockhash Usage"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Blockhash Usage"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Random with Blockhash"
                }
            ],
            "cwes": [
                "cwe-a9734e31-3393-43af-8c97-3b7c6695a051"
            ],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ef0e30b9-41a3-4a65-9f41-921b614b97c9",
            "name": "Byte Array",
            "description": "Wrong selection of certain datatypes which leads to the allocation of more memory and unnecessary gas consumption (i.e. byte[] instead of bytes: byte array: EVM operates on 32 bytes a time, byte[] always occupy multiples of 32 bytes)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "High Gas Consumption Variable Data Type or Declaration"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Byte Array"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Type in Variable Declaration"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "High Gas Consumption Data Type"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "High Gas Consumption Data"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-53a65948-59e5-4769-ad55-1097f20ef99f",
            "name": "Call To The Unknown",
            "description": "Solidity Primitives (call, send, delegatecall) or functions without  a signature used to  call the fallback function of the callee",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Malicious Fallback Function"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Unknown Function Call"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Unsafe Call To Phantom Function"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Call To The Unknown"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Call To The Unknown"
                }
            ],
            "cwes": [
                "cwe-1a81bd17-91b5-4521-959b-fb2891601a9b"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-a9cccac9-398e-485e-885f-08bf54c6bca6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4aee9fc0-84a1-493e-a37d-f74a3b48df47",
            "name": "Call with Hardcoded Gas Amount",
            "description": "Gas cost of opcodes can be changed with future hard forks and may break already deployed contracts with fixed gas assumptions (i.e. send, transfer have a  hardcoded gas limit of 2300)  if a contract accepts an hard-coded amount of gas unit, this could be insufficient i.e.  if an hard fork increases the gas fee schedule, in this case the contract won't be able  to accept a new deposit even if valid ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8",
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Ethereum Update Incompatibility"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Call with Hardcoded Gas Amount"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-134: Message Call with Hardcoded Gas Amount"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Hardcoded Gas Limit"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Failing to Accept New Deposit"
                }
            ],
            "cwes": [
                "cwe-f23fd63f-8103-4094-b7e6-3af680754c8d"
            ],
            "swcs": [
                "swc-db896544-6aca-4907-8b30-9ee5d685cbcd"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-a9cccac9-398e-485e-885f-08bf54c6bca6",
                "vul-24dad210-0a3e-4162-94ea-bafa6a4dd5e2"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-546a0287-1548-4c43-bbe0-9b38f63cc403"
            ]
        },
        {
            "id": "vul-dcb1849c-84ef-462e-b1fc-c16fc2f9cc7b",
            "name": "CallStack Depth Limit",
            "description": "Exception after the call stack depth of 1024 frames is exceeded (not handled by victim contract, or return value not checked)",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4",
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Stack Size Limit"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "CallStack Depth Limit"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Stack-based Buffer Overflow"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Call Stack Depth Limitation"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "CallStack Depth"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "CallStack Depth Limit"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Stack Size Limit"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Callstack Bound"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Callstack Depth Issue"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Stack Overflow"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Call Depth Attack"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-1ffb6012-1e2d-48d7-bff7-b608a411a4d5"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-33f04ca6-3fcf-4f34-8493-8a4339950a26",
            "name": "Clean Higher Order Bits On Fixed Byte Array",
            "description": "Comparing two fixed byte arrays (byteNN with NN from 1 to 32) causes the compiler  to convert their sizes to byte 32, causing their higher order bits to change and  thus  creating an incorrect comparison just reading in garbage data from memory. An  attacker can manage to reach undesired code paths by entering specific input data",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Clean Higher Order Bits On Fixed Byte Array"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ddc5a75a-4f55-4340-825a-fd83e6ecba41",
            "name": "Code With No Effects",
            "description": "presence of code without practical purpose, with no effect on the intended functionality or code never executed, code which doesn't execute the intended  action correctly ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "No Effect Code Execution"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-135: Code With No Effects"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Call To Default Constructor"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Missing Logic, Logical Errors or Dead Code"
                },
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Dead Code - Useless Code Related Pattern"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Code With No Effects"
                }
            ],
            "cwes": [
                "cwe-0066f920-b9b7-44c7-b699-c6b6298f5376"
            ],
            "swcs": [
                "swc-a65116d3-ce8a-40e1-955f-f7fc6bd4c544"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-24dad210-0a3e-4162-94ea-bafa6a4dd5e2",
                "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c831fe47-2ea5-4340-b48f-398b71f8c17c",
            "name": "Comparison With Unilateral Outcome In a Loop - Loop Related Pattern",
            "description": "comparison executed in each iteration of a loop but whose result is the same even if cannot be determined in compilation (not opaque predicate) should be executed once outside the loop",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Comparison With Unilateral Outcome In a Loop - Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Comparison With Unilateral Outcome In a Loop - Loop Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001",
            "name": "Compiler Error",
            "description": "compiler errors ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Compiler Error"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5df72848-267b-4fc0-a7a7-517c1a2e91b9",
            "name": "Constant Optimizer Subtraction",
            "description": "The Solidity optimizer converts numbers used as constants in smart contracts into  routines in order to conserve gas. If some number is represented in hexadecimal  starting with 0xff and follows with a large number of zeroes, it can be incorrectly converted into an incorrect routine representation, affecting the mathematical  computations (specifically subtraction) between two routines run instead of executing  the mathematical operations with the actual numbers",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Constant Optimizer Subtraction"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-60a8bd28-600b-4227-a9e6-e352d8d0a896",
            "name": "Constant Outcome Of a Loop - Loop Related Pattern",
            "description": "the outcome of a loop may be a constant that can be inferred in compilation, then  the function body should be simplified by returning a constant instead of a local var",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Constant Outcome Of a Loop - Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Constant Outcome Of a Loop - Loop Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8675f66b-c599-43e4-aba5-24a1a5e89458",
            "name": "Contract Implementation Specific Bugs (Machine Unauditable)",
            "description": "implementation-specific bugs without general oracle (not appearing in different SCs",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [
                "att-034800e5-29d3-43cc-99ed-69a583d656d8"
            ],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Contract Implementation Specific Bugs (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Specific Properties - Context-dependent Security Issues"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-24dad210-0a3e-4162-94ea-bafa6a4dd5e2"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-f6b5cf83-e09f-4631-9a9a-134069d801de",
            "name": "Dead Code - Useless Code Related Pattern",
            "description": "predicate never verified that causes some code to be never executed ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [
                "att-bdcec890-d2f6-4da0-b7f2-bcf08b2ec20d"
            ],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Dead Code - Useless Code Related Pattern"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unused Statement"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unused Elements"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Dead Code - Useless Code Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ddc5a75a-4f55-4340-825a-fd83e6ecba41"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-bfc59ee3-7ef8-4be7-9c03-246d586eeb0b",
            "name": "Deadlock State",
            "description": "Accessible Selfdestruct allows the destruction of the Wallet Library, causing all contracts depending on it to be in a deadlock state (can no longer perform funds Txs)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Deadlock State"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-054be538-9c34-4a44-b537-de695e6ed513"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-bba48068-3869-4d9f-abda-5eeb868ff8d9",
            "name": "Delegatecall to Untrusted Callee",
            "description": "Context preservation of DelegateCall (used in case the ABI: Application  Binary Interface of the target external function is unknown) which  doesn't reflect the state changes on the callee SC but only on the caller [allows for the contract code to be run in the callee\u2019s context, therefore  enabling to change caller's sensitive state variables] * ?? delegatecall  allows to insert callee contract\u2019s bytecode into the bytecode of the  caller contract, as a consequence the callee is executed in the context of the caller  and can update the caller's state variables (the callee can be malicious)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-70e7246f-3ff4-4d6d-b15c-caff2901f511"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Delegatecall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "DelegateCall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-112: Delegatecall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Delegatecall To Insecure Contracts"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Delegatecall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Delegatecall Injection"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "DelegateCall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Delegatecall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Delegatecall Injection"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "DelegateCall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "DelegateCall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Tainted / Dangerous Delegatecall"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Delegatecall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unrestricted Action"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Delegatecall To Untrusted Contract"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Access Control"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unrestricted Delegatecall"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Delegatecall and Storage Layout"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "DelegateCall to Untrusted Callee"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Delegatecall to Untrusted Callee"
                }
            ],
            "cwes": [
                "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538",
                "cwe-1a81bd17-91b5-4521-959b-fb2891601a9b"
            ],
            "swcs": [
                "swc-a65116d3-ce8a-40e1-955f-f7fc6bd4c544"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-fba79187-6e92-4191-85c4-80bfd20a1fb7",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-53a65948-59e5-4769-ad55-1097f20ef99f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8d76defe-7b0c-4a94-892b-a1d4477670ff",
            "name": "Delegatecall Return Value",
            "description": "delegatecall function takes the call data of another function and returns a Boolean to  determine whether or not the call was successful. If the parameter function (calldata) returns at least 32 zero bytes, delegatecall will always return false even if the call did  not throw an exception (Because the EVM does not check if a function returned a  value that is correct but still \u201cfalse\u201d as a Boolean)",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Delegatecall Return Value"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-bba48068-3869-4d9f-abda-5eeb868ff8d9"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-2892d467-c358-4d75-b6bb-f12b837fda13"
            ]
        },
        {
            "id": "vul-59ed0f29-fe0e-4773-a5f7-ea3f711d2767",
            "name": "Denial of Service by Exception Inside Loop",
            "description": "DoS caused by operation inside loops throwing exceptions and depending on  external Txs to succeed; if the exception is thrown in a loop the contract state will rollback but as the code is unmodifiable the attacker cannot be removed from the  list of iterated elements > DoS",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Denial of Service by Exception Inside Loop"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Dos Under External Influence"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Dos Under External Influence"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "DoS Costly Patterns and Loops"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "DoS Costly Patterns and Loops"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Denial of Service by Exception Inside Loop"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Gas Limit DoS on a Contract via Unbounded Operations - DoS with Block Gas Limit"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "DoS - Looping through externally manipulated mappings or arrays"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Denial of Service"
                }
            ],
            "cwes": [
                "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-34de4fb3-4579-4f9b-a2ff-41ed9f247084",
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [
                "vul-1ffb6012-1e2d-48d7-bff7-b608a411a4d5"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7ff10728-486d-44ee-bcec-c333270d0404",
            "name": "Denial of Service by External Contract",
            "description": "DoS caused byTxs with failed external calls in conditional statements without  proper exception handling, preventing the caller from completing the execution (i.e. external functions that revert if the refund fails, a malicious callee can make sure the refunds will always fail causing DoS; or sending ether to a bas address and the  execution flow depends on the successful money transfer) ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [
                "att-5897940b-d19e-4fce-ae78-ab9a24bc411a",
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "DoS with Failed Call"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Exception Handling of External Calls"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Denial of Service by External Contract"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-113: DoS with Failed Call"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "DoS With Unexpected Revert"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "DoS"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "DoS"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "DoS With Unexpected Revert"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "DoS of Failed Calls"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "DoS With Unexpected Revert"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Denial of Service by External Contract"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Denial of Service because of an External Service"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Denial of Service by External Contract"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "DoS Due to External Contracts / Due to Unexpected Revert"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "DoS With Unexpected Revert"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "DoS with Revert"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "DoS With Unexpected Revert"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "DoS - Progressing State Based On External Call"
                }
            ],
            "cwes": [
                "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4",
                "cwe-1a81bd17-91b5-4521-959b-fb2891601a9b"
            ],
            "swcs": [
                "swc-53ad4bb2-f228-40a0-94af-6072015da611"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-a9cccac9-398e-485e-885f-08bf54c6bca6"
            ],
            "enabling_vulnerabilities": [
                "vul-1ffb6012-1e2d-48d7-bff7-b608a411a4d5"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-90e2e849-3bd2-4907-9b0c-a248c22da91e",
            "name": "Denial of Service through Owner Account (DoS)",
            "description": "launched through the owner account which has the ability to control  the contract, if the owner account is not protected can be manipulated by attackers (i.e. ether frozen) owners have specific privileges in contracts required for the state of the contract to  change; If a privileged user, e.g., the owner, misplaces their private key or becomes  inactive the entire contract will fail to operate",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Denial of Service through Owner Account (DoS)"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Owner Operations"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Denial of Service"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Denial of Service with Selfdestruct"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "DoS - Owner Operations"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-34de4fb3-4579-4f9b-a2ff-41ed9f247084",
            "name": "Denial of Service with Block Gas Limit",
            "description": "DoS caused by a Tx exceeding the block gas limit, namely the upper limit of gas consumed by all the Txs in a block ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Denial of Service with Block Gas Limit"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Denial of Service with Block Gas Limit"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-128: DoS With Block Gas Limit"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Denial Of Service"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "DoS With Unbounded Operations"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "DoS"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "DoS of Gas Limit"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "DoS With Unbounded Operations"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Infinite Loops"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "DoS Costly Patterns and Loops"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "DoS Costly Patterns and Loops"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "DoS From Expensive Transactions"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Gas Limit DoS on a Contract via Unbounded Operations - DoS with Block Gas Limit"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Denial Of Service"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Infinite Loops"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unbounded Operations"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "DoS - External Calls Without Gas Stipends"
                }
            ],
            "cwes": [
                "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
            ],
            "swcs": [
                "swc-a714522b-44b6-4d28-8363-c9198e8145aa"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666",
                "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6"
            ],
            "enabling_vulnerabilities": [
                "vul-07ba8886-5c54-4196-9dd2-d2bb55d2eeb2",
                "vul-25082b92-d7c6-433a-854e-425dcecb8b64"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3259c726-119d-47a5-b363-1bc3ea6b3360",
            "name": "Denial of Service with Block Stuffing",
            "description": "only the attacker's Txs are included in the newly mined blocks due to higher gas  prices, while the others are abandoned by miners for a period of time (greedy  mining incentive mechanism) An adversary can temporarily delay the execution of other Txs by  issuing a series  of Txs with a high gas price, preventing the others from being processed for multiple  blocks; this action, for instance via failing assert statements, consumes all the  available gas exceeding the block's gas limit. Worse for crucial Txs such as oracle  updates, since Oracles provide assets price information in the DeFi ecosystem and this may lead to market inefficiencies and manipulation or inaccurate valuations",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8",
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [
                "att-3dbee415-24d1-4385-893b-f973a137be11"
            ],
            "references": [
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Denial of Service with Block Stuffing"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Suppression Frontrunning"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Suppression Frontrunning"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Suppression Frontrunning"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Block Stuffing"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-34de4fb3-4579-4f9b-a2ff-41ed9f247084"
            ],
            "enabling_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-f5f0b0e7-b510-4cbd-b39a-07ce09ef8f5c",
            "name": "Divide By Zero",
            "description": "if some denominator of an integer divisions is zero this will lead to errors  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Divide By Zero"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unchecked Division By Zero"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-02df68c3-b27c-4620-9abe-bd27d2de56c4"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-bb05f345-b117-4533-b054-c03c39b792ae",
            "name": "Ecrecover Malformed Input",
            "description": "When malformed input is entered into the ecrecover() function, the function isn't able to signal whether the program was successful or not, leading to the function  returning left over data present in the return area of memory (shouldn't be accessed) - ecrecover is a precompiled built-in cryptographic function which recovers an  address associated with the public key from an elliptic curve signature with parameters  r, s & v or returns zero on error; It's possible to do this deterministically by setting  v as any positive number other than 27 or 28. ecrecover is often used to verify that  the signer is an authorized account. The problem with this is that uninitialized or  renounced authorization logic often sets the owner/admin address as address(0),  the same value which may be deterministically returned by ecrecover, meaning   that an unsecure contract may allow an attacker to spoof an authorized-only  method into executing as though the authorized account is the signer",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Ecrecover Malformed Input"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unexpected ecrecover Null Address"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca",
            "name": "Erroneous Accounting (Machine Unauditable)",
            "description": "erroneous numerical computations which lead to incorrect implementation of the  underlying business models usually introduce small errors every time, but errors can accumulate and introduce substantial loss",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [
                "att-4d09e292-e761-45e1-b17f-bad529ba1980"
            ],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Erroneous Accounting (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unfair Business Models"
                }
            ],
            "cwes": [
                "cwe-d745593f-beea-488f-9cfc-9daaa7d64c2d"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ab4ac1b1-b21f-4ab6-b4f8-8c7d42c350bd",
            "name": "Incorrect calculating order",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Incorrect calculating order"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-911a2401-3a91-4651-bae1-778e18d0eddd",
            "name": "Returning an unexpected value that deviates from the expected semantics specified for the contract",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Returning an unexpected value that deviates from the expected semantics specified for the contract"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-635545f3-7fa6-46a9-aa20-eb2f6d2deac0",
            "name": "Calculations performed with incorrect numbers",
            "description": "(e.g., x = a + b ==> x = a + c)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Calculations performed with incorrect numbers"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Typographical Error"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-05aeecd1-5d3b-4677-a93b-9e42d02c3a42",
            "name": "Other accounting errors",
            "description": "(e.g., x = a + b ==> x = a - b)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Other accounting errors"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Typographical Error"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-43150d1c-2187-478f-bbd7-968d5ba234fa",
            "name": "Ether Lost In Transfer",
            "description": "Sending ether to a recipient address not associated to an account (orphan) ",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Lost Ether"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Ether Lost to Orphan Address"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Ether Loss"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Ether Lost In Transfer"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Ether Lost"
                }
            ],
            "cwes": [
                "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-5bbf5118-489b-4126-852f-bc57cab0d5d5"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4ab596af-7196-4cc7-bbdd-59f775bc54f1",
            "name": "Ether Transfer with Mining",
            "description": "Generally, all ETH transfers invoke contract\u2019s fallback function and thus can be detected by the contract. However contract cannot handle incoming Ether sent as a reward for block mining",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Ether Transfer with Mining"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8c68c309-621d-44fa-940c-46c8c6074dd9",
            "name": "Ether Transfer with Selfdestruct",
            "description": "Generally, all ETH transfers invoke contract\u2019s fallback function and thus can be  detected by the contract. However contract cannot handle incoming Ether sent  by selfdestruct function",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Ether Transfer with Selfdestruct"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Unexpected Ether - Selfdestruct / Suicide"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Forced Ether Reception"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-fba79187-6e92-4191-85c4-80bfd20a1fb7"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-054be538-9c34-4a44-b537-de695e6ed513"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6b60ab41-8acc-4fd9-8f80-940358f346cc",
            "name": "Event Struct Wrong Data",
            "description": "Events in Solidity are used to log whenever some sort of transaction or interaction  with a contract takes place, storing data such as contracts\u2019 memory addresses and  parameters passed into it through events into a special data structure called the Log. However, If a struct is passed into an event, only the memory address of the struct is  stored in the Log rather than the data within the struct",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Event Struct Wrong Data"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b98bd7a0-24b3-49b0-a1d6-85dfb70c2d67",
            "name": "Expensive Operations In a Loop - Loop Related Pattern",
            "description": "expensive operations (usually storage-related which involve SLOAD to load storage  vars to the stack, SSTORE to save some op outcome in the storage) within loops  should be avoided (i.e. using temporary local vars that reside on the stack to save  intermediate outcomes and then assigning the final outcome to the storage var, so having a singleSLOAD and SSTORE op)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Expensive Operations In a Loop - Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Expensive Operations In a Loop - Loop Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ea483ec2-7861-43ff-a850-e12ea9931b77",
            "name": "Exposed State Variables",
            "description": "case where a state variable is erroneously exposed and its value may be then  modified by an attacker influencing the execution of a certain operation",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Exposed State Variables"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-95609e15-01da-486f-94f3-37b716c80565"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-a9cccac9-398e-485e-885f-08bf54c6bca6",
            "name": "External Contract Referencing",
            "description": "external contracts are referenced through their addresses provided during  deployment (not hard coded),  if the wrong address is provided a malicious  contract can be called (honeypot) allowing an arbitrary address to refer to the contract without checking whether the  address represents the intended contract (should always be checked at every Tx)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-92cc0385-9171-4760-a459-8267439a71aa"
            ],
            "references": [
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "External Contract Referencing"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Direct Call to Untrusted Contract"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "External Contract Referencing"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "External Contract Referencing"
                }
            ],
            "cwes": [
                "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4d826376-5d99-46ee-829e-964c8b86a58b",
            "name": "Failed Send",
            "description": "executing a throw upon a failed send to revert the Tx can lead to vulnerabilities, i.e. to execute a fallback function  ???? send instruction fails to send money for reasons like exceeding gas limit, or  insufficient ether balance, then the return value should be checked to avoid  to wrongly uipdate the balance",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f"
            ],
            "references": [
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Failed Send"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Unchecked and Failed Send"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-afd66c25-305a-4009-b684-20c1f22d32ee"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7c6fa214-dfd9-4c1f-af0b-e151bcc52f07",
            "name": "Floating Pragma",
            "description": "Bugs introduced if the contract is compiled with outdated compiler versions wrt the one used for testing (creation time), that may happen if the  pragma directive contains the version operator ^ APIs are supported only in some compiler versions, and unspecified version in the  contract may cause developers encounter compiler errors in the future code reuse  due to the version gap can result in version compatibility issues that render the code incompatible with  different versions of the Solidity compiler. As a result, the smart contract may fail to  compile or produce unpredictable errors (lock the pragma version and keep track of bugs in the selected compiler version)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Floating Pragma"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Floating or No Pragma"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Undetermined Program Version Prevalence"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-103: Floating Pragma"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Compiler Version Not Fixed"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Solc Version"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unspecified Compiler Version"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Floating Pragma"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Floating Pragma"
                }
            ],
            "cwes": [
                "cwe-700db885-365a-4888-8a16-3b28065dc398"
            ],
            "swcs": [
                "swc-230782ab-4191-4a00-a157-072e1159f8b5"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3f9cc6b4-5038-4aee-9eb9-86e86d6ed108",
            "name": "Frozen Ether",
            "description": "The killing of a callee /library contract for withdrawing funds can lead to  frozen assets in dependent contracts, if they do not provide a function for withdrawal (if functions that accept credit but have no functionality to enable  withdrawal are used there it no way to recover the credit once sent) GREEDY CONTRACT = can receive ether (contains payable falback function) but  provides no way to withdrawn them after a certain execution state",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Frozen Ether"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Unreachable Payable Function"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Locked Money"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Locked Ether"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Freezing Ether"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Greedy Contract"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Frozen Ether"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Freezing Ether"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Ether Frozen"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Locked Ether"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Improper Asset Locks or Frozen Asset"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Ether Lock"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Greedy Contract"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Greedy Contract"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Ether / Token Locking"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Locked Assets"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Frozen Ether"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Freezing Ether"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Blocked Money"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Freezing Ether"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Locking, Locked or Freezing Ether"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Frozen Ether"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Locked Ether"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Frozen Funds"
                },
                {
                    "ref_id": "ref-3e64d94e-d822-4ba3-a935-14e534f8d629",
                    "alias": "Greedy Contract"
                }
            ],
            "cwes": [
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-c62699da-8b2f-4813-b011-072625f91e66",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f",
                "vul-bfc59ee3-7ef8-4be7-9c03-246d586eeb0b"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e643822f-e47e-48f6-9156-e492efcc7048",
            "name": "Function Default Visibility",
            "description": "Improper or missing usage of function visibility specifiers (external, public, internal, or private) and modifiers leading to unauthorized access ( i.e functions meant to be  invoked only by external contracts should be marked with the external modifier  insteadof public to be invoked using calldata (memory not modified by the function))",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [
                "att-d5181f0a-35b0-45ab-a01c-ba06576bc06a"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Function Default Visibility"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unauthorized Accessibility due to Wrong Function or State Variable Visibility"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Function Modifier"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-100: Function Default Visibility"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "External Function"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Implicit Visibility Level"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Default Visibility"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Default Visibility"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Failure To Use Function Modifiers"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Erroneous Visibility"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Visibility/ Exposed Functions or Secrets/ Failure To Use Cryptography"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Access Control"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Function / State Default Visibility"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Function Default Visibility"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Function Default Visibility"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Erroneous Visibility"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Visibility of Exposed Functions"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Visibility Issues"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Visibility of Exposed Functions"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unspecified Visibility Level"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Default Visibility"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Default Visibility"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Unprotected Function"
                }
            ],
            "cwes": [
                "cwe-b71fe313-5245-4af1-bf01-4c97867682cd",
                "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
            ],
            "swcs": [
                "swc-ebb5656a-badc-4830-b29d-37c8b002906d"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ed021b01-2263-4422-80ba-ba4a040b1975",
            "name": "Function Return Type Mismatch",
            "description": "function implemented starting from an interface, with the wrong data type for the  value to be returned wrt the interface an attacker able to arbitrarily change a function (return) type variable may execute  random code instructions",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "ERC721 Interface"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-127: Arbitrary Jump with Function Type Variable"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Function Return Type Mismatch"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Type Mismatch"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Arbitrary Jump"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Arbitrary Jump"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Arbitray Jump with Function Type Variable"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Incorrect Interface"
                }
            ],
            "cwes": [
                "cwe-179fa40e-2a4c-4c3d-88c3-183af7d016e2",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-b4f59d51-d7bf-4d20-abc9-dc92a30c6e71"
            ],
            "tools": [
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-b257bf48-1abf-4be5-b432-4c324849cdf4"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5c0e6ced-41ca-4c1e-b564-22de1311432f",
            "name": "Function Selector Collisions",
            "description": "A function selector  is the first 4-bytes of the hashed function signature, needed for  making a function call. When 2 functions respectively in the proxy and in the logic  happen to have the same function selector, attempts to call the logic function can unintentionally be handled by the proxy function instead; if the proxy function in  is a setter, it sets addr logic to an undetermined address when trying to call a  different function provided by the logic contract",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Function Selector Collisions"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Signature Collisions - Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-709c841b-9502-408c-bdaf-f3add39e0fe0"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666",
            "name": "Gas Costly Loop",
            "description": "Unbounded and costly operations in loops causing failures,  inefficiency and   potential DoS, then program should avoid having to perform operations for an  unbounded number of clients, and the amount of gas should be checked at each  iteration ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Gas Costly Loop"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Exception Handling in a Loop"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Gas Costly Loop"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Costly Loop"
                },
                {
                    "ref_id": "ref-40b2f693-4497-45a2-9911-39f751fd061f",
                    "alias": "Unbounded Mass Operation"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-128: DoS With Block Gas Limit"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Lack Of Support To Identify Under-Optimized SCs"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Gas-related Issue - GI"
                },
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Expensive Operations In a Loop - Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Unbounded or Gas-Costly Operation"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Nested Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Nested Call"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "DoS of Gas Limit"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Costly Loop"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Infinite Loops"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unbounded Mass Operation"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Infinite Loops"
                }
            ],
            "cwes": [
                "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
            ],
            "swcs": [
                "swc-a714522b-44b6-4d28-8363-c9198e8145aa"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-00e25a91-8d67-47f9-9d46-f652c45e1f79"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6",
            "name": "Gas Costly Pattern",
            "description": "unnecessary code and expensive patterns cause excessive gas consuption (high  execution fees)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Gas Costly Pattern"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Gas Costly Pattern"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Gas Overspent"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Costly Patterns - Gas"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Gas Costly Pattern"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Lack Of Support To Identify Under-Optimized SCs"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Gas-related Issue - GI"
                },
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Dead Code - Useless Code Related Pattern"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Unbounded or Gas-Costly Operation"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Gas Costly Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-546a0287-1548-4c43-bbe0-9b38f63cc403",
            "name": "Gasless Send",
            "description": "funds transferred to a contract using send() or transfer() but insufficient amount of  gas allocated by the sender to execute a costly fallback function, causing out-of-gas  exception that must be handled  missing or wrong checking of the gas prerequisites for execuring a certain  operation (i.e. send with 2300 units of gas) may cause out-of gas exception when executing the callee fallback, if not handled ether may not be transfered ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Mishandled Out-of-gas Exception"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Gas Requirements Checking"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-126: Insufficient Gas Griefing"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Gas-related Issue - GI"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Gasless Send"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Out-Of-Gas Send"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Transfer Provides Too Little Gas"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Insufficient Gas Griefing"
                }
            ],
            "cwes": [
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144",
                "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
            ],
            "swcs": [
                "swc-5e041de8-7633-4387-b87b-c831a1e8d917"
            ],
            "tools": [
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4d826376-5d99-46ee-829e-964c8b86a58b",
                "vul-6a7b6db1-2c49-449f-90ea-1d462715a772"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c385e4ff-9f2f-431d-80af-0d3d1e9ceeac",
            "name": "Generating Randomness",
            "description": "using block-hash and other  block state variables like coinbase, timestamp,  number, difficulty and gaslimit  as source of randomness (seed to generate  pseudo-random values) is bad as blocks can be manipulated by miners",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cbe33fa7-6285-4f55-88e0-390212e84119"
            ],
            "attacks": [
                "att-e3ab8f82-b688-4ab7-a99d-33c14dc7b99e",
                "att-3dbee415-24d1-4385-893b-f973a137be11",
                "att-65994c6f-25e5-436d-990a-d50f814b66fa"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Randomness using 'blockhash'"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Bad Random Number Generation"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Bad Randomness"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-120: Weak Sources of Randomness from Chain Attributes"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Randomness Generation"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Block Timestamp Dependency"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Random Number"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Bad Randomness"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Timestamp Dependence"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Timestamp Dependence"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Weak PRNG - WP"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Block Dependency"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Weak Randomness"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Time-based Random value Dependency"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "False Randomness"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Weak Source Of Randomness"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Weak Randomness"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Generating Randomness"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Dependence On Predictable Variables"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Bad Randomness"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Weak Randomness From Chain Attributes"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Randomness Bug"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Bad Randomness"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Random With Blockhash"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Weak Sources of Randomness from Chain Attributes"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Entropy Illusion"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Bad Randomness"
                }
            ],
            "cwes": [
                "cwe-bf95240f-5046-4cdc-9d32-09bd73d1c64d"
            ],
            "swcs": [
                "swc-53fda511-06c8-4d14-b5ac-530126793122"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-0daa5776-59e6-4aa7-b1b5-13f6aea05de9",
                "vul-3fe125e1-4b1a-4260-9dd1-8fa0824176b9",
                "vul-c08fa682-8c8a-4632-956d-4d241ea50827"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3fe1efa7-8857-4909-a2c2-e8d30dca8406",
            "name": "Hash Collision With Multiple Variable-Length Arguments",
            "description": "incorrect encoding of arguments of one-way hash functions, resulting in higher likelihood of collisions (i.e. hash collisions caused by abi.encodePacked()  due to multiple variable-sized parameters, and packing elements regardless  of their original order in the array) ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Hash Collision With Multiple Variable-Length Arguments"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Signature-based Vulnerabilities"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Incorrect Argument Encoding"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-133: Hash Collisions With Multiple Variable Length Arguments"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "ABI Hash Collisions"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Cryptographic Issues"
                }
            ],
            "cwes": [
                "cwe-ef50a957-e547-4bfb-ac18-c396ce3684dc"
            ],
            "swcs": [
                "swc-92bd30a4-b796-45d6-a289-191809bef469"
            ],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-f8922aac-642c-4d62-ae5c-70acb89a9d68",
            "name": "High Gas Consumption Function Type",
            "description": "Unnecessary gas consumption of certain functions (i.e. functions declared public   instead of external) I.e. public function require  to allocate memories for the input  parameters -which instead can be easily read from calldata for internal functions-   and additionally the input parameters types should be as simple as possible, avoiding complex data structures because the cost of copying ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "High Gas Consumption Function Type"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "External Function"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "High Gas Consumption Function Type"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "High Gas Consumption Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6"
            ],
            "enabling_vulnerabilities": [
                "vul-e643822f-e47e-48f6-9156-e492efcc7048"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-1e632d81-851e-4c74-bfa6-e10494250d8b",
            "name": "Higher Order Byte Clean Storage",
            "description": "All storage types are stored in blocks of 32 bytes, for certain data types the higher  order bytes are not cleared properly  when assigning or editing data. This allows an  attacker to overwrite storage variables during runtime to reach undesired execution  paths",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Higher Order Byte Clean Storage"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6c0ab7ac-a849-42c3-8550-edd7b93bcaa7",
            "name": "Honest Mining Assumption",
            "description": "honest mining assumption (including the most valuable Txs in new blocks) may not  be the most profitable strategy for each miner, which may deviate conducting selfish minig, accepting bribes and reaping ordering optimization fees  (consensuns protocol not incentive-compatible)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [
                "att-ea97d736-90ab-4e3d-a2d8-6b1924d371d8",
                "att-831aa8e3-3342-44c9-8cd0-1e9c50b31132"
            ],
            "references": [
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Honest Mining Assumption"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c8273c24-13f2-48cd-8b45-748e82d72d39",
            "name": "ID Uniqueness Violations (Machine Unauditable)",
            "description": "functionalities, entities and/assets ought to be uniquely represented but developers  may forget to ensure uniqueness of ID fields and use other data fields as IDs, then  an attacker may create duplicate assets with the same field value of the real asset  and pass the access control cheks ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "ID Uniqueness Violations (Machine Unauditable)"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-dbf5acc4-4d99-4c9a-b8de-2045795db336",
            "name": "ID can be arbitrarily set by users or lack of ID validation",
            "description": "ID can also be a project-specified variable (e.g., hash) or an address.",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "ID can be arbitrarily set by users or lack of ID validation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-1cd032a8-1eb8-4513-a002-7786cb757f82",
            "name": "Shared resource without proper locks",
            "description": "(e.g., token)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Shared resource without proper locks"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5edf4fa5-3d0c-44b0-8f7b-eb757338f013",
            "name": "Identity Precompile Return Ignored",
            "description": "Solidity has an identity contract that it uses to copy memory; sometimes the call to this contract can fail due to the identity precompile check  in a contract being ignored, allowing the program to run without having access to the identity contract.  This could lead to contract referencing errors in private blockchains (data loss)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Identity Precompile Return Ignored"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-24dad210-0a3e-4162-94ea-bafa6a4dd5e2",
            "name": "Immutable Bugs",
            "description": "Unpatchable bugs due to contracts immutability ",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Immutable Bugs"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Immutable Bugs or Mistakes"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": ", Coding Errors"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Immutable Bugs / Mistakes"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Inability to Modify or Terminate SCs"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Coding Mistakes"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Immutable Bugs"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5bbf5118-489b-4126-852f-bc57cab0d5d5",
            "name": "Improper Input Validation",
            "description": "missing check on the input parameters sent in a Tx when invocking the  execution of a contract operation (i.e. short address attack)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [],
            "attacks": [
                "att-42123cdc-5fa1-46de-90df-a619da025f29"
            ],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Input Validation"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Non-Validated Arguments"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Input Validation"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Use of Untrusted Arguments"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Non-Validated Arguments"
                }
            ],
            "cwes": [
                "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d"
            ],
            "swcs": [],
            "tools": [
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6f2514b8-5945-4d92-94f4-744fa173c3c4",
            "name": "Improper Transaction Nonce Validation",
            "description": "Tx nonce is used by node implementations to enforce uniqueness of Tx within a  given blockchain. Poor node implementations might allow Txs to be replayed on the same chain",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cbe33fa7-6285-4f55-88e0-390212e84119"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Improper Transaction Nonce Validation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-5bbf5118-489b-4126-852f-bc57cab0d5d5"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c443226d-050e-4504-a9db-08396ebd77d2",
            "name": "Inconsistent State Updates (Machine Unauditable)",
            "description": "state variables are  often correlated but developers may update one variable and  forget to update the correlated ones or update incorrectly, leading to issues like  incorrect statistics or loss of funds ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Inconsistent State Updates (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Inconsistent State Updates (Machine Unauditable)"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-162cefeb-a43b-47d2-bfea-73fa059eb0ca"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-15463d67-103e-43ef-9a5b-996469266ab6",
            "name": "Missing state update",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Missing state update"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c443226d-050e-4504-a9db-08396ebd77d2"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-be1871b1-a4a4-424a-98a9-ada1988c5c9c",
            "name": "Incorrect state updates",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Incorrect state updates"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c443226d-050e-4504-a9db-08396ebd77d2"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8eafd339-8bd7-4ad6-8fac-260f49d2c455",
            "name": "Incorrect Inheritance Order",
            "description": "Refers to the situation where a parent contract is inherited in the wrong order.  Solidity allows for multiple inheritances, introducing an ambiguity known as the  Diamond Problem: if two or more base contracts define the same function, which  oneshould be called in the child contract? To resolve it,  reverse C3 linearisation is  used, which establishes priorities between the base contracts (crucial, i.e. if a  contract inherits from multiple base contracts defining functions or state variables  with the same name, an incorrect inheritance order can result in unintended function  calls or conflicting state variables) Impossibility to predict the actual state of a contract, caused by incorrect order in  the inherit statement used by C3 linearization to determine the order in which the  contracts are to be executed ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Incorrect Inheritance Order"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Incorrect Inheritance Order"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Using Inherited Functions and Variables"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Multiple Inheritance"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Incorrect Inheritance Order"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-73df044e-eec8-4052-98d1-ac4d4fedb800",
            "name": "Indistinguishable Chains",
            "description": "missing chainId field in Txs, which make the Txs signatures not chain-specific and  so reusable for other chains A blockchain\u2019s magic value is used to uniquely identify a chain and  binding Txs to a specific chain. Sw must check if received Txs have the expected magic value",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [
                "att-d143bd6d-9fd7-4f62-8e3a-6d6c718f483d"
            ],
            "references": [
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Indistinguishable Chains"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Replay Attack"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Replay Attack"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Improper Blockchain Magic Validation"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Cross-Chain Replay Attacks"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-9254324b-3788-4605-992d-c146af26b824"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7a735b12-8a07-408c-bc51-f4c4fa1b00d5",
            "name": "Insertion Frontrunning (Sandwich)",
            "description": "- the adversary executes its Tx and modifies the SC state an then the user's initial  function is executed within this altered context.  example of sandwiching attack: a user bids on a decentralized exchange to acquire an asset offering an asking price and specifying a slippage range for allowable price deviation. Before the user's trade, the adversary purchases the same asset, causing  the asset price to inflate, with an hike corresponding to the sub of the user's asking  price and the maximum allowed slippage amount. Consequently, the user's Tx  executes at the peak feasible price; then the adversary triggers a second Tx  offloading the assets, which results in a deflation of the asset price. In the end, the  adversary profit equals the user's max slippage, exploiting the price difference - involve calculating swap/liquidity or adding liquidity, and there is asset exchanges  or price queries but this operation could be attacked by Slippage/Sandwich Attack  due to no slip limit/minimum value check ?",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Insertion Frontrunning (Sandwich)"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Insertion Frontrunning (Sandwich)"
                },
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Slippage"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Unfair Slippage Protection"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Sandwich attack"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f"
            ],
            "enabling_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6a7b6db1-2c49-449f-90ea-1d462715a772",
            "name": "Insufficient Gas Griefing (Wallet Griefing)",
            "description": " subcalls to another contract may be invoked providing not enough gas to cause the subcallee failure, in that case an incorrect handling of the revert  operation may end in in a partial revert only. The send primitive should be implemented always with a check and abort the Tx if fails, but this is no longer  sufficient if an exception is thrown in the middle of a loop (wallet griefing) as may result in an execution of a callback function which runs out of gas",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Insufficient Gas Griefing (Wallet Griefing)"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Insufficient Gas Griefing (Wallet Griefing)"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-126: Insufficient Gas Griefing"
                },
                {
                    "ref_id": "ref-40b2f693-4497-45a2-9911-39f751fd061f",
                    "alias": "Non-Isolated External Calls - Wallet Griefing"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Incorrect Revert Implementation in a Loop"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Gas-related Issue - GI"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Insufficient Gas Griefing (Wallet Griefing)"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Wallet Griefing"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Gas Griefing"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Gas Griefing"
                }
            ],
            "cwes": [
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-5e041de8-7633-4387-b87b-c831a1e8d917"
            ],
            "tools": [
                "too-00e25a91-8d67-47f9-9d46-f652c45e1f79"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-cafa4218-783a-465f-b1ed-dc48ad4b2ebe"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-25082b92-d7c6-433a-854e-425dcecb8b64"
            ]
        },
        {
            "id": "vul-02df68c3-b27c-4620-9abe-bd27d2de56c4",
            "name": "Integer Division",
            "description": "Using integers instead of floating point representations for divisions  leads to results which are rounded-down",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793"
            ],
            "attacks": [
                "att-d456903e-51b5-439e-a452-e9276d89a953"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Integer Division"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Integer Division"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Integer Division"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-101: Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Arithmetic Issues"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Precision Loss - PL"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Floating Point / Unchecked Division"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Floating Points and Precision"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Arithmetic Precision Order"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Integer Division"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unexpected Results From Divisions"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Precision Issues"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Lack Of Precision"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Floating Points and Precision"
                }
            ],
            "cwes": [
                "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
            ],
            "swcs": [
                "swc-299fbb87-9336-4f86-85ee-75b6bc3a3b3d"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-28d9f403-8bec-4020-ab50-454b62042979"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5d2347d1-3d35-4122-9d21-02a83a31cc36",
            "name": "Integer Overflow / Underflow",
            "description": "output of a calculation exceeds the lower or upper range of the variable  size type and so cannot be expressed by such type",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793",
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [
                "att-b93b4d29-7d2c-44dc-924b-65a1bb5743bd",
                "att-4c3e4ac1-bc39-42c0-8b30-0de3c94dcb55",
                "att-1c8f53da-2e9d-45ac-83a2-2685ba7ea53b"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-101: Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Integer Overflow, Integer Underflow"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Unchecked Math"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Arithmetic issues"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Unchecked Math"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Overflow and Underflow"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Integer Over/Underflow"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Unchecked Math"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Integer Bug - IB"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unmatched Type Assignment"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Unmatched Type Assignment"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Integer Overflow"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Overflow / Underflow"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Overflow and Underflow"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Arithmetic issues"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Non-Verified Math"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Integer Over/Underflow"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-1415a694-6569-495f-b7ad-8aec77e0175d",
                    "alias": "Integer Overflow"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Integer Overflow"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Integer Overflow / Underflow"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Insecure Arithmetic"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Arithmetic Issues"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Over / Under Flow"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Arithmetic Over/Under Flows"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Integer Overflow"
                }
            ],
            "cwes": [
                "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
            ],
            "swcs": [
                "swc-299fbb87-9336-4f86-85ee-75b6bc3a3b3d"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d",
                "too-422d6eee-7f77-42ab-a45a-d208500c1dee",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [
                "mit-44c3792c-4b9a-4f5e-b45d-7066a87ee6ed"
            ],
            "parent_vulnerabilities": [
                "vul-28d9f403-8bec-4020-ab50-454b62042979"
            ],
            "enabling_vulnerabilities": [
                "vul-02df68c3-b27c-4620-9abe-bd27d2de56c4",
                "vul-44d54019-5379-46f1-8c03-0eccab4f67f1"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6b04260d-1dd4-4ac3-a7fd-e4145f064c28",
            "name": "Invariant Issue",
            "description": "When building a smart contract there are some invariant quantities in the process of contract creation/status, function calls and environment changes that should be  preserved (i.e. the total token amount  needs to remain the same in most contracts)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-1415a694-6569-495f-b7ad-8aec77e0175d",
                    "alias": "Invariant Issue"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-cf0ce1a6-0ebc-4dea-8eca-6194c022c87d"
            ]
        },
        {
            "id": "vul-45a6a33d-1704-4ea3-babc-09ce02ec1827",
            "name": "Keeping Secrets",
            "description": "No secrecy of private fields when their values are set through public  transactions (private keyword doesn't make the variable fully invisible to the outside world) or inner workings of a private function which remain visible to all it can lead to users de-pseudonimization as an attacker can deduce their real-world identities from reading their on-chain data",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Keeping Secrets"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Confidential Information Leakage"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Exposed Private Data"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-136: Unencrypted Private Data On-Chain"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Private Modifier"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Confidentiality Failure"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Visibility/ Exposed Functions or Secrets/ Failure To Use Cryptography"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unencrypted Private Data"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Secrecy Failure"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Secrecy Failure"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Visibility Issues"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Secrecy Failure"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Exposed Secret"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Field Disclosure"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Public Accessibility"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Privacy"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unencrypted Private Data On-Chain"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-391acac1-8493-4ee6-806f-0ae068ae2611",
            "name": "Lack of Data Feeds Privacy (Request)",
            "description": "missing privacy of the Tx sent to a third party to request data feeds ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Lack of Data Feeds Privacy (Request)"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-7fed47ff-8812-4962-a177-63f069c8741e"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-0fc0d2f0-1f6a-49d6-978a-993d5164b1b7",
            "name": "Lack of Proper Signature Verification",
            "description": "for performance reasons, the contract may tolerate off-chain signed messages  instead of waiting for an on-chain signature when the smart contract does not properly verify the signature sender (i.e. relying on  msg.sender to identify the signature creator), allows attackers to execute  unauthorized transactions The EVM features the ecrecover precompile, allowing for native signature validity checks and recovery, but when ecrecover encounters errors and returns an invalid  address a missing validation allows an attacker to submit invalid signatures with arbitrary payloads",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Signature-based Vulnerabilities"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Incorrect Verification of Cryptographic Signature"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-122: Lack Of Proper Signature Verification"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Lack of Signature Verification"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Missing Validation"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Cryptographic Issues"
                }
            ],
            "cwes": [
                "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98"
            ],
            "swcs": [
                "swc-f596a439-7175-4260-ae27-02f6e7a58519"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7fed47ff-8812-4962-a177-63f069c8741e",
            "name": "Lack of Transactional Privacy",
            "description": "Transactions balance details of the users are not kept private (modifier public) or  public financial TXs (i.e. stock trading)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6",
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f",
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Lack of Transactional Privacy"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Unsecured Balance"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Lack of Transactional Privacy"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Lack of Transactional Privacy"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Lack of Transactional Privacy"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Transaction Privacy Leakage"
                }
            ],
            "cwes": [
                "cwe-a9734e31-3393-43af-8c97-3b7c6695a051"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3fb05c3a-9a00-4059-b2c5-577a1dfc5ed9",
            "name": "Loop Fusion Loop Related Pattern",
            "description": "separate loops with independent operations can be combined to reduce the bytecode  size and the numberof operations at the entry points of loops (s.t. conditional jumps  and comparisons)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Loop Fusion Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Loop Fusion Loop Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e9f98d44-96eb-4e70-8ae8-8f3af44f6f3f",
            "name": "Low Level Calls",
            "description": "low level calls over raw addresses don't verify the existence of code (Successful call to non-existent contract) or the call success leading to unexpected behaviour",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549",
                "att-440221a9-e2e1-47fd-bf96-2e3960bf0767"
            ],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Low Level Calls"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Check of Low-level Call Return Value"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unchecked Low level call / send Return Values"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Direct Call To Untrusted Contract"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Non-Verified External Call"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Mishandled / Unhandled Exceptions"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Unchecked Call"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unchecked Low Level Calls"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Mishandled Exception / Exception Disorders"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Low Level Calls"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-104: Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Low Level Calls"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Unchecked Low Level Calls"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Unchecked External Call"
                }
            ],
            "cwes": [
                "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f",
                "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4"
            ],
            "swcs": [
                "swc-5c8788e9-23ca-40f9-9329-3f335e204f6d"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-2892d467-c358-4d75-b6bb-f12b837fda13"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-533fed18-5ee5-4cf0-bdf7-13f641a70e3a",
            "name": "Malicious Libraries",
            "description": "usage of third-party libraries containing malicious code without checking",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Malicious Libraries"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Use of Malicious Libraries"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Improper Data Validation"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "External Contract Referencing"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Malicious Libraries"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Malicious Libraries"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Malicious Libraries"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "External Contract Referencing"
                }
            ],
            "cwes": [
                "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d",
                "cwe-a9734e31-3393-43af-8c97-3b7c6695a051",
                "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-a9cccac9-398e-485e-885f-08bf54c6bca6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4607bf52-e285-44c4-912c-68e6c6996fb1",
            "name": "Map Overlap",
            "description": "If 2 hash maps are used within the contract, sha3 may produce the same hash for  2 different memory locations in each map, creating a collision across maps (i.e. if 2 maps exists, one for the contract admins and one for the registered users, an  attacker can manipulate the position of elements while registering as a regular user in a way s.t. the hash function returns the same hash results for certain addresses  in admins and regular users, bypassing authorization)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Map Overlap"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-cafa4218-783a-465f-b1ed-dc48ad4b2ebe",
            "name": "Mishandled / Unexpected Throw / Revert",
            "description": "Failed external calls throwing exceptions or reverting the Tx causing DoS and lost funds",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Mishandled / Unexpected Throw / Revert"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Denial of Service"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-1ffb6012-1e2d-48d7-bff7-b608a411a4d5"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-1ffb6012-1e2d-48d7-bff7-b608a411a4d5",
            "name": "Mishandled Exception",
            "description": "Unreported exception or error  in the callee (i.e. call doesn't propagate exceptions) ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80"
            ],
            "attacks": [
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549",
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f",
                "att-42123cdc-5fa1-46de-90df-a619da025f29",
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Exception Disorders"
                },
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Use of Exception Handling Functions"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unchecked Low level call / send Return Values"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Exception Handling /Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Exception Disorders"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Mishandled Exception - ME"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Unhandled or Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Exception Disorders"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Exception Disorders"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Mishandled / Unhandled Exceptions"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Mishandled Exception"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Mishandled Exception / Exception Disorders"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Unhandled Exception"
                }
            ],
            "cwes": [
                "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4",
                "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f"
            ],
            "swcs": [],
            "tools": [
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-2892d467-c358-4d75-b6bb-f12b837fda13",
                "vul-e9f98d44-96eb-4e70-8ae8-8f3af44f6f3f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9c63c10b-76f2-4e98-baaa-123d1be6a881",
            "name": "Missed to Implement Fallback",
            "description": "By default call invokes the default fallback function of the target contract to process  the transferred balance, if a malicious contract doesn't implement the fallback  function on purpose any deposit made will not succeed and the sender contract  will not be able to function as instended due to failed transfers (possible DoS)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Missed to Implement Fallback"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7590bdaf-03b2-481b-a762-a86167f02e83",
            "name": "Missing Constant Modifier in Variable Declaration",
            "description": "variables not modified during execution should be declared as constants to  save gas",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Constant Modifier in Variable Declaration"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Constable States"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-503b964c-7004-4e3c-a887-b0a8ff79f23e",
            "name": "Missing Constructor",
            "description": "constract with no constructor function causes the user to initialize state  variables manually",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9150ab62-13aa-452b-9ba1-ef9c6134807a"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Constructor"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-118: Incorrect Constructor Name"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unsecured Balance"
                }
            ],
            "cwes": [
                "cwe-caf2a717-0565-469b-b7f9-bc80f720d1fe"
            ],
            "swcs": [
                "swc-78a9dc1b-2f05-40af-a422-00cdedcee8ba"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-653775f9-409e-4432-aab8-12549d93f359",
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9254324b-3788-4605-992d-c146af26b824",
            "name": "Missing Protection Against Signature Replay Attacks",
            "description": "case in which a malicious client is able to to obtain the hash of a legitimate Tx and is able to use the same signature to impersonate the legitimate client proper generation and authentication of the signed message can be achieved by  including the requisite information (e.g., nonce and contract address) in the message The Nonce must be encoded into the signed payload to allow the owner to sign the same action multiple times, namely to change the final signature when the payload  data remains the same",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [
                "att-f12e7fab-4184-4665-9224-4d45c36fcb3c"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Signature-based Vulnerabilities"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Check Against Signature Replay Attacks"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-121: Missing Protection against Signature Replay Attacks"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Insufficient Signature Information"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Insufficient Signature Information"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Missing Protection Against Signature Replay Attacks"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Missing Protection Against Signature Replay Attacks"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Replay Attack"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Replay Attack"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Missing Protection Against Signature Replay Attacks"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Cryptographic Issues"
                }
            ],
            "cwes": [
                "cwe-0f8aa2b6-f0e7-4cc0-9053-584b7b49ca1d",
                "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98"
            ],
            "swcs": [
                "swc-1cd0d8ac-ef1b-4d9c-8ef9-819b83462d39"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-eb9931f9-55ca-4e6e-9d2b-807f54747d6a",
                "vul-6f2514b8-5945-4d92-94f4-744fa173c3c4"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-92ed2852-2c11-4b40-812e-174ab5ea1fc2",
            "name": "Missing Return Statement",
            "description": "missing return type in the definition of a smart contract interface, may cause the execution of a function with same name and different return value Some functions denote return values but don't return anything. For these, EVM adds a default return value when compiling to bytecode. Since the callers may not know  the source code of the callee contract, they may use the return value to handle code execution and lead to unpredictable bugs",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Return Type on Function"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "ERC20 Interface"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Missing Return Statement"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Missing Return Value"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Missing Return Statement"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f",
                "vul-ed021b01-2263-4422-80ba-ba4a040b1975"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7562ab94-5676-4bf4-8d39-db8b0bea0fe1",
            "name": "Misuse of Address Parameter in the Constructor",
            "description": "An attacker may hide malicious code by passing as parameter an incorrect address  to a smart contract constructor. Addresses should not be taken as parameters in  the constructor function ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9150ab62-13aa-452b-9ba1-ef9c6134807a"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Misuse of Address Parameter in the Constructor"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-99394a06-e0e5-4e53-8ef6-97fed6ace7ce",
            "name": "Misuse of msg.sender()",
            "description": "If a contract invokes another to refund a Tx to a special investor account specified in  the parameters, in this case using msg.sender determines the contract that called  the function to receive the deposit, instead of the right recipient (parameters)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Misuse of msg.sender()"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9de49ed9-45c6-4c1b-85cf-233e993946cb",
            "name": "Nested Array Function Call Decoder",
            "description": "If a smart contract calls a function which returns a multi-dimensional array with a  fixed size, the elements of the returned array are misinterpreted as memory pointers  when accessed, leading to memory corruption (not single-dimension fixed-size arrays)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Nested Array Function Call Decoder"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-a5b26499-f5d5-4de4-88f7-5eca04e84020",
            "name": "Nested Call",
            "description": "Executing call instruction inside an unlimited-length loop The call operation is very expensive, if a loop body contains a call instruction but  doesn't limit the number of iterations is may exceed the gas limit (out-of-gas) (specific case of Gas Costly Loops with the call instruction /transfer which uses call)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248",
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Nested Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Nested Call"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Nested Call"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-104: Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Call In Loop"
                }
            ],
            "cwes": [
                "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f"
            ],
            "swcs": [
                "swc-5c8788e9-23ca-40f9-9329-3f335e204f6d"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666",
                "vul-2892d467-c358-4d75-b6bb-f12b837fda13"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-0dce9375-27b8-48cf-b941-8fa7f017f989",
            "name": "Non-Terminating Contracts - Ethereum, Cardano",
            "description": "The contract should provide a way (interrupter) to eventually terminate its execution (i.e. in case it is compromised) otherwise it becomes a DoS risk   In case a contract contains bugs an interrupter mechanism can contain the losses (usually the selfdestruct function invoked by the owner)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Non-Terminating Contracts - Ethereum, Cardano"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Missing Interrupter"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5be04636-d9ec-4705-9d83-f30effcdb872",
            "name": "Off-By-One",
            "description": "Off-by-one errors are a common mistake made by programmers in which the  intended boundaries are incorrect by only one, though these errors may seem  insignificant, the effect can easily be quite severe (i.e. operations with Array Lengths or Incorrect comparison operators) ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Off-By-One"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b68c8bc5-a303-48e8-ac99-9da44e222f7a",
            "name": "Opaque Predicate - Useless Code Related Pattern",
            "description": "predicate whose outcome is already known before execution",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [
                "att-bdcec890-d2f6-4da0-b7f2-bcf08b2ec20d"
            ],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Opaque Predicate - Useless Code Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Opaque Predicate - Useless Code Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ddc5a75a-4f55-4340-825a-fd83e6ecba41"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-2903481a-1222-4cd9-b5d9-c0b15d072afe",
            "name": "Optimizer Clear State On Code Path Join",
            "description": "The optimizer computes equivalent code using a tree structure: when it has several equivalent code paths that it wants to merge into a single set of instructions, it uses  the edges of the tree to do so but doesn't properly reset back its intended position, leading to data corruption during runtime. An attacker may analyze the code at the instruction level to find specific ways to make the optimizer join intructions ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Optimizer Clear State On Code Path Join"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-129434cd-5443-49c0-b5dc-cb8b66bec5e2",
            "name": "Optimizer Stale Knowledge About SHA-3",
            "description": "The optimizer saves data from previous instructions  to avoid recalculating already  known values. In doing so, it doesn't properly clear data that was used for calculating  the hash for the blocks, resulting in erroneous hashes in certain blocks. This may  cause new contracts trying to join the blockchain to be rejected due to the incorrect  hash calculation",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Optimizer Stale Knowledge About SHA-3"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-6b080ea1-8cb3-4ded-9158-edb3e3934103",
            "name": "Optimizer State Knowledge Not Reset For Jumpdest",
            "description": "The optimizer finds specific code paths that at the bytecode level have the same  results (a \u201cjumpdest\u201d  is simply a reference from one snippet of code to another more  efficient snippet that has the same result). If jumpdests are linked incorrectly (i.e not  clearing the data used for that block) the hash of the block will be different than  expected, leading to contracts either added erroneously or unable to be added to  the blockchain",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Optimizer State Knowledge Not Reset For Jumpdest"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-2d7268b6-24d0-4c98-9613-39ace98f4c41",
            "name": "Outdated Compiler Version",
            "description": "Usage of outdated compiler versions with old compiler bugs can lead to security,  compatibility and performance issues as outdated compiler can have known flaws,  may not work properly with latest smart contract platforms and may not support  latest optimizations or algorithms, resulting in inefficiency of execution or excessive  resource consumption  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-102: Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Outdated Compiler or Solidity Version"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Outdated Compiler Version"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Outdated Compiler Version"
                }
            ],
            "cwes": [
                "cwe-93aebfd2-700b-4689-a47f-1242ae96410f"
            ],
            "swcs": [
                "swc-72c3a708-ecd7-4b59-99eb-f1fb6733cf0e"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9fc190cb-9847-4b1e-b370-7edb70c553a4",
            "name": "Pre-Sent Ether",
            "description": "Generally, all ETH transfers invoke contract\u2019s fallback function and thus can be  detected by the contract. However contract cannot handle Ether sent to its address  prior to the deploy",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Pre-Sent Ether"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Unexpected Ether - Pre-Sent Ether"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4829fecf-ec0f-472b-9dd5-2237727b181f",
            "name": "Price Manipulation By AMM",
            "description": "When have code statements that get or calculate LP token\u2019s value/price based on the market reserves/AMMprice/exchangeRate OR the custom token balanceOf/  totalSupply/amount/liquidity calculation",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4"
            ],
            "attacks": [
                "att-9cd6a6cc-eb5a-43e6-a4e4-6eeba588b31a"
            ],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Price Manipulation By AMM"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "AMM price oracle manipulation"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "On-chain Oracle Manipulation"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Spot Price Manipulation"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Spot Price Manipulation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-36dc9747-3fc9-4219-975b-8c4df579c666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-36d572db-fc6a-4a4e-b846-c7589bd3cfd2",
            "name": "Price Manipulation By Buying Tokens",
            "description": "when buying some tokens using using Uniswap/PancakeSwap APIs",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4"
            ],
            "attacks": [
                "att-9cd6a6cc-eb5a-43e6-a4e4-6eeba588b31a"
            ],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Price Manipulation By Buying Tokens"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Price Oracle Manipulation"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "On-chain Oracle Manipulation"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Spot Price Manipulation"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Spot Price Manipulation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-36dc9747-3fc9-4219-975b-8c4df579c666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b63e0f64-0259-47f1-81f6-085577c0bd4a",
            "name": "Non-AMM price oracle manipulation",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Non-AMM price oracle manipulation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-36dc9747-3fc9-4219-975b-8c4df579c666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-36dc9747-3fc9-4219-975b-8c4df579c666",
            "name": "Price Oracle Manipulation (Machine Unauditable)",
            "description": "price oracles are authorities to which smart contracts resort to determine the price of an asset using certain rules. If the Oracle's API are not used properly an adversary  can influence the price query result returned to the application contract by interacting  with the oracle in a legit way (i.e. easy on-chain manipulation using flash loans)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4"
            ],
            "attacks": [
                "att-9cd6a6cc-eb5a-43e6-a4e4-6eeba588b31a"
            ],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Price Oracle Manipulation (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "On-chain Oracle Manipulation"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Spot Price Manipulation"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Spot Price Manipulation"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-490fdb0f-4aff-4daf-8609-e6beca9a43c7",
            "name": "Private Key Security",
            "description": "if the private key of some account can be stolen/derived by some user the user can  impersonate the account, if the private key is lost the account becomes useless and  the balance is lost",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6",
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Private Key Security"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-22cae367-d361-43ed-b033-b061c7b1366b",
            "name": "Privilege Escalation (Machine Unauditable)",
            "description": "smart contracts Business Logics are represented by sequences of Txs in temporal  order where sensitive operations are guarded by access control checks, which may  be less weak than necessary in some cases leaving the ops unprotected ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Privilege Escalation (Machine Unauditable)"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Inconsistent, Improper or Unprotected Access Control"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Exceeded Authority Access"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unfair Business Models"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7a6a03ab-a674-4902-bb69-05286b433937",
            "name": "Users can update privileged state variables arbitrarily",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Users can update privileged state variables arbitrarily"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-22cae367-d361-43ed-b033-b061c7b1366b"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9e237684-46b7-42a4-a8f3-88d0d45b0f82",
            "name": "Users can invoke some functions at a time they should not be able to do so",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Users can invoke some functions at a time they should not be able to do so"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-22cae367-d361-43ed-b033-b061c7b1366b"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-936315b4-dad8-46e8-b68d-b512c20c21f6",
            "name": "Privileged functions can be called by anyone or at any time",
            "description": "",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Privileged functions can be called by anyone or at any time"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-22cae367-d361-43ed-b033-b061c7b1366b"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-055c2dbe-4a8b-413b-8d4a-0bc4e291cc03",
            "name": "Probabilistic Finality",
            "description": "Ethereum BC can only achieve a probabilistic rather than deterministic and fast assurance of the finalization of a newly generated block: the more deeply sinks in the chain, the less likely will be reverted",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [
                "att-f9da17c9-03ee-406b-9762-8ebbd34d6cbe",
                "att-ea97d736-90ab-4e3d-a2d8-6b1924d371d8",
                "att-571ec819-2fdf-484e-93a8-771064c646b4"
            ],
            "references": [
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Probabilistic Finality"
                },
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Unpredictable State"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Unpredictable State"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-19e8452b-dc4c-401e-a512-cb6356ca83d8",
            "name": "Public Lib Functions Do Not Return Nested Arrays",
            "description": "When a contract makes a call to a public library function stored within Solidity that  returns a nested array, the data being returned is lost and replaced with all zeroes,  allowing the resulting code to be executable (or causing logical errors)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Public Lib Functions Do Not Return Nested Arrays"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-f0aa801f-5530-4144-9f4c-37bb6c6fa561",
            "name": "Redundant Fallback Function",
            "description": "redundant functionality implemented increases the code size and hampers  maintainability, i.e. before Solidity 0.4.0 unexpected payments should be rejected  manually, now contracts without a fallback functions automatically do it, making  the code redundant ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Redundant Fallback Function"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Redundant Functionality"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Redundant Fallback Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d9ecaa37-3017-4619-80bf-324afc7d1438",
            "name": "Reentrancy",
            "description": "- A single function reentrancy attack occurs when a vulnerable function is the same  function that an attacker is trying to recursively call -an external call within the function triggers the function again, initiating the  half-completed execution multiple times, leading to a cascade of state changes. not reentrant functions which can misbehave if re-entered (called back ) before their termination (using the fallback function) causing i.e. loops  until out-of gas or stack-size reached. It follows from incorrect management of the  global state of an externally invokable function, which manages to re-enter the  caller function in an inconsistent state",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f"
            ],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Unsafe Credit Transfer"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-107: Reentrancy"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Re-entrancy"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Reentrancy - RE"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Re-entrancy"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Single-Function Reentrancy"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Single-Function Reentrancy"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "DAO"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Reentrancy"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Re-entrancy"
                }
            ],
            "cwes": [
                "cwe-7d812309-7085-43db-a6c6-832d09ea7670",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-7908771d-afbc-425f-9df7-a2a17a0e4df2"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695",
                "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-ba4d57ec-0c14-4d04-b0db-3547bea306ce",
                "too-422d6eee-7f77-42ab-a45a-d208500c1dee",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4ab30af9-fc69-4272-9788-f649490735c3"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5a587070-1e19-4133-90be-a14c2a5fb574",
            "name": "Reentrancy Create-Based",
            "description": "The victim creates a new contract which issues an untrusted external call inside its constructor",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "Reentrancy Create-Based"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e32eda40-c9d4-408d-b2d5-93fa71797697",
            "name": "Reentrancy Cross-Contract",
            "description": "cross-function reentrancy is not strictly confined to shared state and functions  within a single contract, i.e. if the balances mapping was set to public or was directly /indirectly exposed through a view function and another contract relied on  that state, the exploit could success (dangerous in highly modularized SC systems  with complex business logic rules)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Reentrancy Cross-Contract"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Reentrancy Cross-Contract"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-fe7e2d47-7980-4b92-9d7c-fecf1fcf920d"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-fe7e2d47-7980-4b92-9d7c-fecf1fcf920d",
            "name": "Reentrancy Cross-Function",
            "description": "- Cross-function reentrancy occurs when a vulnerable function shares state with a  function that an attacker can exploit -spans over multiple functions of the victim contract -arising when multiple functions share the same state: a function can be re-entered  by invoking another function which calls the function across invocations of functions  operating upon the same global state (Cross-function Race Condition) spawning upon multiple functions, a function in the victim issues an untrusted  external call which transfer the control to a malicious contract, which re-enters the first contract with a different function ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Reentrancy - RE"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Reentrancy Cross-Function"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Reentrancy Cross-Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-14e805c2-c7c3-4d6d-8d38-085e1c735c80",
            "name": "Reentrancy Delegate-Based",
            "description": "The victim delegates the control to a malicious contract which issues an untrusted external call ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "Reentrancy Delegate-Based"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-a695e2e8-61ef-43a3-b289-ca42ae6e5547",
            "name": "Reentrancy Read-Only",
            "description": "-Read-only reentrancy is a novel attack vector in which instead of reentering into  the same contract in which state changes have yet to be made, an attacker  reenters into another contract which reads from the state of the original contract -a specific instance of cross-contract reentrancy, arising when a contract's behavior  depends on the state of another contract. Views may yield outdated state  information in the context of a reentrancy across contracts, which usually targets  state-changing functions > possible exploitation of third-party infrastructure",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Reentrancy Read-Only"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Reentrancy Read-Only"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Reentrancy Read-Only"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-e32eda40-c9d4-408d-b2d5-93fa71797697"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-395e3172-17e1-470f-b108-5b16e77c3549",
            "name": "References to Destroyed Contracts",
            "description": "function destroy involved in a Tx of the WalletLibrary contract removes any contract  that was selfdestructed during the Tx. Not invocking this instruction may determine  to keep references to destroyed contracts  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "References to Destroyed Contracts"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-054be538-9c34-4a44-b537-de695e6ed513"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-17597ff7-22fc-44a1-b2c9-267dfc1c5830",
            "name": "Repeated Computations In a Loop - Loop Related Pattern",
            "description": "when some expressions produce the same outcome in each loop iteration, the gas  should be saved by computing the outcome expression once out of the loop and  reusing the value within the loop, expecially for  expressions involving expensive operands (i.e. storage vars which should be loaded into the stack with SLOAD) ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [
                "att-d149619c-b3b1-44d4-9094-74b6af7c1c18"
            ],
            "references": [
                {
                    "ref_id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
                    "alias": "Repeated Computations In a Loop - Loop Related Pattern"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Repeated Computations In a Loop - Loop Related Pattern"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ad2a85a3-bc8a-46e5-a4da-e23118e1a666"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e946deff-7233-4b63-bac9-6190d16ed218",
            "name": "Requirement Violation",
            "description": "the functional conditions (require()) of the contracts are too strong and do not allow certain behaviours making the contract unable to meet certain requirements (improper imput validation conditions) Violations of a requirement can indicate one of two possible issues: 1) A bug exists in the contract that provided the external input. 2) The condition used to express the requirement is too strong.",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Extraneous Input Validation"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-123: Requirement Violation"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Strict require"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Requirement Violation"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Requirement Violation"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Requirement Violation"
                }
            ],
            "cwes": [
                "cwe-f64336c4-4bc6-4389-9ea5-c8d24be964a2",
                "cwe-76f0425a-9804-403d-b72a-880a305546ef"
            ],
            "swcs": [
                "swc-6b2ab2e2-e82f-4252-bb5c-760dfc6897d9"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ae0c5775-91fc-40bb-9a58-7ad1b8093c4a"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-ef81612f-16f5-4016-a5bb-c37e24112336",
            "name": "Right-To-Left Override",
            "description": "presence of the right-to-left override control character (U+202E) within a function call  that may cause the function to execute with arguments in reverse order  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Right to Left Override"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Function Call with Wrong Arguments"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-130: Right-To-Left-Override control character - U+202E"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Malicious Code"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Right-To-Left Override"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Right Left Override"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Right to Left Override"
                }
            ],
            "cwes": [
                "cwe-a50912f8-e612-4c46-b6df-f2c68c05c3e9",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-8b80b443-421a-4f0b-8378-83e3cfe6a5a5"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7146da69-501d-4d57-b77f-db2c591fcd32",
            "name": "Risky First Deposit",
            "description": "when doing deposit/mint/add the liquidity pool/amount/share and set the total share  to the number of first deposit when the supply/liquidity is 0 See Liquidity Borrow, Purchase, Mint, Deposit",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Risky First Deposit"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-41d48efc-2b16-4bab-853c-d28f3d129dba",
            "name": "Send Instead of Transfer",
            "description": "in case of failure transfer aborts with an exception while send returns false  and continues the Tx execution, which enables continuing to execute a credit  transfer operation without proper authorization",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Send Instead of Transfer"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Failed Send"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unchecked Low level call / send Return Values"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Send Instead of Transfer"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Use of Send Instead of Transfer"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Use of Send Instead of Transfer"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-e9f98d44-96eb-4e70-8ae8-8f3af44f6f3f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-229719f9-70c1-4eda-997c-aa30b2c3080f",
            "name": "Short Address",
            "description": "EVM pads with zeroes addresses shorter than the required length, which are more vulnerable if appropriate sanity checks are not made (i.e. if a short address  given as input the EVM may take the missing digits from the next parameter (Ether amount ) to complete the address and then fill the end of the string with 0, shifting  the ether amount to the left by one byte. In this case a transfer will send more than  the ether that should be forwarded)",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Short Address / Parameter Issue"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Input Validation"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Address Shortening"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Short Address"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Short Address Attack"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Short Address / Parameter Attack"
                }
            ],
            "cwes": [
                "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d",
                "cwe-f451d548-645d-4056-9691-1c2e5e907476"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-5bbf5118-489b-4126-852f-bc57cab0d5d5"
            ]
        },
        {
            "id": "vul-709c841b-9502-408c-bdaf-f3add39e0fe0",
            "name": "Signature Collisions - Function",
            "description": "different functions may have the same signature",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Signature Collisions - Function"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e3ab24df-cb6b-4ba8-a77e-29fdbb9243bd",
            "name": "Signature Malleability",
            "description": "In Ethereum, an ECDSA signature is represented by two 32-byte sized r and s  values and a one-byte recovery value v; the symmetric structure of elliptic curves  implies that no signature is unique. \"malleable\" signatures can be altered without  being invalidated (another distinct set {r', s', v'} results in an equivalent signature) wrong verification of the authenticity and integrity of messages with the use of signatures allows attackers to modify the signature of a transaction without invalidating it,  which can be used to perform a replay attack or modify the transaction\u2019s data ",
            "sample_code": "",
            "level": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [
                "att-2b378844-3f5f-487c-9698-cd619598d029"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Signature-based Vulnerabilities"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Authenticity Check"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Signature Malleability"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-117: Signature Malleability"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Signature Malleability"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Signature Malleability"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Cryptographic Issues"
                }
            ],
            "cwes": [
                "cwe-0f8aa2b6-f0e7-4cc0-9053-584b7b49ca1d",
                "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98"
            ],
            "swcs": [
                "swc-6c2af0d3-040c-42f4-b5d0-1b67d36ed8a8"
            ],
            "tools": [
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d1804347-9706-4b1f-8fc5-29c8d1247651",
            "name": "Signature with Wrong Parameter",
            "description": "Depending on the information in the signature payload, an attacker can frontrun  the original Tx, manipulate specific parameters and exploit the system, as it can  arbitrarily set the value of missing parameters (usually for some ECDSA signatures in certain systems where a reward is paid out for third parties executing a payload)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Signature-based Vulnerabilities"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Signature Frontrunning"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Cryptographic Issues"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e26512f8-072c-4bee-b614-3b7cbec51ca8",
            "name": "Signedness Bugs",
            "description": "the conversion of a signed integer type to an unsigned type of the same width  may change a negative value to a positive one",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Integer Division"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-101: Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Integer Bug - IB"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unsafe Type Conversion"
                }
            ],
            "cwes": [
                "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
            ],
            "swcs": [
                "swc-299fbb87-9336-4f86-85ee-75b6bc3a3b3d"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-5d2347d1-3d35-4122-9d21-02a83a31cc36"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-e261408f-42e5-40d5-bab3-4dc82a098b95",
            "name": "Skip Empty String Literal",
            "description": "If an empty string literal is passed as parameter in a function call it is skipped by the encoder when compiled, this causes the following function parameters to be passed  to the function being called to be shifted to the left in memory by 32 bytes, causing  incorrect data encoding and corrupted calldata",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Skip Empty String Literal"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-95609e15-01da-486f-94f3-37b716c80565",
            "name": "State Variables Default Visibility",
            "description": "wrong visibility of state variables (default = internal) may lead to exposure of  sensitive data or allow unexpected behaviour",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Visibility Modifier in Variable Declaration"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-108: State Variable Default Visibility"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Visibility Level"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "State Variables Default Visibility"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Default Visibility"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Function / State Visibility Errors"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Function Default Visibility"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Visibility Issues"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unspecified Visibility Level"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Privacy"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Default Visibility"
                }
            ],
            "cwes": [
                "cwe-b71fe313-5245-4af1-bf01-4c97867682cd"
            ],
            "swcs": [
                "swc-ae95f408-d373-4d2f-9ec3-df55e05989ca"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d7cacfbf-0f45-4c7b-a953-a494c4bc46a0",
            "name": "Strict assert",
            "description": "unlike require(), assert() throws an invalid opcode exception if the condition is unmet,  which permanently stops and invalidates the contract (should be used only to check  whether the state of a contract is normal)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Strict assert"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Using Built-in Functions"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-cf0ce1a6-0ebc-4dea-8eca-6194c022c87d"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-3359646d-6a43-4974-98b7-5411c090b488",
            "name": "Strict require",
            "description": "if the require condition is unmet throws an exception and reverts the Tx, if too strict may cause the Sc's legal input to rollback",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Strict require"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-e946deff-7233-4b63-bac9-6190d16ed218"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-45b44a1e-8e7f-49be-8f09-15ead4d45da0",
            "name": "Tainted Selfdestruct",
            "description": "The receiver address used in the selfdestruct call should not be updated with  user-provided addresses",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Tainted Selfdestruct"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unrestricted Action"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-054be538-9c34-4a44-b537-de695e6ed513"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-0daa5776-59e6-4aa7-b1b5-13f6aea05de9",
            "name": "Timestamp Dependency",
            "description": "Time constraints / triggered condition to execute the Tx are implemented  using the block timestamp, which can be manipulated by miners",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-cbe33fa7-6285-4f55-88e0-390212e84119"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4",
                "att-65994c6f-25e5-436d-990a-d50f814b66fa"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Time constraints"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Incorrect Use of Event Blockchain Variables for Time"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Block State Dependence"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-116: Block Values as a Proxy for Time"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Block Timestamp Dependency"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Time Manipulation"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Time constraints"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Block-state Dependency - BD"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Block Info Dependency"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Dependence on the Timestamp"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Timestamp Dependency"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Timestamp dependence"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Time Manipulation"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Timestamp"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Timestamp Manipulation"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Timestamp Manipulation"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Block Timestamp Manipulation"
                }
            ],
            "cwes": [
                "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538",
                "cwe-a9734e31-3393-43af-8c97-3b7c6695a051"
            ],
            "swcs": [
                "swc-9dace717-c658-4ceb-86f0-1eea5df436d4"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
                "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-422d6eee-7f77-42ab-a45a-d208500c1dee"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-eb9931f9-55ca-4e6e-9d2b-807f54747d6a",
            "name": "Token API Violation",
            "description": "tokens = transferable units of value managed by a contract Token contracts should meet appropriate token standards like ERC20 and ERC721, the implementation of arbitrary extra actions inside ERC20 functions which return a bool indicating if the operation succeeds  (like i.e. guards with require and  assert or throw and revert, throwing exceptions) may cause incompatibilities",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Token API Violation"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Extraneous Exception Handling"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Token API Violation"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Token Standard Incompatibility"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unmatched ERC-20 Standard"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Token Standard Violation"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Token API Violation"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Inhaderence to Standards"
                }
            ],
            "cwes": [
                "cwe-c2da8d60-ecb5-486a-856c-ce03f19c0578"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-30fd07cb-17fe-4a27-aa19-80a7c4999cf6",
            "name": "Too Many Digits",
            "description": "programmers should use the native language resources to represent large quantities (i.e. literals with many digits)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Inadequate Data Representation"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Too Many Digits"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f",
            "name": "Transaction Ordering Dependency (TOD)",
            "description": "dependant Txs invoked on the same contract not executed in proper  order rendering the original Tx irrelevant within the SC context relegating it to a lower  position in the block by amplifying the gas price to exceed the original Tx value,  often by ten times or more (The user's function may be orphaned, executed without   significant effect, or reverted due to running on an outdated state) ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [
                "att-6fcdb7f5-b97c-470b-8a13-ce8becf81767",
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Incorrect Function Call Order"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-114: Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Transaction Order Dependency"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Front Running"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Transaction Ordering Dependence / Front Running"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Transaction Ordering Dependence / Front Running"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Transaction Order Dependency"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Transaction Ordering Dependence / Front Running"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Transaction Ordering Dependence / Front Running"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Transaction Order Dependency"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Transaction Order Dependency"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Transaction Ordering Dependency (TOD)"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Displacement"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Front Running"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Front Running / Transaction Reordering"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Transaction Ordering Dependence / Front Running"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Race Conditions / Frontrunning"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Race Condition"
                }
            ],
            "cwes": [
                "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-937acc93-347b-4870-bbfd-4d4644206c92"
            ],
            "tools": [
                "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
                "too-422d6eee-7f77-42ab-a45a-d208500c1dee",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4296223a-dc69-4573-9b12-bbfe24f677dc",
            "name": "Transaction Ordering Dependency Amount (TOD Amount)",
            "description": "case where the value of the variable that stores or determines an amount of a digital asset (to be transferred) is modified before it is sent to the recipient  due to transaction ordering within a block  (the amount of ether transferred depends on the transaction ordering)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Amount"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Transfer Amount Dependent on Transaction Order"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-114: Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "TOD"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Transaction Ordering Dependence"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Transaction Ordering Dependence"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Transaction Ordering Dependency Amount (TOD Amount)"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Amount"
                }
            ],
            "cwes": [
                "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-937acc93-347b-4870-bbfd-4d4644206c92"
            ],
            "tools": [
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-c1088970-47d9-42a7-8b34-eeaa35daf9c3",
            "name": "Transaction Ordering Dependency Receiver (TOD Receiver)",
            "description": "the transfer recipient address is modified before the send event due to Txs ordering within a block (no sender check in the function code) (the recipient of the transfer may change depending on the transaction ordering)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Receiver"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Transfer Recipient Dependent on Transaction Order"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-114: Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Transaction Ordering Dependence"
                },
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "TOD"
                },
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Front Running"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Transaction Ordering Dependency Receiver (TOD Receiver)"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Receiver"
                }
            ],
            "cwes": [
                "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-937acc93-347b-4870-bbfd-4d4644206c92"
            ],
            "tools": [
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-de7b4438-9ca2-4d8e-8801-61426f314e23",
            "name": "Transaction Ordering Dependency Transfer (TOD Transfer)",
            "description": "the order in which Txs are executed influence a precondition that guards the  execution of the transfer, causing i.e. a Tx not being executed at all (the execution of the ether transfer depends on transaction ordering)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Transfer"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Transfer Pre-Condition Dependent on Transaction Order"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-114: Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
                    "alias": "TOD"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Transaction Order Dependence"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Transaction Ordering Dependency Transfer (TOD Transfer)"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "TOD Transfer"
                }
            ],
            "cwes": [
                "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019",
                "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
            ],
            "swcs": [
                "swc-937acc93-347b-4870-bbfd-4d4644206c92"
            ],
            "tools": [
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-c6c95867-d0ac-475a-a0bf-32d2d31b4f2f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-07ba8886-5c54-4196-9dd2-d2bb55d2eeb2",
            "name": "Transfer Forwards All Gas",
            "description": "addr.call.value(x)() trasfers x ETHER and forwards all gas to addr, in order to  transfer ether addr.transfer(x) should be used instead, which provides an allowance  of 2300 units of gas to the recipient ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Transfer Forwards All Gas"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Gas-related Issue - GI"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Transfer of All The Gas"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Transfer of All The Gas"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-09aa5796-d7d7-425f-83bd-2abda6ac50c6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-0fe60097-cbd5-4bb1-8ba2-539440e2d786",
            "name": "Truncation Bugs",
            "description": "variable of a certain type converted to a smaller type with consequent data  loss during the conversion",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Truncation Bugs"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-101: Integer Overflow and Underflow"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unsafe Type Conversion"
                }
            ],
            "cwes": [
                "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
            ],
            "swcs": [
                "swc-299fbb87-9336-4f86-85ee-75b6bc3a3b3d"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-5d2347d1-3d35-4122-9d21-02a83a31cc36"
            ],
            "enabling_vulnerabilities": [
                "vul-b257bf48-1abf-4be5-b432-4c324849cdf4"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b794129a-c982-4b99-b854-52e6c2329ba2",
            "name": "Tx.origin usage",
            "description": "global var Tx.origin  returns the address of the original transaction  initiator (first account in a call chain, not the actual caller) that shouldn't be  spoofed / used for authentication/authorization",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-1d863634-da89-4bf9-8940-c23e8e58a793"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Tx.origin usage"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Authorization via Tx.origin"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-115: Authorization through tx.origin"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Use of ORIGIN"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Using Tx.origin"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Caller Identification"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Tx Origin"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Transaction State Dependence"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Tx.origin"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Misuse Of ORIGIN"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Tx.origin"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Use of tx.origin"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Authentication Through tx.origin"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Tx.origin usage"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Transaction Origin Use"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Transaction Origin Use"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Authentication Through tx.origin"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Transaction State Dependency"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Transaction State Dependency"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Use of ORIGIN"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Authentication Through tx.origin"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Authorization throught tx.origin"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Use of tx.origin"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Authorization throught tx.origin"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Misuse of tx.origin"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Tx Origin"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Authorization with tx.origin"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Authorization throught tx.origin"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Tx.origin Authentication"
                }
            ],
            "cwes": [
                "cwe-f0275cc6-8de4-48c9-b1ec-ef1a1e63f1cb",
                "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
            ],
            "swcs": [
                "swc-20b54258-9726-43be-8f0f-38e0fc6e47a2"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b257bf48-1abf-4be5-b432-4c324849cdf4",
            "name": "Type Casts",
            "description": "insufficient compiler checks in case of type casts (i.e. correct addresses, correct interfaces, type checks) leading to the execution of unexpected  functions (i.e. with the same signature but different address) and  unreported exceptions in case of errors. calle's interfaces must be casted to the  callee address during the call",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4",
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Function Call"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unchecked Request"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Type Casts"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Incorrect Interface"
                }
            ],
            "cwes": [
                "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98",
                "cwe-7d75895f-6dc2-4db7-9028-f9a80f4de15f"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001"
            ]
        },
        {
            "id": "vul-a0993903-e071-4a94-b809-34e3a5d53d22",
            "name": "Typographical Error",
            "description": "single digit errors of the programmers in source code, i.e. in logic or arithmetic operations, misspelling variable names or using the wrong type or order of operators  (i.e. =+ instead of +=)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-129: Typographical Error"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Typographical Error"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Infinite Loops"
                }
            ],
            "cwes": [
                "cwe-cc6b94e2-cad1-4e05-af1c-b2af0a30d26b"
            ],
            "swcs": [
                "swc-229f84d6-0bfd-441f-aa9b-e00cd9c01e84"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-2892d467-c358-4d75-b6bb-f12b837fda13",
            "name": "Unchecked External Call",
            "description": "Unchecked return values of external calls (functions not raising exceptions  i. e. call / callcode / delegatecall/ send should be inside 'if' statements)  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4",
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549",
                "att-440221a9-e2e1-47fd-bf96-2e3960bf0767"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unchecked Low level call / send Return Values"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Improper Check of External Call Return Value"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unused Return"
                },
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-104: Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Unchecked Call"
                },
                {
                    "ref_id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
                    "alias": "Unchecked Low Level Calls"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Direct Call To Untrusted Contract"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Non-Verified External Call"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Mishandled / Unhandled Exceptions"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Unchecked Call"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unchecked Low Level Calls"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Mishandled Exception / Exception Disorders"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unused Return"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Unchecked Low Level Calls"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Unchecked External Call"
                }
            ],
            "cwes": [
                "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f",
                "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4"
            ],
            "swcs": [
                "swc-5c8788e9-23ca-40f9-9329-3f335e204f6d"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-422d6eee-7f77-42ab-a45a-d208500c1dee"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-afd66c25-305a-4009-b684-20c1f22d32ee",
            "name": "Unchecked Send",
            "description": "missing verification of the recipient's balance after a trasfer event a send  call may fail if the computation exceeds the gas limit of 2300, if the error is not properly handled and global state updates are allowed  even after the failed  send, this leads to loss of ETHER",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4",
                "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549",
                "att-440221a9-e2e1-47fd-bf96-2e3960bf0767"
            ],
            "references": [
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Check On Transfer Credit"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unchecked Low level call / send Return Values"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Unchecked-Send Bug"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
                    "alias": "Mishandled Exceptions"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Non-Verified External Call"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Unchecked Send"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Mishandled / Unhandled Exceptions"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Unchecked Call"
                },
                {
                    "ref_id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
                    "alias": "Unchecked External Call"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Mishandled Exception / Exception Disorders"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Unhandled Exception"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-104: Unchecked Call Return Value"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Unchecked Return Values for Low Level Calls"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unused Return"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Unchecked Low Level Call"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Unchecked CALL Return Value"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Unchecked External Call"
                }
            ],
            "cwes": [
                "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f",
                "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4"
            ],
            "swcs": [
                "swc-5c8788e9-23ca-40f9-9329-3f335e204f6d"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-e9f98d44-96eb-4e70-8ae8-8f3af44f6f3f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-25082b92-d7c6-433a-854e-425dcecb8b64",
            "name": "Under-Priced Opcode",
            "description": "Contracts containing many underprized opcodes may consume a large  amount of computing resources at a low gas cost, leading to DoS",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8",
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [
                "att-a8724dd7-11a8-4c32-ad09-7057224f4386",
                "att-ffa722da-61bd-44e5-b87f-50e30ce61518"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Under-Priced Opcode"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Under-Priced Opcode"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Under-Priced Opcode"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Under-priced Operations"
                }
            ],
            "cwes": [
                "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
            ],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-1f7f10fb-2858-4208-b18a-476645302a32",
            "name": "Underlying Cryptosystem Vulnerabilities",
            "description": "Blockchain wallets usually work with public -private key pairs for signature and are as secure as the underlying cryptosystem they use (use libraries like mbedTLS   that implement the required cryptosystem with side-channel attack protections to  reduce the attack surface)",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67",
                "cat-8cb6920b-b982-453f-b01e-29b48130a657"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Underlying Cryptosystem Vulnerabilities"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-68ac0526-0e38-442a-92e9-6e1e821abee6",
            "name": "Uninitialized State / Local Variable",
            "description": "lack of variables initialization of variables used throughout the contract, if not  initialized are automatically assigned with default values (undefined values) and will  point to unknown storage contents",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Uninitialized State Variable"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Variable Initialization"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Uninitialized Variable - UV"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Uninitialized State Variable"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Misleading Data Location"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Misleading Data Location"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Uninitialized Variables"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-109: Uninitialized Storage Pointer"
                }
            ],
            "cwes": [
                "cwe-3b343980-56e9-42ec-8386-3041cb9083d6"
            ],
            "swcs": [
                "swc-ea974d7a-46ee-4434-8fa9-ce43f064bae9"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4f59a5ce-551a-42eb-bd76-1720d8ed45c9",
            "name": "Uninitialized Storage Pointer",
            "description": "all state variables in a contract should be initialized to be assigned to the  correct storage slots, missing initialization determines automatic assignment  that may cause address conflict (slot 0 in storage by default, possibly overwriting a  state variable) accessing unallocated storage can occur if an uninitialized storage pointer points to  unallocated storage",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6"
            ],
            "attacks": [
                "att-47c2e303-ed18-457f-bbb5-e998023a75c9",
                "att-d325c368-8b05-4510-88dd-d87e82f85ad8"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Uninitialized Storage Variables"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-109: Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Uninitialized Variable - UV"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Misleading Data Location"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Uninitialized Storage"
                },
                {
                    "ref_id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
                    "alias": "Misleading Data Location"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
                    "alias": "Uninitialized Storage Variables"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Uninitialized Storage"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Uninitialized Storage Pointer"
                }
            ],
            "cwes": [
                "cwe-3b343980-56e9-42ec-8386-3041cb9083d6"
            ],
            "swcs": [
                "swc-ea974d7a-46ee-4434-8fa9-ce43f064bae9"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-68ac0526-0e38-442a-92e9-6e1e821abee6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-af1b1f09-a467-4f3d-8f3b-c2cf4b7afecf",
            "name": "Unlimited Approvals",
            "description": "approvals are a component of tokens on Ethereum which  allow users to grant  permission to third-party addresses to move funds on their behalf (after a trade is  completed or if specific business logic conditions are met) A prevalent misstep among smart contract developers is requiring unlimited  approvals for certain assets. This is usually justified by the system\u2019s lack of  knowledge of the necessary amount at a given time. This implies the following  problem: Once granted, approvals can be invoked anytime. If a malicious party  were to compromise the smart contract system, they could exploit these approvals,  leading to a complete drain of all previously approved assets for the affected  address.",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Unlimited Approvals"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-eb9efdd8-19af-4c4b-abb8-236bcc81eb10",
            "name": "Unpredictable State (Dynamic Libraries)",
            "description": "Unexpected /unforeseen contract state/  behaviour when calling components or  libraries (that can be updated at a later stage??), no predictability over the order of transaction ",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [
                "att-3e682820-3bba-49d0-862d-851c7c6bb4e4"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unpredictable State (Dynamic Libraries)"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Unpredictable State"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Unpredictable State (Dynamic Libraries)"
                },
                {
                    "ref_id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
                    "alias": "Unpredictable State"
                },
                {
                    "ref_id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
                    "alias": "Unpredictable State"
                },
                {
                    "ref_id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
                    "alias": "Unpredictable State"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4a0e7da1-2673-43ed-9aa3-99e161562a3c"
            ],
            "enabling_vulnerabilities": [
                "vul-533fed18-5ee5-4cf0-bdf7-13f641a70e3a"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-052e1a82-2f09-4244-bf01-9d22154c988c",
            "name": "Unprotected Ether Withdrawal (Unauthorized Transfer)",
            "description": "Unwanted ether withdrawn due to improper access control before transferring funds or improper constructor function which allow to re-initialize the contract -Ether transfers cannot be invocked by arbitrary users  independent from the sender,  callers which are not owners or investors or legitimate payee of a contract (i.e. the call function without user restriction is vulnerable) -involve transfering token from an address different from message sender and there  is no check of allowance/approval from the address owner",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71",
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unauthorized Ether Withdrawal"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Unprotected Transfer Value"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-105: Unprotected Ether Withdrawal"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "No Restricted Transfer"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Leaking Ether To Arbitrary Address"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Ether Leak - EL"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Inconsistent, Improper or Unprotected Access Control"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Ether /Token Leaking"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Leaking Ether To Arbitrary Address"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Unprotected Ether Withdrawal (Unauthorized Transfer)"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Leaking Ether / Unprotected Ether Withdrawal"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Leaking Ether To Arbitrary Address"
                },
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Unauthorized Transfer"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "No Restricted Transfer"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Access Control"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unrestricted Ether Flow"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Generous Contracts"
                }
            ],
            "cwes": [
                "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
            ],
            "swcs": [
                "swc-004ea315-b3a3-483a-a0cb-303d62e8270c"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-be7a3b74-2d64-4b26-ac18-4541f0a33b4e",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-3e4b8086-74cc-4de5-a4d2-2f030f053695",
                "too-fba79187-6e92-4191-85c4-80bfd20a1fb7",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-c62699da-8b2f-4813-b011-072625f91e66",
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-054be538-9c34-4a44-b537-de695e6ed513",
            "name": "Unprotected SelfDestruct",
            "description": "lack of secure verification for terminating a deployed contract, allowing to  transfer ether to a predefined address and deleting the contract permanently  in an unauthorized manner  Self-destruct function should be aware of the executor and should allow the kill  method invoked by legitimate users only SUICIDAL CONTRACT= contract that can be killed by an arbitrary address",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0",
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Destroyable Contract"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-106: Unprotected SELFDESTRUCT Instruction"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Verification for Program Termination"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Absence Of Logic"
                },
                {
                    "ref_id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
                    "alias": "Selfdestruct"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Destroyable /Suicidal Contract"
                },
                {
                    "ref_id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
                    "alias": "Selfdestruct"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Unprotected Suicide"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Suicidal Contract"
                },
                {
                    "ref_id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
                    "alias": "Unprotected Selfdestruct Instruction"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Other Inconsistent, Improper or Unprotected Access Control"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Transaction State Dependency"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unsafe SelfDestruct"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Unprotected Suicide"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unprotected / Accessible Selfdestruct"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Unprotected Suicide"
                },
                {
                    "ref_id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
                    "alias": "Unrestricted Action"
                },
                {
                    "ref_id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
                    "alias": "Unprotected SelfDestruct"
                },
                {
                    "ref_id": "ref-3e64d94e-d822-4ba3-a935-14e534f8d629",
                    "alias": "Suicidal Contract"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Access Control"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unrestricted Selfdestruct"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Suicidal Contract"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Forced Ether Reception"
                }
            ],
            "cwes": [
                "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
            ],
            "swcs": [
                "swc-c82c4650-a9fc-4fff-b3b5-f790bd7cb249"
            ],
            "tools": [
                "too-c599653a-1124-4465-b497-0def6ef119b5",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-c62699da-8b2f-4813-b011-072625f91e66",
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
                "too-28a775eb-eaf3-4655-8765-14eb468815de"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-3b4bffcf-8960-4cda-b584-b405198be3a0"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-44d54019-5379-46f1-8c03-0eccab4f67f1",
            "name": "Unsafe Type Inference (Variables)",
            "description": "if a variable is declared without a type the compiler infers the type basing on the  assigned value, leading to higher gas costs and memory usage or overflow errors  and unlimited loop in case of failed comparison of integers of different sizes in a  loop's termination condition (in case of undeclared integer variables )  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
                    "alias": "Unsafe Type Inference (Variables)"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Missing Type In Variable Declaration"
                },
                {
                    "ref_id": "ref-40b2f693-4497-45a2-9911-39f751fd061f",
                    "alias": "Integer Overflows"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Integer Overflow/Underflow"
                },
                {
                    "ref_id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
                    "alias": "Unsecure Inference"
                },
                {
                    "ref_id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
                    "alias": "Unsafe Type Declaration"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-2c5e98e1-46e5-4fbc-9626-eaafb0312001"
            ],
            "enabling_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7c53f2e7-bad2-4100-b015-8ec8030cb3a1",
            "name": "Unsecured Balance",
            "description": "control-flow decision relies on the value of this.balance or address(this).balance,  leveraged by an attacker to make itself the only one who can obtain the money exposed balance caused by improper access control for balance variable and  constructor functions or updating balance after call instruction to send money to  another contract ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0",
                "cat-9150ab62-13aa-452b-9ba1-ef9c6134807a"
            ],
            "attacks": [
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71",
                "att-c8932526-df5d-41b7-a2fe-d0d5372f198f",
                "att-4f9b1b3a-2afc-488c-ba13-145449304023"
            ],
            "references": [
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "Unsecured Balance"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Manipulated Balance"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-132: Unexpected Ether balance"
                },
                {
                    "ref_id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
                    "alias": "Unexpected Ether Balance"
                },
                {
                    "ref_id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
                    "alias": "Unsecured Balance"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Manipulated Balance"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Incorrect Equality"
                }
            ],
            "cwes": [
                "cwe-61e91e04-4cc9-423a-a8e7-9d5c66ce877a"
            ],
            "swcs": [
                "swc-05f574a5-33c4-4ca0-8de5-e6582b768245"
            ],
            "tools": [
                "too-610adb11-13de-434f-bba3-9a99ad2a3f93"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-7fed47ff-8812-4962-a177-63f069c8741e",
                "vul-503b964c-7004-4e3c-a887-b0a8ff79f23e"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-fbc655e5-1449-4dbc-ab01-42fe7ab0a2d8",
            "name": "Untrustworthy Data Feeds (Off-chain / Oracles)",
            "description": "intentionally wrong data sent to contracts from outside the blockchain to make some  SC operation fail a data feed transporting off-chain information into a smart contract requires traditional  software to run; software providing oracle services must be hardened and adhere to  security best practices such as the OWASP Secure Coding Practices",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4"
            ],
            "attacks": [
                "att-28bfb383-6496-49cd-9dc0-f5ccae9f5851"
            ],
            "references": [
                {
                    "ref_id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
                    "alias": "Untrustworthy Data Feeds (Off-chain / Oracles)"
                },
                {
                    "ref_id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
                    "alias": "Untrustworthy Data Feeds - Oracles"
                },
                {
                    "ref_id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
                    "alias": "Lack of Trustworthy Data Feeds - Oracles"
                },
                {
                    "ref_id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
                    "alias": "Melfunctioning Off-chain Infrastructure"
                },
                {
                    "ref_id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
                    "alias": "Melfunctioning Off-chain Infrastructure"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Vulnerable Off-Chain Server"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Dependency On External State Data"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-7920e929-bba4-4677-8d53-477fad1c87f0",
            "name": "Unused Variable",
            "description": "declaration of variables not used, resulting in unnecessary memory allocation,  less readability and increased gas cost  This consumes extra storage space and time, leading to higher costs and longer  deployment and Txs execution times, and decreases readability (reducing  maintainability)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Unused Variable"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-131: Presence of Unused Variables"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unused State Variable"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Unused Statement"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unused Elements"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Unused State Variable"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Presence of Unused Variables"
                }
            ],
            "cwes": [
                "cwe-0066f920-b9b7-44c7-b699-c6b6298f5376"
            ],
            "swcs": [
                "swc-1ae64b08-2013-4d3d-b5c5-3add10d4962c"
            ],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ddc5a75a-4f55-4340-825a-fd83e6ecba41",
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-df23fc00-eb51-4aa5-a6c4-d1ce8ae93e31",
            "name": "Upgradable Contract",
            "description": "occurs when a contract relies on external contracts for critical functions and the  external contracts can be dynamically updated. Upgrading methods are hard to  implement and  can be realized by malicious developers. 2 ways: i) splitting a contract into a proxy contract and a logic contract s.t developers can  upgrade the latter but not the former ii) using a registry contract to bookkeep the updated contracts",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-861f9845-af71-4f2d-97c0-c4dc17229248"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Upgradable Contract"
                },
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Insecure Contract Upgrading"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Upgradable Contract"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-a9cccac9-398e-485e-885f-08bf54c6bca6"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-19b175a8-5c8d-4f6c-bcd6-fbb4fefe3c63",
            "name": "Use of Assembly",
            "description": "bugs arising from usage of assebly instructions in high level code ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Use of Assembly"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Assembly Usage"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d0c58200-c9da-4cf9-9e9b-40af71e73a76",
            "name": "Use of Deprecated Functions",
            "description": "errors and vulnerabilities using deprecated Solidity or other language Deprecated APIs might still be supported by the current compiler version, however  developers might need to refactore the code for code reuse",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Deprecated Solidity/ High level Language Code Use"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Use of Deprecated Functions"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-111: Use of Deprecated Solidity Functions"
                },
                {
                    "ref_id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
                    "alias": "Deprecated APIs"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Using Deprecated Functions"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Use of Deprecated Functions"
                }
            ],
            "cwes": [
                "cwe-f0275cc6-8de4-48c9-b1ec-ef1a1e63f1cb"
            ],
            "swcs": [
                "swc-d47f1064-8089-4110-8e69-340ccd8b1996"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d7b6c7b4-9123-43a8-85d9-85c5bd3be48b",
            "name": "Useless Assignment",
            "description": "-",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Useless Assignment"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-ddc5a75a-4f55-4340-825a-fd83e6ecba41"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-0a8ca36b-a55c-43f8-a861-4f2701267f5c",
            "name": "Vote Manipulation by Flashloan",
            "description": "when calculating vote amount/number and this vote amount/number is from a  vote weight that might be manipulated by flashloan  ?",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Vote Manipulation by Flashloan"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-d341f772-e2d3-4fc1-a709-8f769f6c869d",
            "name": "Voting Issues",
            "description": "wrong voting logic that can lead to undesired effects",
            "sample_code": "",
            "level": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Voting Issues"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-b54b77bf-0284-4f8a-992a-0c75aab2e9dc",
            "name": "Write to Arbitrary Storage Location",
            "description": " -Improper authorization checks permit arbitrary writings to storage locations -data structures can be erroneously overwritten if their location is not  specified  ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6",
                "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Write to Arbitrary Storage Location"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Write to Arbitrary Storage Location"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-124: Write to Arbitrary Storage Location"
                },
                {
                    "ref_id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
                    "alias": "No Restricted Write"
                },
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Arbitrary Write - AW"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Uninitialized Storage Pointer"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Write to Arbitrary Storage Location"
                },
                {
                    "ref_id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
                    "alias": "Unprotected Write To Storage Location"
                },
                {
                    "ref_id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
                    "alias": "Unrestricted Write"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Unrestricted Write"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Overlap Attack"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Write to Arbitrary Storage Location"
                }
            ],
            "cwes": [
                "cwe-23d97431-c83e-4de3-b047-de3e04edefdd",
                "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
            ],
            "swcs": [
                "swc-7a7fc3a0-6937-488b-ba06-78d1fc292ae3"
            ],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
                "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
                "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-4f59a5ce-551a-42eb-bd76-1720d8ed45c9",
                "vul-1e632d81-851e-4c74-bfa6-e10494250d8b"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-998fea71-8563-4b52-b5b6-28c0fadf9b83",
            "name": "Wrong Checkpoint Order",
            "description": " \u201ccheckpoints\u201d= objects that reflects that number of tokens that had been delegated  to a given blockchain address at a particular block number when have inside code statements that invoke user checkpoint and and have  inside code statements that calculate/assign/distribute the balance/share/stake/fee /loan/reward ?",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Wrong Checkpoint Order"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-653775f9-409e-4432-aab8-12549d93f359",
            "name": "Wrong Constructor Name",
            "description": "contract deployed with a constructor function created by the programmer  with a wrong name,  which makes the function callable by anyone",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-9150ab62-13aa-452b-9ba1-ef9c6134807a"
            ],
            "attacks": [
                "att-4f9b1b3a-2afc-488c-ba13-145449304023"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Erroneous Constructor Name"
                },
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Constructor Name"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-118: Incorrect Constructor Name"
                },
                {
                    "ref_id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
                    "alias": "Erroneous Constructor Name"
                },
                {
                    "ref_id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
                    "alias": "Unsafe Constructor"
                },
                {
                    "ref_id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
                    "alias": "Incorrect Initialization"
                },
                {
                    "ref_id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
                    "alias": "Erroneous Constructor Name"
                },
                {
                    "ref_id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
                    "alias": "Erroneous Constructor Name"
                },
                {
                    "ref_id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
                    "alias": "Wrong Constructor Name"
                },
                {
                    "ref_id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
                    "alias": "SWC-118: Incorrect Constructor Name"
                },
                {
                    "ref_id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
                    "alias": "Access Control"
                },
                {
                    "ref_id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
                    "alias": "Constructor Name"
                },
                {
                    "ref_id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
                    "alias": "Incorrect Constructor Name"
                },
                {
                    "ref_id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
                    "alias": "Constructors with Care"
                },
                {
                    "ref_id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
                    "alias": "Wrong Constructor Name"
                },
                {
                    "ref_id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
                    "alias": "Call to Default Constructor"
                }
            ],
            "cwes": [
                "cwe-caf2a717-0565-469b-b7f9-bc80f720d1fe"
            ],
            "swcs": [
                "swc-78a9dc1b-2f05-40af-a422-00cdedcee8ba"
            ],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-9f9879a4-56ee-4feb-9b5d-7be655875c25",
            "name": "Wrong Interest Rate Order",
            "description": "when have inside code statements that update/accrue interest/exchange rate and  have inside code statements that calculate/assign/distribute the balance/share/ stake/fee/loan/reward ?",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
                "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
                    "alias": "Wrong Interest Rate Order"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4e8c1c3a-dace-4c76-aa3a-b572fe2c4d8f",
            "name": "Wrong Logic",
            "description": "unwanted behaviour caused by missing logic or logical errors",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [
                "att-39e1ef38-6870-4bf8-83ea-b3a60f7d2144",
                "att-55b10cfc-91ea-4a3b-97aa-86c527150d71"
            ],
            "references": [
                {
                    "ref_id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
                    "alias": "Missing Logic, Logical Errors or Dead Code"
                },
                {
                    "ref_id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
                    "alias": "Incorrect Logic"
                },
                {
                    "ref_id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
                    "alias": "Logic Errors"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [
                "vul-19e8452b-dc4c-401e-a512-cb6356ca83d8"
            ],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-5d828c3b-4912-4cb1-80f8-d02bddfbea05",
            "name": "Wrong Type of Function (pure - view)",
            "description": "usage of wrong type for function, i.e. functions not able to read and modify  state variables (pure) instead of functions able to read state variables (view)",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
                    "alias": "Wrong Type of Function (pure - view)"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [
                "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
                "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859"
            ],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-3b8300ae-25ac-47fb-a363-17b7ed480f4f"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-70e12480-723b-4f76-9310-04a6acc94470",
            "name": "Broken business models due to unexpected operations",
            "description": "these issues happen when an attacker can perform operations that break the business  model. This may be due to the missing business logic checks or to a wrong  implementation that doesn\u2019t respect business model requirements ",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Broken business models due to unexpected operations"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8f411702-9334-4d9f-bc64-7dd47c7ed74a",
            "name": "Unexpected function invocation sequences",
            "description": "(e.g., external calls to dependent contracts) the attacker can perform operations in a  malicious order that was not considered by developers",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Unexpected function invocation sequences"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-70e12480-723b-4f76-9310-04a6acc94470"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4a0e7da1-2673-43ed-9aa3-99e161562a3c",
            "name": "Unexpected environment or contract conditions",
            "description": "(e.g., ChainLink returning outdated data or significant slippage occurring) developers  made wrong assumptions on the blockchain environment  or on the contract possible  states",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Unexpected environment or contract conditions"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-70e12480-723b-4f76-9310-04a6acc94470"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-4ab30af9-fc69-4272-9788-f649490735c3",
            "name": "A given function is invoked multiple times unexpectedly",
            "description": "the attacker can invoke maliciously a function many times",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "A given function is invoked multiple times unexpectedly"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-70e12480-723b-4f76-9310-04a6acc94470"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": []
        },
        {
            "id": "vul-8f679900-4c28-4f30-99dd-ac306c530677",
            "name": "Unexpected function arguments",
            "description": "developers don\u2019t consider the possibility of some malicious input argument of some  function or they don\u2019t implement input sanitization properly",
            "sample_code": "",
            "level": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ],
            "attacks": [],
            "references": [
                {
                    "ref_id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
                    "alias": "Unexpected function arguments"
                }
            ],
            "cwes": [],
            "swcs": [],
            "tools": [],
            "mitigations": [],
            "parent_vulnerabilities": [
                "vul-70e12480-723b-4f76-9310-04a6acc94470"
            ],
            "enabling_vulnerabilities": [],
            "impacting_vulnerabilities": [
                "vul-5bbf5118-489b-4126-852f-bc57cab0d5d5"
            ]
        }
    ],
    "levels": [
        {
            "id": "lev-089d8d52-05bb-47c9-9e1c-c882741f4ef1",
            "name": "EVM"
        },
        {
            "id": "lev-af97cd38-7678-4fbe-8792-5edf5325bcef",
            "name": "Solidity Language"
        },
        {
            "id": "lev-5f83c743-ffd6-4f5c-ad9e-6b2e0b40b0a2",
            "name": "Ethereum Blockchain"
        }
    ],
    "categories": [
        {
            "id": "cat-0f485735-988a-48f7-970d-09d6ea41feb4",
            "name": "Compiler-related",
            "parent_categories": []
        },
        {
            "id": "cat-cd7d9ded-2213-4ef8-8b80-7aeb4d474ff6",
            "name": "Visibility / Privacy",
            "parent_categories": []
        },
        {
            "id": "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff",
            "name": "Logic-related",
            "parent_categories": []
        },
        {
            "id": "cat-9150ab62-13aa-452b-9ba1-ef9c6134807a",
            "name": "Constructor",
            "parent_categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ]
        },
        {
            "id": "cat-9039ba40-6cbb-4b2e-8589-ea6a5e9a58a8",
            "name": "Gas-related",
            "parent_categories": []
        },
        {
            "id": "cat-1d863634-da89-4bf9-8940-c23e8e58a793",
            "name": "Arithmetics-related",
            "parent_categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda",
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ]
        },
        {
            "id": "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda",
            "name": "Code Flaws / Errors",
            "parent_categories": []
        },
        {
            "id": "cat-cbe33fa7-6285-4f55-88e0-390212e84119",
            "name": "Block-state",
            "parent_categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ]
        },
        {
            "id": "cat-3502937b-2655-4b3b-bb06-ef0e8c819b44",
            "name": "Reentrancy-related",
            "parent_categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ]
        },
        {
            "id": "cat-861f9845-af71-4f2d-97c0-c4dc17229248",
            "name": "Function Calls",
            "parent_categories": []
        },
        {
            "id": "cat-6707e1ca-4db7-43b1-82c6-df71d66da20f",
            "name": "Optimizer-related",
            "parent_categories": [
                "cat-0f485735-988a-48f7-970d-09d6ea41feb4"
            ]
        },
        {
            "id": "cat-1f8e745a-e8ca-4c39-a70d-fc548a2891a7",
            "name": "Denial of Service",
            "parent_categories": []
        },
        {
            "id": "cat-a7eff7aa-e179-4e78-a739-62ca89c65de3",
            "name": "Assert / Require / Revert Statements",
            "parent_categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda"
            ]
        },
        {
            "id": "cat-83f8cb22-7254-4403-a23e-53d4a2b11d80",
            "name": "Exceptions",
            "parent_categories": []
        },
        {
            "id": "cat-033dc335-eecc-4e3e-9401-5e0ae5cf4924",
            "name": "Tokens-related",
            "parent_categories": []
        },
        {
            "id": "cat-95755fb3-5a00-4d8a-bb74-7abaa6dbf7b0",
            "name": "Access Rights / Authorization",
            "parent_categories": [
                "cat-dfbb17d5-edf7-48da-ae43-49970bbc6eda",
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ]
        },
        {
            "id": "cat-4252323f-cb5f-4a9c-87eb-412f1adcb576",
            "name": "TOD-related",
            "parent_categories": [
                "cat-b2ba0e1a-c552-4410-bee2-9539ddd6d5ff"
            ]
        },
        {
            "id": "cat-8cb6920b-b982-453f-b01e-29b48130a657",
            "name": "Structural",
            "parent_categories": []
        },
        {
            "id": "cat-54f45d0e-0bc7-4b64-b7ac-d0d5aacfeab4",
            "name": "Oracles",
            "parent_categories": []
        },
        {
            "id": "cat-2cf54b4b-4e08-457e-a2e4-d4a08974ed67",
            "name": "Hash Functions",
            "parent_categories": []
        }
    ],
    "attacks": [
        {
            "id": "att-92cc0385-9171-4760-a459-8267439a71aa",
            "name": "Re-entrancy Honey Pot",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-a8724dd7-11a8-4c32-ad09-7057224f4386",
            "name": "Under-priced DDoS attacks (First: transactions spam w EXTCODESIZE opcode)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-ea97d736-90ab-4e3d-a2d8-6b1924d371d8",
            "name": "Selfish-mining attack",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-ffa722da-61bd-44e5-b87f-50e30ce61518",
            "name": "Under-priced DDoS attacks (Second: Empty accounts w SUICIDE opcode)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-4c3e4ac1-bc39-42c0-8b30-0de3c94dcb55",
            "name": "BEC tokens (Beautychain)",
            "year": 2018,
            "references": [
                "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd"
            ],
            "patch": "pat-9976fcaf-d1da-4018-a3f2-0761b86d919e"
        },
        {
            "id": "att-440221a9-e2e1-47fd-bf96-2e3960bf0767",
            "name": "EtherPot",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-28bfb383-6496-49cd-9dc0-f5ccae9f5851",
            "name": "Synthetix sKRW",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-1c8f53da-2e9d-45ac-83a2-2685ba7ea53b",
            "name": "Batch Transfer Overflow (CVE-2018\u201310299)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-831aa8e3-3342-44c9-8cd0-1e9c50b31132",
            "name": "Bribery attack",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-70e7246f-3ff4-4d6d-b15c-caff2901f511",
            "name": "Parity Multi-Sig Wallet 2017 (Second Hack)",
            "year": 2017,
            "references": [],
            "patch": ""
        },
        {
            "id": "att-55b10cfc-91ea-4a3b-97aa-86c527150d71",
            "name": "Parity Multi-Sig Wallet",
            "year": 2017,
            "references": [],
            "patch": ""
        },
        {
            "id": "att-f9da17c9-03ee-406b-9762-8ebbd34d6cbe",
            "name": "Ethereum Classic (ETC) 51% attack",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-5417b086-e911-42f6-872e-df0ea6bfe498",
            "name": "SmartBillions",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-bdcec890-d2f6-4da0-b7f2-bcf08b2ec20d",
            "name": "FirstContract (address 0x68C7147205A8bEB9D99fD19908b93462CdFfC60d)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-2b378844-3f5f-487c-9698-cd619598d029",
            "name": "ECRecovery Library",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-4f9b1b3a-2afc-488c-ba13-145449304023",
            "name": "Rubixi",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-d149619c-b3b1-44d4-9094-74b6af7c1c18",
            "name": "Ballot (address 0x5A4964bb5FDd3CE646bB6AA020704F7D4db79302)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-9cd6a6cc-eb5a-43e6-a4e4-6eeba588b31a",
            "name": "Visor Finance",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-e3ab8f82-b688-4ab7-a99d-33c14dc7b99e",
            "name": "PRNG",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-4d09e292-e761-45e1-b17f-bad529ba1980",
            "name": "Compound Finance",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-d5181f0a-35b0-45ab-a01c-ba06576bc06a",
            "name": "Parity Multi-Sig Wallet 2017 (First Hack)",
            "year": 2017,
            "references": [],
            "patch": ""
        },
        {
            "id": "att-3e682820-3bba-49d0-862d-851c7c6bb4e4",
            "name": "GovernMental",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-3dbee415-24d1-4385-893b-f973a137be11",
            "name": "Fomo3D",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-c8932526-df5d-41b7-a2fe-d0d5372f198f",
            "name": "DAO",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-6fcdb7f5-b97c-470b-8a13-ce8becf81767",
            "name": "Bancor",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-571ec819-2fdf-484e-93a8-771064c646b4",
            "name": "Balance attack",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-d456903e-51b5-439e-a452-e9276d89a953",
            "name": "Ethstick",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-b93b4d29-7d2c-44dc-924b-65a1bb5743bd",
            "name": "POWH Coin 2018",
            "year": 2018,
            "references": [],
            "patch": ""
        },
        {
            "id": "att-47c2e303-ed18-457f-bbb5-e998023a75c9",
            "name": "OpenAddressLottery Honeypot",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-4f51d8ee-e62f-4019-9d3b-9b04aa10e549",
            "name": "King of the Ether Throne",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-f12e7fab-4184-4665-9224-4d45c36fcb3c",
            "name": "ERC20 Signature Replay",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-65994c6f-25e5-436d-990a-d50f814b66fa",
            "name": "theRun",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-d143bd6d-9fd7-4f62-8e3a-6d6c718f483d",
            "name": "Cross-chain replay (chains ETH and ETHC)",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-034800e5-29d3-43cc-99ed-69a583d656d8",
            "name": "Redacted Cartel",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-d325c368-8b05-4510-88dd-d87e82f85ad8",
            "name": "CryptoRoulette Honeypot",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-5897940b-d19e-4fce-ae78-ab9a24bc411a",
            "name": "HYIP",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-42123cdc-5fa1-46de-90df-a619da025f29",
            "name": "Integer Over/Under Flow",
            "year": "",
            "references": [],
            "patch": ""
        },
        {
            "id": "att-39e1ef38-6870-4bf8-83ea-b3a60f7d2144",
            "name": "HackersGold",
            "year": "",
            "references": [],
            "patch": ""
        }
    ],
    "references": [
        {
            "id": "ref-61efddce-f977-4ef7-8d31-33b8dd6ca1ad",
            "name": "Staderini 2020",
            "author": "Staderini",
            "year": 2020,
            "title": "Classification of Ethereum Vulnerabilities and their Propagations",
            "bibtex": "@inproceedings{staderini_classification_2020,\tlocation = {Antalya, Turkey},\ttitle = {Classification of Ethereum Vulnerabilities and their Propagations},\tisbn = {978-1-72818-370-1},\turl = {https://ieeexplore.ieee.org/document/9274458/},\tdoi = {10.1109/BCCA50787.2020.9274458},\tabstract = {Blockchain technology is having an everincreasing impact on distributed applications domain, since the adoption of Blockchain 2.0 led to the spread of smart contracts. In such a context, Ethereum is the framework with the highest diffusion in terms of smart contract\u2019s development, with a consequent rise of exploitation of code vulnerabilities, some of which causing bad financial losses. For this reason, this paper focuses on the issues of Ethereum smart contracts implementation (made with the Turing-complete language Solidity), providing a comprehensive systematization of such vulnerabilities basing on a slice of the Common Weakness Enumeration ({CWE}). Moreover, some relevant propagation cases among different vulnerabilities and {CWE} groups, observed in exploited contracts, are highlighted.},\teventtitle = {2020 Second International Conference on Blockchain Computing and Applications ({BCCA})},\tpages = {44--51},\tbooktitle = {2020 Second International Conference on Blockchain Computing and Applications ({BCCA})},\tpublisher = {{IEEE}},\tauthor = {Staderini, Mirko and Palli, Caterina and Bondavalli, Andrea},\turldate = {2023-11-07},\tdate = {2020-11-02},\tlangid = {english},\tfile = {Staderini et al. - 2020 - Classification of Ethereum Vulnerabilities and the.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\DD48WR4R\\\\Staderini et al. - 2020 - Classification of Ethereum Vulnerabilities and the.pdf:application/pdf},}"
        },
        {
            "id": "ref-af703cfc-6d42-483e-9818-89ea7252200f",
            "name": "Kalra 2018",
            "author": "Kalra",
            "year": 2018,
            "title": "ZEUS: Analyzing Safety of Smart Contracts",
            "bibtex": "@inproceedings{kalra_zeus_2018,\ttitle = {{ZEUS}: Analyzing Safety of Smart Contracts},\turl = {https://www.semanticscholar.org/paper/ZEUS%3A-Analyzing-Safety-of-Smart-Contracts-Kalra-Goel/f3f927adf4aac1146c9587fa646864a040c94fa6},\tshorttitle = {{ZEUS}},\tabstract = {A smart contract is hard to patch for bugs once it is deployed, irrespective of the money it holds. A recent bug caused losses worth around \\$50 million of cryptocurrency. We present {ZEUS}\u2014a framework to verify the correctness and validate the fairness of smart contracts. We consider correctness as adherence to safe programming practices, while fairness is adherence to agreed upon higher-level business logic. {ZEUS} leverages both abstract interpretation and symbolic model checking, along with the power of constrained horn clauses to quickly verify contracts for safety. We have built a prototype of {ZEUS} for Ethereum and Fabric blockchain platforms, and evaluated it with over 22.4K smart contracts. Our evaluation indicates that about 94.6\\% of contracts (containing cryptocurrency worth more than \\$0.5 billion) are vulnerable. {ZEUS} is sound with zero false negatives and has a low false positive rate, with an order of magnitude improvement in analysis time as compared to prior art.},\teventtitle = {Network and Distributed System Security Symposium},\tauthor = {Kalra, Sukrit and Goel, Seep and Dhawan, Mohan and Sharma, Subodh},\turldate = {2023-10-11},\tdate = {2018},\tannotation = {[{TLDR}] This work presents {ZEUS}\u2014a framework to verify the correctness and validate the fairness of smart contracts, which leverages both abstract interpretation and symbolic model checking, along with the power of constrained horn clauses to quickly verify contracts for safety.},\tfile = {Kalra et al_2018_ZEUS.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Kalra et al_2018_ZEUS.pdf:application/pdf},}"
        },
        {
            "id": "ref-057ade5d-62c7-4a91-b11e-ec0f7985dfee",
            "name": "SMARTDEC 2018",
            "author": "SMARTDEC",
            "year": 2018,
            "title": "Classification os smart contract vulnerabilities grouped in Blockchain, Language and Model categories",
            "bibtex": "@software{noauthor_smartdecclassification_2023,\ttitle = {smartdec/classification},\trights = {{MIT}},\turl = {https://github.com/smartdec/classification},\tabstract = {Classification of smart contract vulnerabilities},\tpublisher = {{SmartDec}},\turldate = {2024-02-03},\tdate = {2023-11-26},\tnote = {original-date: 2018-10-11T07:54:53Z},\tkeywords = {ethereum, classification, vulnerabilities},}"
        },
        {
            "id": "ref-6598af17-329b-4338-b7de-bed1d5048224",
            "name": "SWC",
            "author": "SWC",
            "year": 2020,
            "title": "Smart Contract Weaknesses Classification Registry",
            "bibtex": "@online{noauthor_smart_nodate-1,\ttitle = {Smart Contract Weakness Classification ({SWC})},\turl = {https://swcregistry.io/},\turldate = {2024-02-03},\tfile = {Smart Contract Weakness Classification (SWC):C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\Q7INDPQ2\\\\swcregistry.io.html:text/html},}"
        },
        {
            "id": "ref-e835c41a-6b9e-447f-94fd-e9b57260c41f",
            "name": "Brent 2020",
            "author": "Brent",
            "year": 2020,
            "title": "Ethainter: a smart contract security analyzer for composite vulnerabilities",
            "bibtex": "@inproceedings{brent_ethainter_2020,\tlocation = {New York, {NY}, {USA}},\ttitle = {Ethainter: a smart contract security analyzer for composite vulnerabilities},\tisbn = {978-1-4503-7613-6},\turl = {https://dl.acm.org/doi/10.1145/3385412.3385990},\tdoi = {10.1145/3385412.3385990},\tseries = {{PLDI} 2020},\tshorttitle = {Ethainter},\tabstract = {Smart contracts on permissionless blockchains are exposed to inherent security risks due to interactions with untrusted entities. Static analyzers are essential for identifying security risks and avoiding millions of dollars worth of damage. We introduce Ethainter, a security analyzer checking information flow with data sanitization in smart contracts. Ethainter identifies composite attacks that involve an escalation of tainted information, through multiple transactions, leading to severe violations. The analysis scales to the entire blockchain, consisting of hundreds of thousands of unique smart contracts, deployed over millions of accounts. Ethainter is more precise than previous approaches, as we confirm by automatic exploit generation (e.g., destroying over 800 contracts on the Ropsten network) and by manual inspection, showing a very high precision of 82.5\\% valid warnings for end-to-end vulnerabilities. Ethainter\u2019s balance of precision and completeness offers significant advantages over other tools such as Securify, Securify2, and {teEther}.},\tpages = {454--469},\tbooktitle = {Proceedings of the 41st {ACM} {SIGPLAN} Conference on Programming Language Design and Implementation},\tpublisher = {Association for Computing Machinery},\tauthor = {Brent, Lexi and Grech, Neville and Lagouvardos, Sifis and Scholz, Bernhard and Smaragdakis, Yannis},\turldate = {2023-10-13},\tdate = {2020-06-11},\tkeywords = {smart contracts, static analysis, information flow},\tfile = {Brent et al_2020_Ethainter.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Brent et al_2020_Ethainter.pdf:application/pdf},}"
        },
        {
            "id": "ref-28c6a036-754c-44d9-8d06-ee70e4793eb7",
            "name": "Zhang 2023",
            "author": "Zhang",
            "year": 2023,
            "title": "Demystifying Exploitable Bugs in Smart Contracts",
            "bibtex": "@inproceedings{zhang_demystifying_2023,\ttitle = {Demystifying Exploitable Bugs in Smart Contracts},\turl = {https://ieeexplore.ieee.org/document/10172700},\tdoi = {10.1109/ICSE48619.2023.00061},\tabstract = {Exploitable bugs in smart contracts have caused significant monetary loss. Despite the substantial advances in smart contract bug finding, exploitable bugs and real-world attacks are still trending. In this paper we systematically investigate 516 unique real-world smart contract vulnerabilities in years 2021\u20132022, and study how many can be exploited by malicious users and cannot be detected by existing analysis tools. We further categorize the bugs that cannot be detected by existing tools into seven types and study their root causes, distributions, difficulties to audit, consequences, and repair strategies. For each type, we abstract them to a bug model (if possible), facilitating finding similar bugs in other contracts and future automation. We leverage the findings in auditing real world smart contracts, and so far we have been rewarded with 102,660 bug bounties for identifying 15 critical zero-day exploitable bugs, which could have caused up to 22.52 millions monetary loss if exploited.},\teventtitle = {2023 {IEEE}/{ACM} 45th International Conference on Software Engineering ({ICSE})},\tpages = {615--627},\tbooktitle = {2023 {IEEE}/{ACM} 45th International Conference on Software Engineering ({ICSE})},\tauthor = {Zhang, Zhuo and Zhang, Brian and Xu, Wen and Lin, Zhiqiang},\turldate = {2023-10-10},\tdate = {2023-05},\tnote = {{ISSN}: 1558-1225},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\UU4KVI5A\\\\10172700.html:text/html;Zhang et al_2023_Demystifying Exploitable Bugs in Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Zhang et al_2023_Demystifying Exploitable Bugs in Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-47f0cf2c-8aae-48d9-9c42-7a3ceda0e1e3",
            "name": "Staderini 2022",
            "author": "Staderini",
            "year": 2022,
            "title": "Security Evaluation and Improvement of Solidity Smart Contracts",
            "bibtex": "@misc{staderini_security_2022,\tlocation = {Rochester, {NY}},\ttitle = {Security Evaluation and Improvement of Solidity Smart Contracts},\turl = {https://papers.ssrn.com/abstract=4038087},\tdoi = {10.2139/ssrn.4038087},\tabstract = {Smart contracts are the major innovation of the second generation of Blockchain. The automated execution of a faulty contract endangers applications as they are immutable after storing them on a Blockchain. Attackers can exploit vulnerabilities originating in hidden weaknesses. Impacts may be critical as a single vulnerability can cause severe (financial) losses. This work focuses on the weakness detection capabilities of a collection of static analysers for Solidity, the primary programming language used to develop smart contracts for Ethereum (one of the most popular platforms for smart contracts). The paper classifies a set of Solidity vulnerabilities (33) to a language-independent taxonomy based on the Common Weakness Enumeration ({CWE}). It performs then a comparative analysis of the capabilities of some selected static analysis tools to detect weakness originating vulnerabilities on a representative set of smart contracts. This evaluation identifies the (un)covered vulnerabilities and the related classes; quantifies the testing efficiency of the individual static analysers; improves the coverage by combining multiple tools. Finally, we analyse and prioritise the uncovered vulnerabilities. This way, we provide an indicator for developers to increase the tool impact in smart contract security by identifying the most severe vulnerabilities not covered by the static analysis tools.},\tnumber = {4038087},\tauthor = {Staderini, Mirko and Pataricza, Andr\u00e0s and Bondavalli, Andrea},\turldate = {2023-11-07},\tdate = {2022-02-18},\tlangid = {english},\tkeywords = {Smart Contract {SecuritySmart} Contract {VulnerabilityStatic} Analysys {toolsPerformanceCoverageCriticality} analysis},\tfile = {Staderini et al_2022_Security Evaluation and Improvement of Solidity Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Staderini et al_2022_Security Evaluation and Improvement of Solidity Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-37f09eb0-3d8d-417c-9322-63fac01b9ff6",
            "name": "Alharby 2017",
            "author": "Alharby",
            "year": 2017,
            "title": "Blockchain-based Smart Contracts: A SystematicMapping Study",
            "bibtex": "@inproceedings{alharby_blockchain-based_2017,\ttitle = {Blockchain-based Smart Contracts: A Systematic Mapping Study},\turl = {http://arxiv.org/abs/1710.06372},\tdoi = {10.5121/csit.2017.71011},\tshorttitle = {Blockchain-based Smart Contracts},\tabstract = {An appealing feature of blockchain technology is smart contracts. A smart contract is executable code that runs on top of the blockchain to facilitate, execute and enforce an agreement between untrusted parties without the involvement of a trusted third party. In this paper, we conduct a systematic mapping study to collect all research that is relevant to smart contracts from a technical perspective. The aim of doing so is to identify current research topics and open challenges for future studies in smart contract research. We extract 24 papers from different scientific databases. The results show that about two thirds of the papers focus on identifying and tackling smart contract issues. Four key issues are identified, namely, codifying, security, privacy and performance issues. The rest of the papers focuses on smart contract applications or other smart contract related topics. Research gaps that need to be addressed in future studies are provided.},\tpages = {125--140},\tbooktitle = {Computer Science \\& Information Technology ({CS} \\& {IT})},\tauthor = {Alharby, Maher and van Moorsel, Aad},\turldate = {2023-10-19},\tdate = {2017-08-26},\teprinttype = {arxiv},\teprint = {1710.06372 [cs]},\tkeywords = {Computer Science - Cryptography and Security},\tannotation = {Comment: Keywords: Blockchain, Smart contracts, Systematic Mapping Study, Survey},\tfile = {Alharby_van Moorsel_2017_Blockchain-based Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Alharby_van Moorsel_2017_Blockchain-based Smart Contracts.pdf:application/pdf;arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\T9MQGIUK\\\\1710.html:text/html},}"
        },
        {
            "id": "ref-5eac5574-d94c-4f64-9283-ac67f329c9b2",
            "name": "Munir 2023",
            "author": "Munir",
            "year": 2023,
            "title": "Pre-deployment Analysis of Smart Contracts -- A Survey",
            "bibtex": "@misc{munir_pre-deployment_2023,\ttitle = {Pre-deployment Analysis of Smart Contracts -- A Survey},\turl = {http://arxiv.org/abs/2301.06079},\tdoi = {10.48550/arXiv.2301.06079},\tabstract = {Smart contracts are programs that execute transactions involving independent parties and cryptocurrencies. As programs, smart contracts are susceptible to a wide range of errors and vulnerabilities. Such vulnerabilities can result in significant losses. Furthermore, by design, smart contract transactions are irreversible. This creates a need for methods to ensure the correctness and security of contracts pre-deployment. Recently there has been substantial research into such methods. The sheer volume of this research makes articulating state-of-the-art a substantial undertaking. To address this challenge, we present a systematic review of the literature. A key feature of our presentation is to factor out the relationship between vulnerabilities and methods through properties. Specifically, we enumerate and classify smart contract vulnerabilities and methods by the properties they address. The methods considered include static analysis as well as dynamic analysis methods and machine learning algorithms that analyze smart contracts before deployment. Several patterns about the strengths of different methods emerge through this classification process.},\tnumber = {{arXiv}:2301.06079},\tpublisher = {{arXiv}},\tauthor = {Munir, Sundas and Taha, Walid},\turldate = {2023-11-08},\tdate = {2023-06-30},\teprinttype = {arxiv},\teprint = {2301.06079 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\QXNQ9YXS\\\\2301.html:text/html;Munir_Taha_2023_Pre-deployment Analysis of Smart Contracts -- A Survey.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Munir_Taha_2023_Pre-deployment Analysis of Smart Contracts -- A Survey.pdf:application/pdf},}"
        },
        {
            "id": "ref-04aceec5-5248-4303-8f25-5d5fd64de023",
            "name": "Chen 2022 DefectChecker",
            "author": "Chen DefectChecker",
            "year": 2022,
            "title": "DefectChecker: Automated Smart Contract Defect Detection by Analyzing EVM Bytecode",
            "bibtex": "@article{chen_defectchecker_2022,\ttitle = {{DefectChecker}: Automated Smart Contract Defect Detection by Analyzing {EVM} Bytecode},\tvolume = {48},\tissn = {1939-3520},\turl = {https://ieeexplore.ieee.org/document/9337195},\tdoi = {10.1109/TSE.2021.3054928},\tshorttitle = {{DefectChecker}},\tabstract = {Smart contracts are Turing-complete programs running on the blockchain. They are immutable and cannot be modified, even when bugs are detected. Therefore, ensuring smart contracts are bug-free and well-designed before deploying them to the blockchain is extremely important. A contract defect is an error, flaw or fault in a smart contract that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. Detecting and removing contract defects can avoid potential bugs and make programs more robust. Our previous work defined 20 contract defects for smart contracts and divided them into five impact levels. According to our classification, contract defects with seriousness level between 1-3 can lead to unwanted behaviors, e.g., a contract being controlled by attackers. In this paper, we propose {DefectChecker}, a symbolic execution-based approach and tool to detect eight contract defects that can cause unwanted behaviors of smart contracts on the Ethereum blockchain platform. {DefectChecker} can detect contract defects from smart contracts\u2019 bytecode. We verify the performance of {DefectChecker} by applying it to an open-source dataset. Our evaluation results show that {DefectChecker} obtains a high F-score (88.8 percent in the whole dataset) and only requires 0.15s to analyze one smart contract on average. We also applied {DefectChecker} to 165,621 distinct smart contracts on the Ethereum platform. We found that 25,815 of these smart contracts contain at least one of the contract defects that belongs to impact level 1-3, including some real-world attacks.},\tpages = {2189--2207},\tnumber = {7},\tjournaltitle = {{IEEE} Transactions on Software Engineering},\tauthor = {Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John and Luo, Xiapu and Chen, Ting},\turldate = {2023-11-08},\tdate = {2022-07},\tnote = {Conference Name: {IEEE} Transactions on Software Engineering},\tfile = {Chen et al_2022_DefectChecker.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chen et al_2022_DefectChecker2.pdf:application/pdf},}"
        },
        {
            "id": "ref-0dd6cb24-b924-400c-8d92-382a4ce8dac7",
            "name": "Sigmaprime SIGP 2021",
            "author": "Sigmaprime SIGP",
            "year": 2021,
            "title": "solidity-security-blog Comprehensive list of known attack vectors and common anti-patterns",
            "bibtex": "@software{noauthor_sigpsolidity-security-blog_2024,\ttitle = {sigp/solidity-security-blog},\turl = {https://github.com/sigp/solidity-security-blog},\tabstract = {Comprehensive list of known attack vectors and common anti-patterns},\tpublisher = {Sigma Prime},\turldate = {2024-02-03},\tdate = {2024-02-03},\tnote = {original-date: 2018-05-30T15:36:21Z},}"
        },
        {
            "id": "ref-b68aae6d-c2b4-4907-a11f-499128866913",
            "name": "Qian 2022",
            "author": "Qian",
            "year": 2022,
            "title": "Smart Contract Vulnerability Detection Technique: A Survey",
            "bibtex": "@misc{qian_smart_2022,    title = {Smart Contract Vulnerability Detection Technique: A Survey},    url = {http://arxiv.org/abs/2209.05872},    doi = {10.13328/j.cnki.jos.006375},    shorttitle = {Smart Contract Vulnerability Detection Technique},    abstract = {Smart contract, one of the most successful applications of blockchain, is taking the world by storm, playing an essential role in the blockchain ecosystem. However, frequent smart contract security incidents not only result in tremendous economic losses but also destroy the blockchain-based credit system. The security and reliability of smart contracts thus gain extensive attention from researchers worldwide. In this survey, we first summarize the common types and typical cases of smart contract vulnerabilities from three levels, i.e., Solidity code layer, {EVM} execution layer, and Block dependency layer. Further, we review the research progress of smart contract vulnerability detection and classify existing counterparts into five categories, i.e., formal verification, symbolic execution, fuzzing detection, intermediate representation, and deep learning. Empirically, we take 300 real-world smart contracts deployed on Ethereum as the test samples and compare the representative methods in terms of accuracy, F1-Score, and average detection time. Finally, we discuss the challenges in the field of smart contract vulnerability detection and combine with the deep learning technology to look forward to future research directions.},    author = {Qian, Peng and Liu, Zhenguang and He, Qinming and Huang, Butian and Tian, Duanzheng and Wang, Xun},    urldate = {2023-10-11},    date = {2022-09-13},    eprinttype = {arxiv},    eprint = {2209.05872 [cs]},    keywords = {Computer Science - Cryptography and Security, Computer Science - Programming Languages},    annotation = {Comment: This manuscript is the English translation version of our paper published in Ruan Jian Xue Bao/Journal of Software, 22, 33(8)},    file = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\NZQESEI6\\\\2209.html:text/html;Qian et al_2022_Smart Contract Vulnerability Detection Technique.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Qian et al_2022_Smart Contract Vulnerability Detection Technique.pdf:application/pdf},}"
        },
        {
            "id": "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138",
            "name": "Luu 2016",
            "author": "Luu",
            "year": 2016,
            "title": "Making Smart Contracts Smarter (Oyente)",
            "bibtex": "@inproceedings{luu_making_2016,\tlocation = {New York, {NY}, {USA}},\ttitle = {Making Smart Contracts Smarter},\tisbn = {978-1-4503-4139-4},\turl = {https://dl.acm.org/doi/10.1145/2976749.2978309},\tdoi = {10.1145/2976749.2978309},\tseries = {{CCS} '16},\tabstract = {Cryptocurrencies record transactions in a decentralized data structure called a blockchain. Two of the most popular cryptocurrencies, Bitcoin and Ethereum, support the feature to encode rules or scripts for processing transactions. This feature has evolved to give practical shape to the ideas of smart contracts, or full-fledged programs that are run on blockchains. Recently, Ethereum's smart contract system has seen steady adoption, supporting tens of thousands of contracts, holding millions dollars worth of virtual coins. In this paper, we investigate the security of running smart contracts based on Ethereum in an open distributed network like those of cryptocurrencies. We introduce several new security problems in which an adversary can manipulate smart contract execution to gain profit. These bugs suggest subtle gaps in the understanding of the distributed semantics of the underlying platform. As a refinement, we propose ways to enhance the operational semantics of Ethereum to make contracts less vulnerable. For developers writing contracts for the existing Ethereum system, we build a symbolic execution tool called Oyente to find potential security bugs. Among 19, 336 existing Ethereum contracts, Oyente flags 8, 833 of them as vulnerable, including the {TheDAO} bug which led to a 60 million {US} dollar loss in June 2016. We also discuss the severity of other attacks for several case studies which have source code available and confirm the attacks (which target only our accounts) in the main Ethereum network.},\tpages = {254--269},\tbooktitle = {Proceedings of the 2016 {ACM} {SIGSAC} Conference on Computer and Communications Security},\tpublisher = {Association for Computing Machinery},\tauthor = {Luu, Loi and Chu, Duc-Hiep and Olickel, Hrishi and Saxena, Prateek and Hobor, Aquinas},\turldate = {2023-10-10},\tdate = {2016-10-24},\tkeywords = {smart contract, ethereum, symbolic execution, blockchain, cryptocurrencies},\tfile = {Luu et al_2016_Making Smart Contracts Smarter.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Luu et al_2016_Making Smart Contracts Smarter.pdf:application/pdf},}"
        },
        {
            "id": "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0",
            "name": "Tsankov 2018",
            "author": "Tsankov",
            "year": 2018,
            "title": "Securify: Practical Security Analysis of Smart Contracts",
            "bibtex": "@inproceedings{tsankov_securify_2018,\tlocation = {New York, {NY}, {USA}},\ttitle = {Securify: Practical Security Analysis of Smart Contracts},\tisbn = {978-1-4503-5693-0},\turl = {https://dl.acm.org/doi/10.1145/3243734.3243780},\tdoi = {10.1145/3243734.3243780},\tseries = {{CCS} '18},\tshorttitle = {Securify},\tabstract = {Permissionless blockchains allow the execution of arbitrary programs (called smart contracts), enabling mutually untrusted entities to interact without relying on trusted third parties. Despite their potential, repeated security concerns have shaken the trust in handling billions of {USD} by smart contracts. To address this problem, we present Securify, a security analyzer for Ethereum smart contracts that is scalable, fully automated, and able to prove contract behaviors as safe/unsafe with respect to a given property. Securify's analysis consists of two steps. First, it symbolically analyzes the contract's dependency graph to extract precise semantic information from the code. Then, it checks compliance and violation patterns that capture sufficient conditions for proving if a property holds or not. To enable extensibility, all patterns are specified in a designated domain-specific language. Securify is publicly released, it has analyzed {\\textgreater}18K contracts submitted by its users, and is regularly used to conduct security audits by experts. We present an extensive evaluation of Securify over real-world Ethereum smart contracts and demonstrate that it can effectively prove the correctness of smart contracts and discover critical violations.},\tpages = {67--82},\tbooktitle = {Proceedings of the 2018 {ACM} {SIGSAC} Conference on Computer and Communications Security},\tpublisher = {Association for Computing Machinery},\tauthor = {Tsankov, Petar and Dan, Andrei and Drachsler-Cohen, Dana and Gervais, Arthur and B\u00fcnzli, Florian and Vechev, Martin},\turldate = {2023-10-11},\tdate = {2018-10-15},\tkeywords = {smart contracts, verification, security analysis, stratified datalog},\tfile = {Tsankov et al_2018_Securify.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Tsankov et al_2018_Securify.pdf:application/pdf},}"
        },
        {
            "id": "ref-7565ba0d-ab73-4e24-b4cc-0e6189401227",
            "name": "Praitheeshan 2019",
            "author": "Praitheeshan",
            "year": 2019,
            "title": "Security Analysis Methods on Ethereum Smart Contract Vulnerabilities: A Survey",
            "bibtex": "@misc{praitheeshan_security_2020,    title = {Security Analysis Methods on Ethereum Smart Contract Vulnerabilities: A Survey},    url = {http://arxiv.org/abs/1908.08605},    doi = {10.48550/arXiv.1908.08605},    shorttitle = {Security Analysis Methods on Ethereum Smart Contract Vulnerabilities},    abstract = {Smart contracts are software programs featuring both traditional applications and distributed data storage on blockchains. Ethereum is a prominent blockchain platform with the support of smart contracts. The smart contracts act as autonomous agents in critical decentralized applications and hold a significant amount of cryptocurrency to perform trusted transactions and agreements. Millions of dollars as part of the assets held by the smart contracts were stolen or frozen through the notorious attacks just between 2016 and 2018, such as the {DAO} attack, Parity Multi-Sig Wallet attack, and the integer underflow/overflow attacks. These attacks were caused by a combination of technical flaws in designing and implementing software codes. However, many more vulnerabilities of less severity are to be discovered because of the scripting natures of the Solidity language and the non-updateable feature of blockchains. Hence, we surveyed 16 security vulnerabilities in smart contract programs, and some vulnerabilities do not have a proper solution. This survey aims to identify the key vulnerabilities in smart contracts on Ethereum in the perspectives of their internal mechanisms and software security vulnerabilities. By correlating 16 Ethereum vulnerabilities and 19 software security issues, we predict that many attacks are yet to be exploited. And we have explored many software tools to detect the security vulnerabilities of smart contracts in terms of static analysis, dynamic analysis, and formal verification. This survey presents the security problems in smart contracts together with the available analysis tools and the detection methods. We also investigated the limitations of the tools or analysis methods with respect to the identified security vulnerabilities of the smart contracts.},    number = {{arXiv}:1908.08605},    publisher = {{arXiv}},    author = {Praitheeshan, Purathani and Pan, Lei and Yu, Jiangshan and Liu, Joseph and Doss, Robin},    urldate = {2023-10-11},    date = {2020-09-16},    eprinttype = {arxiv},    eprint = {1908.08605 [cs]},    keywords = {Computer Science - Cryptography and Security},    annotation = {Comment: 21 pages, 9 figures},    file = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\X6DYGLHV\\\\1908.html:text/html;Praitheeshan et al_2020_Security Analysis Methods on Ethereum Smart Contract Vulnerabilities.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Praitheeshan et al_2020_Security Analysis Methods on Ethereum Smart Contract Vulnerabilities.pdf:application/pdf},}"
        },
        {
            "id": "ref-081f0c6a-498a-49c6-aed1-56bfca0e76a9",
            "name": "Zhou 2022",
            "author": "Zhou",
            "year": 2022,
            "title": "The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support",
            "bibtex": "@article{zhou_state_2022,    title = {The State of Ethereum Smart Contracts Security: Vulnerabilities, Countermeasures, and Tool Support},    volume = {2},    rights = {http://creativecommons.org/licenses/by/3.0/},    issn = {2624-800X},    url = {https://www.mdpi.com/2624-800X/2/2/19},    doi = {10.3390/jcp2020019},    shorttitle = {The State of Ethereum Smart Contracts Security},    abstract = {Smart contracts are self-executing programs that run on the blockchain and make it possible for peers to enforce agreements without a third-party guarantee. The smart contract on Ethereum is the fundamental element of decentralized finance with billions of {US} dollars in value. Smart contracts cannot be changed after deployment and hence the code needs to be verified for potential vulnerabilities. However, smart contracts are far from being secure and attacks exploiting vulnerabilities that have led to losses valued in the millions. In this work, we explore the current state of smart contracts security, prevalent vulnerabilities, and security-analysis tool support, through reviewing the latest advancement and research published in the past five years. We study 13 vulnerabilities in Ethereum smart contracts and their countermeasures, and investigate nine security-analysis tools. Our findings indicate that a uniform set of smart contract vulnerability definitions does not exist in research work and bugs pertaining to the same mechanisms sometimes appear with different names. This inconsistency makes it difficult to identify, categorize, and analyze vulnerabilities. We explain some safeguarding approaches and best practices. However, as technology improves new vulnerabilities may emerge. Regarding tool support, {SmartCheck}, {DefectChecker}, {contractWard}, and {sFuzz} tools are better choices in terms of more coverage of vulnerabilities; however, tools such as {NPChecker}, {MadMax}, Osiris, and Sereum target some specific categories of vulnerabilities if required. While {contractWard} is relatively fast and more accurate, it can only detect pre-defined vulnerabilities. The {NPChecker} is slower, however, can find new vulnerability patterns.},    pages = {358--378},    number = {2},    journaltitle = {Journal of Cybersecurity and Privacy},    author = {Zhou, Haozhe and Milani Fard, Amin and Makanju, Adetokunbo},    urldate = {2023-10-06},    date = {2022-06},    langid = {english},    note = {Number: 2Publisher: Multidisciplinary Digital Publishing Institute},    keywords = {security, smart contract, blockchain, solidity},    file = {Zhou et al_2022_The State of Ethereum Smart Contracts Security.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Zhou et al_2022_The State of Ethereum Smart Contracts Security.pdf:application/pdf},}"
        },
        {
            "id": "ref-882e6418-f8f7-4bdf-ba76-764e8031aeb5",
            "name": "Sergey 2017",
            "author": "Sergey",
            "year": 2017,
            "title": "A Concurrent Perspective on Smart Contracts",
            "bibtex": "@misc{sergey_concurrent_2017,\ttitle = {A Concurrent Perspective on Smart Contracts},\turl = {http://arxiv.org/abs/1702.05511},\tdoi = {10.48550/arXiv.1702.05511},\tabstract = {In this paper, we explore remarkable similarities between multi-transactional behaviors of smart contracts in cryptocurrencies such as Ethereum and classical problems of shared-memory concurrency. We examine two real-world examples from the Ethereum blockchain and analyzing how they are vulnerable to bugs that are closely reminiscent to those that often occur in traditional concurrent programs. We then elaborate on the relation between observable contract behaviors and well-studied concurrency topics, such as atomicity, interference, synchronization, and resource ownership. The described contracts-as-concurrent-objects analogy provides deeper understanding of potential threats for smart contracts, indicate better engineering practices, and enable applications of existing state-of-the-art formal verification techniques.},\tnumber = {{arXiv}:1702.05511},\tpublisher = {{arXiv}},\tauthor = {Sergey, Ilya and Hobor, Aquinas},\turldate = {2023-10-13},\tdate = {2017-02-17},\teprinttype = {arxiv},\teprint = {1702.05511 [cs]},\tkeywords = {Computer Science - Distributed, Parallel, and Cluster Computing},\tannotation = {Comment: 15 pages},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\28KS8C9F\\\\1702.html:text/html;Sergey_Hobor_2017_A Concurrent Perspective on Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Sergey_Hobor_2017_A Concurrent Perspective on Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-42a62c3b-819c-4470-a3fb-80889c1b2afd",
            "name": "Chen 2020",
            "author": "Chen",
            "year": 2020,
            "title": "A Survey on Ethereum Systems Security: Vulnerabilities,Attacks, and Defenses",
            "bibtex": "@article{chen_survey_2020,\ttitle = {A Survey on Ethereum Systems Security: Vulnerabilities, Attacks, and Defenses},\tvolume = {53},\tissn = {0360-0300},\turl = {https://dl.acm.org/doi/10.1145/3391195},\tdoi = {10.1145/3391195},\tshorttitle = {A Survey on Ethereum Systems Security},\tabstract = {Blockchain technology is believed by many to be a game changer in many application domains. While the first generation of blockchain technology (i.e., Blockchain 1.0) is almost exclusively used for cryptocurrency, the second generation (i.e., Blockchain 2.0), as represented by Ethereum, is an open and decentralized platform enabling a new paradigm of computing\u2014Decentralized Applications ({DApps}) running on top of blockchains. The rich applications and semantics of {DApps} inevitably introduce many security vulnerabilities, which have no counterparts in pure cryptocurrency systems like Bitcoin. Since Ethereum is a new, yet complex, system, it is imperative to have a systematic and comprehensive understanding on its security from a holistic perspective, which was previously unavailable in the literature. To the best of our knowledge, the present survey, which can also be used as a tutorial, fills this void. We systematize three aspects of Ethereum systems security: vulnerabilities, attacks, and defenses. We draw insights into vulnerability root causes, attack consequences, and defense capabilities, which shed light on future research directions.},\tpages = {67:1--67:43},\tnumber = {3},\tjournaltitle = {{ACM} Computing Surveys},\tshortjournal = {{ACM} Comput. Surv.},\tauthor = {Chen, Huashan and Pendleton, Marcus and Njilla, Laurent and Xu, Shouhuai},\turldate = {2023-10-06},\tdate = {2020-06-12},\tkeywords = {security, smart contract, Blockchain, Ethereum},\tfile = {Chen et al_2020_A Survey on Ethereum Systems Security.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chen et al_2020_A Survey on Ethereum Systems Security.pdf:application/pdf},}"
        },
        {
            "id": "ref-626c648f-6f3f-4720-827a-3a75f01cf062",
            "name": "Chu 2023",
            "author": "Chu",
            "year": 2023,
            "title": "A survey on smart contract vulnerabilities: Data sources, detection and repair",
            "bibtex": "@article{chu_survey_2023,\ttitle = {A survey on smart contract vulnerabilities: Data sources, detection and repair},\tvolume = {159},\tissn = {09505849},\turl = {https://linkinghub.elsevier.com/retrieve/pii/S0950584923000757},\tdoi = {10.1016/j.infsof.2023.107221},\tshorttitle = {A survey on smart contract vulnerabilities},\tabstract = {Smart contracts contain many built-in security features, such as non-immutability once being deployed and non-involvement of third parties for contract execution. These features reduce security risks and enhance users\u2019 trust towards smart contracts. However, smart contract security issues still persist, resulting in huge financial losses. Contract publishers cannot fully cover contract vulnerabilities through contract version updating. These security issues affect further development of blockchain technologies. So far, there are many related studies focusing on smart contract security issues and tend to discuss from a particular perspective (e.g., development cycle, vulnerability attack methods, security detection tools, etc.). However, smart contract security is a complicated issue that needs to be explored from a multi-dimensional perspective. In this paper, we explore smart contract security from the perspectives of vulnerability data sources, vulnerability detection, and vulnerability defense. We first analyze the existing security issues and challenges of smart contracts, investigate the existing vulnerability classification frameworks and common security vulnerabilities, followed by reviewing the existing contract vulnerability injection, detection, and repair methods. We then analyze the performance of existing security methods. Next, we summarize the current status of smart contract security-related research. Finally, we summarize the state of the art and future trends of smart contract security-related research. This paper aims to provide systematic knowledge and references to this research field.},\tpages = {107221},\tjournaltitle = {Information and Software Technology},\tshortjournal = {Information and Software Technology},\tauthor = {Chu, Hanting and Zhang, Pengcheng and Dong, Hai and Xiao, Yan and Ji, Shunhui and Li, Wenrui},\turldate = {2023-10-21},\tdate = {2023-07},\tlangid = {english},\tfile = {Chu et al. - 2023 - A survey on smart contract vulnerabilities Data s.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\N74J5ID8\\\\Chu et al. - 2023 - A survey on smart contract vulnerabilities Data s.pdf:application/pdf},}"
        },
        {
            "id": "ref-45b45974-3712-4560-9641-3afb76b29d3f",
            "name": "Rameder 2021",
            "author": "Rameder",
            "year": 2021,
            "title": "Systematic review of ethereum smart contract security vulnerabilities, analysis methods and tools",
            "bibtex": "@thesis{rameder_systematic_2021,\ttitle = {Systematic review of ethereum smart contract security vulnerabilities, analysis methods and tools},\turl = {https://repositum.tuwien.at/handle/20.500.12708/18323},\tabstract = {Smart Contracts, die auf der Ethereum Blockchain eingesetzt werden, halten Verm\u00f6genswerte im Wert von Milliarden von {USD}. Ethereum ist derzeit die am meisten genutzte Plattform f\u00fcr Smart Contracts. Gemessen an der Marktkapitalisierung ist Ethereum nach Bitcoin die zweitgr\u00f6\u00dfte Blockchain mit einem stetig wachsenden Marktanteil. Da Smart Contracts nach der Bereitstellung nicht mehr ge\u00e4ndert werden k\u00f6nnen, ist es von entscheidender Bedeutung, dass der Code auf potenzielle Schwachstellen \u00fcberpr\u00fcft wird, die erhebliche finanzielle Verluste verursachen und das Vertrauen besch\u00e4digen k\u00f6nnen. Zu diesem Zweck wurden zahlreiche Tools entwickelt, und es wird immer mehr Literatur \u00fcber Schwachstellen und Erkennungsmethoden zu diesem Thema ver\u00f6ffentlicht. Regelm\u00e4\u00dfige Literaturanalysen sind unerl\u00e4sslich, um mit der raschen Entwicklung auf diesem Gebiet Schritt halten zu k\u00f6nnen. Diese Arbeit pr\u00e4sentiert eine systematische Literatur- und Toolanalyse, die einen strukturierten, umfassenden \u00dcberblick \u00fcber den aktuellen Stand der Technik von Tools, Smart Contract Schwachstellen und Erkennungsmethoden bietet. Die Einhaltung und Protokollierung einer pr\u00e4zisen Evaluierungsstrategie, Such- und Relevanzpr\u00fcfungen gew\u00e4hrleisten umfassende und reproduzierbare Ergebnisse. Nach Bereinigung der Referenzen, Entfernung von Duplikaten sowie Anwendung von definierten Ein- und Ausschlusskriterien, f\u00fchrte die initiale Literatursuche zu einer ersten Identifikation von 303 Publikationen. Auf Basis einer Qualit\u00e4tsbewertung auf Grundlage intrinsischer und kontextbezogener Datenqualit\u00e4tsmetriken wurden schlie\u00dflich 149 Prim\u00e4rstudien, 38 Surveys und 8 systematische Literaturanalysen f\u00fcr die Datenextraktion ausgew\u00e4hlt. Die Synthese beinhaltet eine umfassende Klassifizierung von Smart Contract Schwachstellen, eine neue Taxonomie der Eigenschaften und verwendeten Methoden von Analysetools sowie einen \u00dcberblick \u00fcber Tools, einschlie\u00dflich eines strukturierten Vergleichs auf Grundlage der Taxonomie. Schlie\u00dflich wird eine konsolidierte Sammlung ver\u00f6ffentlichter und verf\u00fcgbarer Benchmark-Datens\u00e4tze bereitgestellt.},\tinstitution = {Wien},\ttype = {Thesis},\tauthor = {Rameder, Heidelinde},\turldate = {2023-10-18},\tdate = {2021},\tlangid = {english},\tdoi = {10.34726/hss.2021.86784},\tnote = {Accepted: 2021-09-03T13:43:34Z},\tfile = {Rameder_2021_Systematic review of ethereum smart contract security vulnerabilities, analysis.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Rameder_2021_Systematic review of ethereum smart contract security vulnerabilities, analysis.pdf:application/pdf},}"
        },
        {
            "id": "ref-5f98504b-a375-4faf-bdef-dca79ad79941",
            "name": "securify 2.0 2021",
            "author": "securify 2.0",
            "year": 2021,
            "title": "Securify Supported vulnerabilities",
            "bibtex": "@software{noauthor_eth-srisecurify2_2024,\ttitle = {eth-sri/securify2},\trights = {Apache-2.0},\turl = {https://github.com/eth-sri/securify2},\tabstract = {Securify v2.0},\tpublisher = {{SRI} Lab, {ETH} Zurich},\turldate = {2024-02-03},\tdate = {2024-01-30},\tnote = {original-date: 2020-01-22T15:03:58Z},\tkeywords = {security, ethereum, vulnerability, solidity, datalog, smart-contract, static-analysis},}"
        },
        {
            "id": "ref-0e406f47-6eb7-4e0d-a9ad-d0000c7e95e9",
            "name": "Grishchenko 2018",
            "author": "Grishchenko",
            "year": 2018,
            "title": "A Semantic Framework for the Security Analysis of Ethereum smart contracts",
            "bibtex": "@incollection{grishchenko_semantic_2018,\ttitle = {A Semantic Framework for the Security Analysis of Ethereum smart contracts},\tvolume = {10804},\turl = {http://arxiv.org/abs/1802.08660},\tabstract = {Smart contracts are programs running on cryptocurrency (e.g., Ethereum) blockchains, whose popularity stem from the possibility to perform financial transactions, such as payments and auctions, in a distributed environment without need for any trusted third party. Given their financial nature, bugs or vulnerabilities in these programs may lead to catastrophic consequences, as witnessed by recent attacks. Unfortunately, programming smart contracts is a delicate task that requires strong expertise: Ethereum smart contracts are written in Solidity, a dedicated language resembling {JavaScript}, and shipped over the blockchain in the {EVM} bytecode format. In order to rigorously verify the security of smart contracts, it is of paramount importance to formalize their semantics as well as the security properties of interest, in particular at the level of the bytecode being executed. In this paper, we present the first complete small-step semantics of {EVM} bytecode, which we formalize in the F* proof assistant, obtaining executable code that we successfully validate against the official Ethereum test suite. Furthermore, we formally define for the first time a number of central security properties for smart contracts, such as call integrity, atomicity, and independence from miner controlled parameters. This formalization relies on a combination of hyper- and safety properties. Along this work, we identified various mistakes and imprecisions in existing semantics and verification tools for Ethereum smart contracts, thereby demonstrating once more the importance of rigorous semantic foundations for the design of security verification techniques.},\tpages = {243--269},\tauthor = {Grishchenko, Ilya and Maffei, Matteo and Schneidewind, Clara},\turldate = {2023-10-12},\tdate = {2018},\tdoi = {10.1007/978-3-319-89722-6_10},\teprinttype = {arxiv},\teprint = {1802.08660 [cs]},\tkeywords = {Computer Science - Cryptography and Security},\tannotation = {Comment: The {EAPLS} Best Paper Award at {ETAPS}},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\YF9CADUG\\\\1802.html:text/html;Grishchenko et al_2018_A Semantic Framework for the Security Analysis of Ethereum smart contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Grishchenko et al_2018_A Semantic Framework for the Security Analysis of Ethereum smart contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-1bbefb67-bac4-484d-b11c-7f75925a5f63",
            "name": "Kaleem 2020",
            "author": "Kaleem",
            "year": 2020,
            "title": "Vyper: A Security Comparison with Solidity Based on Common Vulnerabilities",
            "bibtex": "@inproceedings{kaleem_vyper_2020,\ttitle = {Vyper: A Security Comparison with Solidity Based on Common Vulnerabilities},\turl = {https://ieeexplore.ieee.org/abstract/document/9223278},\tdoi = {10.1109/BRAINS49436.2020.9223278},\tshorttitle = {Vyper},\tabstract = {Vyper has been proposed as a new high-level language for Ethereum smart contract development due to numerous security vulnerabilities and attacks witnessed on contracts written in Solidity since the system\u2019s inception. Vyper aims to address these vulnerabilities by providing a language that focuses on simplicity, auditability and security. We present a survey where we study how well-known and commonly-encountered vulnerabilities in Solidity feature in Vyper\u2019s development environment. We analyze all such vulnerabilities individually and classify them into five groups based on their status in Vyper. To the best of our knowledge, our survey is the first attempt to study security vulnerabilities in Vyper.},\teventtitle = {2020 2nd Conference on Blockchain Research \\& Applications for Innovative Networks and Services ({BRAINS})},\tpages = {107--111},\tbooktitle = {2020 2nd Conference on Blockchain Research \\& Applications for Innovative Networks and Services ({BRAINS})},\tauthor = {Kaleem, Mudabbir and Mavridou, Anastasia and Laszka, Aron},\turldate = {2023-10-10},\tdate = {2020-09},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\XZ2F4JQE\\\\9223278.html:text/html;Kaleem et al_2020_Vyper.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Kaleem et al_2020_Vyper.pdf:application/pdf},}"
        },
        {
            "id": "ref-d801f44b-4f76-4fa0-bf04-aff0effe508d",
            "name": "Dingman 2019",
            "author": "Dingman",
            "year": 2019,
            "title": "Defects and Vulnerabilities in Smart Contracts, a Classification using the NIST Bugs Framework",
            "bibtex": "@article{dingman_defects_2019,\ttitle = {Defects and Vulnerabilities in Smart Contracts, a Classification using the {NIST} Bugs Framework},\tvolume = {7},\tissn = {2211-7946},\turl = {https://www.atlantis-press.com/journals/ijndc/125913574},\tdoi = {10.2991/ijndc.k.190710.003},\tabstract = {Rising to popularity in the last decade, blockchain technology has become the preferred platform for the transfer of digital currency. Unfortunately, many of these environments are rife with vulnerabilities exploited by financially motivated attackers. Worse yet, is that a structured analysis and classification of these vulnerabilities is lacking. In...},\tpages = {121--132},\tnumber = {3},\tjournaltitle = {International Journal of Networked and Distributed Computing},\tauthor = {Dingman, Wesley and Cohen, Aviel and Ferrara, Nick and Lynch, Adam and Jasinski, Patrick and Black, Paul E. and Deng, Lin},\turldate = {2023-10-10},\tdate = {2019-07-23},\tlangid = {english},\tnote = {Publisher: Atlantis Press},\tfile = {Dingman et al_2019_Defects and Vulnerabilities in Smart Contracts, a Classification using the NIST.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Dingman et al_2019_Defects and Vulnerabilities in Smart Contracts, a Classification using the NIST.pdf:application/pdf},}"
        },
        {
            "id": "ref-741d52ea-e5eb-48cd-b3b7-5fac5cae6931",
            "name": "Atzei 2017",
            "author": "Atzei",
            "year": 2017,
            "title": "A Survey of Attacks on Ethereum Smart Contracts (SoK)",
            "bibtex": "@inproceedings{atzei_survey_2017,    location = {Berlin, Heidelberg},    title = {A Survey of Attacks on Ethereum Smart Contracts ({SoK})},    isbn = {978-3-662-54455-6},    doi = {10.1007/978-3-662-54455-6_8},    series = {Lecture Notes in Computer Science},    abstract = {Smart contracts are computer programs that can be correctly executed by a network of mutually distrusting nodes, without the need of an external trusted authority. Since smart contracts handle and transfer assets of considerable value, besides their correct execution it is also crucial that their implementation is secure against attacks which aim at stealing or tampering the assets. We study this problem in Ethereum, the most well-known and used framework for smart contracts so far. We analyse the security vulnerabilities of Ethereum smart contracts, providing a taxonomy of common programming pitfalls which may lead to vulnerabilities. We show a series of attacks which exploit these vulnerabilities, allowing an adversary to steal money or cause other damage.},    pages = {164--186},    booktitle = {Principles of Security and Trust},    publisher = {Springer},    author = {Atzei, Nicola and Bartoletti, Massimo and Cimoli, Tiziana},    editor = {Maffei, Matteo and Ryan, Mark},    date = {2017},    langid = {english},    keywords = {Consensus Protocol, Direct Call, Honest Node, Longe Branch, Security Vulnerability},    file = {Atzei et al_2017_A Survey of Attacks on Ethereum Smart Contracts (SoK).pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Atzei et al_2017_A Survey of Attacks on Ethereum Smart Contracts (SoK).pdf:application/pdf},}"
        },
        {
            "id": "ref-f5b37a3d-09a9-47a5-8782-a6faba5ce73c",
            "name": "Perez 2021",
            "author": "Perez",
            "year": 2021,
            "title": "Smart Contract Vulnerabilities: Vulnerable Does Not Imply Exploited",
            "bibtex": "@article{perez_smart_nodate,\ttitle = {Smart Contract Vulnerabilities: Vulnerable Does Not Imply Exploited},\tabstract = {In recent years, we have seen a great deal of both academic and practical interest in the topic of vulnerabilities in smart contracts, particularly those developed for the Ethereum blockchain. While most of the work has focused on detecting vulnerable contracts, in this paper, we focus on \ufb01nding how many of these vulnerable contracts have actually been exploited. We survey the 23,327 vulnerable contracts reported by six recent academic projects and \ufb01nd that, despite the amounts at stake, only 1.98\\% of them have been exploited since deployment. This corresponds to at most 8,487 {ETH} ({\\textasciitilde}1.7 million {USD}1), or only 0.27\\% of the 3 million {ETH} (600 million {USD}) at stake. We explain these results by demonstrating that the funds are very concentrated in a small number of contracts which are not exploitable in practice.},\tauthor = {Perez, Daniel and Livshits, Benjamin},\tlangid = {english},\tfile = {Perez e Livshits - Smart Contract Vulnerabilities Vulnerable Does No.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\XSEGDE67\\\\Perez e Livshits - Smart Contract Vulnerabilities Vulnerable Does No.pdf:application/pdf},}"
        },
        {
            "id": "ref-4bef00cd-cdfc-4e3b-94ae-f3733e680043",
            "name": "Chen 2022",
            "author": "Chen",
            "year": 2022,
            "title": "Defining Smart Contract Defects on Ethereum",
            "bibtex": "@article{chen_defining_2022,\ttitle = {Defining Smart Contract Defects on Ethereum},\tvolume = {48},\tissn = {1939-3520},\turl = {https://ieeexplore.ieee.org/document/9072659},\tdoi = {10.1109/TSE.2020.2989002},\tabstract = {Smart contracts are programs running on a blockchain. They are immutable to change, and hence can not be patched for bugs once deployed. Thus it is critical to ensure they are bug-free and well-designed before deployment. A Contract defect is an error, flaw or fault in a smart contract that causes it to produce an incorrect or unexpected result, or to behave in unintended ways. The detection of contract defects is a method to avoid potential bugs and improve the design of existing code. Since smart contracts contain numerous distinctive features, such as the gas system. decentralized, it is important to find smart contract specified defects. To fill this gap, we collected smart-contract-related posts from Ethereum {StackExchange}, as well as real-world smart contracts. We manually analyzed these posts and contracts; using them to define 20 kinds of contract defects. We categorized them into indicating potential security, availability, performance, maintainability and reusability problems. To validate if practitioners consider these contract as harmful, we created an online survey and received 138 responses from 32 different countries. Feedback showed these contract defects are harmful and removing them would improve the quality and robustness of smart contracts. We manually identified our defined contract defects in 587 real world smart contract and publicly released our dataset. Finally, we summarized 5 impacts caused by contract defects. These help developers better understand the symptoms of the defects and removal priority.},\tpages = {327--345},\tnumber = {1},\tjournaltitle = {{IEEE} Transactions on Software Engineering},\tauthor = {Chen, Jiachi and Xia, Xin and Lo, David and Grundy, John and Luo, Xiapu and Chen, Ting},\turldate = {2023-11-08},\tdate = {2022-01},\tnote = {Conference Name: {IEEE} Transactions on Software Engineering},\tfile = {Chen et al_2022_Defining Smart Contract Defects on Ethereum.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chen et al_2022_Defining Smart Contract Defects on Ethereum.pdf:application/pdf;IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\K79Q82PF\\\\9072659.html:text/html},}"
        },
        {
            "id": "ref-ca50a675-bb9b-42a0-a2ab-323491369c6b",
            "name": "Kadenzipfel 2023",
            "author": "Kadenzipfel",
            "year": 2023,
            "title": "smart contract-vulnerabilities: A collection of smart contract vulnerabilities along with prevention methods",
            "bibtex": "@software{kaden_smart_2023,\ttitle = {Smart Contract Vulnerabilities},\turl = {https://github.com/kadenzipfel/smart-contract-vulnerabilities},\tabstract = {A collection of smart contract vulnerabilities along with prevention methods},\tauthor = {kaden},\turldate = {2023-10-12},\tdate = {2023-10-10},\tnote = {original-date: 2019-10-16T17:41:22Z},\tkeywords = {security, ethereum, blockchain, solidity},}"
        },
        {
            "id": "ref-b25cacf4-a035-4d01-8fa2-321e5a368376",
            "name": "Almakhour 2023",
            "author": "Almakhour",
            "year": 2023,
            "title": "A formal verification approach for composite smart contracts security using FSM",
            "bibtex": "@article{almakhour_formal_2023,\ttitle = {A formal verification approach for composite smart contracts security using {FSM}},\tvolume = {35},\tissn = {13191578},\turl = {https://linkinghub.elsevier.com/retrieve/pii/S1319157822003111},\tdoi = {10.1016/j.jksuci.2022.08.029},\tabstract = {Many of today\u2019s companies use Smart Contracts to represent and execute their business processes. Smart contracts are self-executed programs running over blockchain. In this context, composite smart contracts are used to represent collaborative business processes. A composite smart contract is a smart contract that needs to execute other contracts using external calls to achieve its tasks. Composite smart contracts, through the use of external calls and the execution of other smart contracts that might belong to other owners or companies, bring many challenges with regard to security requirements. As a result, special efforts must be done to ensure composite smart contracts security veri\ufb01cation. In this paper, we propose a novel approach to verify the security and the correctness of the composite smart contracts written in solidity in Ethereum blockchain. This approach is based on the \ufb01nite state machine models and model checking method for modeling and verifying the composite smart contracts respectively. We consider seven security properties as well as the security issues that depend on the contract context to be checked in the composite smart contract. For this, we provide two different yet complementary types of veri\ufb01cation. The \ufb01rst type of veri\ufb01cation is applied to all smart contracts with properties called in our approach \u2018\u2018standard properties\u201d that represent the generic ones, while the second type considers the contextdependent properties that we called \u2018\u2018speci\ufb01c properties\u201d varying from one smart contract to another. Finally, we express all properties using computation tree logic formulae and we use the {nuXmv} symbolic model checker to verify the model against all properties. This approach is validated using a different set of solidity smart contracts.},\tpages = {70--86},\tnumber = {1},\tjournaltitle = {Journal of King Saud University - Computer and Information Sciences},\tshortjournal = {Journal of King Saud University - Computer and Information Sciences},\tauthor = {Almakhour, Mouhamad and Sliman, Layth and Samhat, Abed Ellatif and Mellouk, Abdelhamid},\turldate = {2023-10-21},\tdate = {2023-01},\tlangid = {english},\tfile = {Almakhour et al. - 2023 - A formal verification approach for composite smart.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\PF8Q325H\\\\Almakhour et al. - 2023 - A formal verification approach for composite smart.pdf:application/pdf},}"
        },
        {
            "id": "ref-5d08f440-7f46-42c5-a649-4bc9ecc15903",
            "name": "Chen 2017",
            "author": "Chen",
            "year": 2017,
            "title": "Under-optimized smart contracts devour your money (GASPER)",
            "bibtex": "@inproceedings{chen_under-optimized_2017,\ttitle = {Under-optimized smart contracts devour your money},\turl = {https://ieeexplore.ieee.org/document/7884650},\tdoi = {10.1109/SANER.2017.7884650},\tabstract = {Smart contracts are full-fledged programs that run on blockchains (e.g., Ethereum, one of the most popular blockchains). In Ethereum, gas (in Ether, a cryptographic currency like Bitcoin) is the execution fee compensating the computing resources of miners for running smart contracts. However, we find that under-optimized smart contracts cost more gas than necessary, and therefore the creators or users will be overcharged. In this work, we conduct the first investigation on Solidity, the recommended compiler, and reveal that it fails to optimize gas-costly programming patterns. In particular, we identify 7 gas-costly patterns and group them to 2 categories. Then, we propose and develop {GASPER}, a new tool for automatically locating gas-costly patterns by analyzing smart contracts' bytecodes. The preliminary results on discovering 3 representative patterns from 4,240 real smart contracts show that 93.5\\%, 90.1\\% and 80\\% contracts suffer from these 3 patterns, respectively.},\teventtitle = {2017 {IEEE} 24th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},\tpages = {442--446},\tbooktitle = {2017 {IEEE} 24th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},\tauthor = {Chen, Ting and Li, Xiaoqi and Luo, Xiapu and Zhang, Xiaosong},\turldate = {2023-10-12},\tdate = {2017-02},\tfile = {Chen et al_2017_Under-optimized smart contracts devour your money.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chen et al_2017_Under-optimized smart contracts devour your money.pdf:application/pdf;IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\VXX7MJK4\\\\7884650.html:text/html},}"
        },
        {
            "id": "ref-4084c61e-d239-477e-b1e5-f0c2f4230be1",
            "name": "Trail of Bits 2023",
            "author": "Trail of Bits",
            "year": 2023,
            "title": "(Not So) Smart Contractsexamples of common Ethereum smart contract vulnerabilities (Solidity and EVM), including code from real smart contracts",
            "bibtex": "@software{noauthor_cryticnot-so-smart-contracts_2024,\ttitle = {crytic/not-so-smart-contracts},\trights = {Apache-2.0},\turl = {https://github.com/crytic/not-so-smart-contracts},\tabstract = {Examples of Solidity security issues},\tpublisher = {Crytic},\turldate = {2024-02-03},\tdate = {2024-02-02},\tnote = {original-date: 2017-08-28T17:26:15Z},\tkeywords = {ethereum, solidity, vulnerabilities},}"
        },
        {
            "id": "ref-c7d9c1f8-3ebb-42e0-b19c-3863f8e10bd3",
            "name": "DASP Top10 2018",
            "author": "DASP Top10",
            "year": 2018,
            "title": "Decentralized Application Security Project (DASP) collection - NCC Group",
            "bibtex": "@online{noauthor_dasp_nodate,\ttitle = {{DASP} - {TOP} 10},\turl = {https://dasp.co/},\turldate = {2024-02-03},\tfile = {DASP - TOP 10:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\MSN8BF43\\\\dasp.co.html:text/html},}"
        },
        {
            "id": "ref-385a8c91-1c27-447b-9b70-8d13ebcfbedc",
            "name": "Chen 2023",
            "author": "Chen",
            "year": 2023,
            "title": "To Healthier Ethereum: A Comprehensive and Iterative Smart Contract Weakness Enumeration (SWE)",
            "bibtex": "@misc{chen_healthier_2023,\ttitle = {To Healthier Ethereum: A Comprehensive and Iterative Smart Contract Weakness Enumeration},\turl = {http://arxiv.org/abs/2308.10227},\tshorttitle = {To Healthier Ethereum},\tabstract = {With the increasing popularity of cryptocurrencies and blockchain technology, smart contracts have become a prominent feature in developing decentralized applications. However, these smart contracts are susceptible to vulnerabilities that hackers can exploit, resulting in significant financial losses. In response to this growing concern, various initiatives have emerged. Notably, the {SWC} vulnerability list played an important role in raising awareness and understanding of smart contract weaknesses. However, the {SWC} list lacks maintenance and has not been updated with new vulnerabilities since 2020. To address this gap, this paper introduces the Smart Contract Weakness Enumeration ({SWE}), a comprehensive and practical vulnerability list up until 2023. We collect 273 vulnerability descriptions from 86 top conference papers and journal papers, employing open card sorting techniques to deduplicate and categorize these descriptions. This process results in the identification of 40 common contract weaknesses, which are further classified into 20 sub-research fields through thorough discussion and analysis. {SWE} provides a systematic and comprehensive list of smart contract vulnerabilities, covering existing and emerging vulnerabilities in the last few years. Moreover, {SWE} is a scalable, continuously iterative program. We propose two update mechanisms for the maintenance of {SWE}. Regular updates involve the inclusion of new vulnerabilities from future top papers, while irregular updates enable individuals to report new weaknesses for review and potential addition to {SWE}.},\tnumber = {{arXiv}:2308.10227},\tpublisher = {{arXiv}},\tauthor = {Chen, Jiachi and Huang, Mingyuan and Lin, Zewei and Zheng, Peilin and Zheng, Zibin},\turldate = {2023-11-08},\tdate = {2023-08-20},\teprinttype = {arxiv},\teprint = {2308.10227 [cs]},\tkeywords = {Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\EKRDYBJ6\\\\2308.html:text/html;Chen et al_2023_To Healthier Ethereum.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chen et al_2023_To Healthier Ethereum.pdf:application/pdf},}"
        },
        {
            "id": "ref-04f670dc-13e8-4ca2-8410-a3382d4a164b",
            "name": "Amiet 2021",
            "author": "Amiet",
            "year": 2021,
            "title": "Blockchain Vulnerabilities in Practice",
            "bibtex": "@article{amiet_blockchain_2021,\ttitle = {Blockchain Vulnerabilities in Practice},\tvolume = {2},\turl = {https://dl.acm.org/doi/10.1145/3407230},\tdoi = {10.1145/3407230},\tabstract = {Blockchains are not invulnerable. There are known vulnerabilities in various blockchain ecosystem components. This field note describes some vulnerabilities observed in smart contracts and node software, their exploitation, and how to avoid them, with a focus on the Ethereum ecosystem.},\tpages = {8:1--8:7},\tnumber = {2},\tjournaltitle = {Digital Threats: Research and Practice},\tshortjournal = {Digital Threats},\tauthor = {Amiet, Nils},\turldate = {2023-11-08},\tdate = {2021-03-26},\tkeywords = {security, smart contracts, ethereum, Blockchain},\tfile = {Amiet_2021_Blockchain Vulnerabilities in Practice.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Amiet_2021_Blockchain Vulnerabilities in Practice.pdf:application/pdf},}"
        },
        {
            "id": "ref-a20cdd64-3257-43c1-bb9c-92ea756c7f7f",
            "name": "Tyurin 2019",
            "author": "Tyurin",
            "year": 2019,
            "title": "Overview of the Languages for Safe Smart Contract Programming",
            "bibtex": "@article{__2019,\ttitle = {\u041e\u0431\u0437\u043e\u0440 \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432},\tvolume = {31},\trights = {\u0410\u0432\u0442\u043e\u0440\u044b, \u043f\u0443\u0431\u043b\u0438\u043a\u0443\u044e\u0449\u0438\u0435 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0436\u0443\u0440\u043d\u0430\u043b\u0435, \u0441\u043e\u0433\u043b\u0430\u0448\u0430\u044e\u0442\u0441\u044f \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c:  \u0410\u0432\u0442\u043e\u0440\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442 \u0437\u0430 \u0441\u043e\u0431\u043e\u0439 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0430 \u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0443 \u0438 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0436\u0443\u0440\u043d\u0430\u043b\u0443 \u043f\u0440\u0430\u0432\u043e \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0438 Creative Commons Attribution License , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0441 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0430\u0432\u0442\u043e\u0440\u043e\u0432 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0438 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0432 \u044d\u0442\u043e\u043c \u0436\u0443\u0440\u043d\u0430\u043b\u0435. \u0410\u0432\u0442\u043e\u0440\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442 \u043f\u0440\u0430\u0432\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0451\u043d\u043d\u043e\u0441\u0442\u0438, \u043a\u0430\u0441\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0435-\u044d\u043a\u0441\u043a\u043b\u044e\u0437\u0438\u0432\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0432\u0435\u0440\u0441\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043d\u043e\u043c \u0437\u0434\u0435\u0441\u044c \u0432\u0438\u0434\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0440\u0430\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435 \u0435\u0435 \u0432 \u0438\u043d\u0441\u0442\u0438\u0442\u0443\u0442\u0441\u043a\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0432 \u043a\u043d\u0438\u0433\u0435), \u0441\u043e \u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u043d\u0430 \u0435\u0435 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e \u0432 \u044d\u0442\u043e\u043c \u0436\u0443\u0440\u043d\u0430\u043b\u0435. \u0410\u0432\u0442\u043e\u0440\u044b \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u0430\u0432\u043e \u0440\u0430\u0437\u043c\u0435\u0449\u0430\u0442\u044c \u0438\u0445 \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 \u0441\u0435\u0442\u0438 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432 \u0438\u043d\u0441\u0442\u0438\u0442\u0443\u0442\u0441\u043a\u043e\u043c \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 \u0438\u043b\u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435) \u0434\u043e \u0438 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c \u0436\u0443\u0440\u043d\u0430\u043b\u043e\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u043a \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0438\u0432\u043d\u043e\u043c\u0443 \u043e\u0431\u0441\u0443\u0436\u0434\u0435\u043d\u0438\u044e \u0438 \u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0441\u0441\u044b\u043b\u043e\u043a \u043d\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 (\u0421\u043c. The Effect of Open Access ).},\tissn = {2220-6426},\turl = {https://ispranproceedings.elpub.ru/jour/article/view/1185},\tdoi = {10.15514/ISPRAS-2019-31(3)-13},\tabstract = {\u041d\u0430\u0443\u0447\u043d\u044b\u0439 \u0440\u0435\u0446\u0435\u043d\u0437\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u0436\u0443\u0440\u043d\u0430\u043b, \u0441\u043f\u0438\u0441\u043e\u043a \u0412\u0410\u041a},\tpages = {157--176},\tnumber = {3},\tjournaltitle = {\u0422\u0440\u0443\u0434\u044b \u0418\u043d\u0441\u0442\u0438\u0442\u0443\u0442\u0430 \u0441\u0438\u0441\u0442\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0420\u0410\u041d},\tauthor = {\u0422\u044e\u0440\u0438\u043d, \u0410\u043b\u0435\u043a\u0441\u0435\u0439 \u0412\u0430\u043b\u0435\u0440\u044c\u0435\u0432\u0438\u0447 and \u0422\u044e\u043b\u044f\u043d\u0434\u0438\u043d, \u0418\u0432\u0430\u043d \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u043e\u0432\u0438\u0447 and \u041c\u0430\u043b\u044c\u0446\u0435\u0432, \u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440 and \u041a\u0438\u0440\u0438\u043b\u0435\u043d\u043a\u043e, \u042f\u043a\u043e\u0432 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u043e\u0432\u0438\u0447 and \u0411\u0435\u0440\u0435\u0437\u0443\u043d, \u0414\u0430\u043d\u0438\u0438\u043b \u0410\u043d\u0434\u0440\u0435\u0435\u0432\u0438\u0447},\turldate = {2023-10-10},\tdate = {2019-08-04},\tlangid = {english},\tnote = {Number: 3},\tfile = {\u0422\u044e\u0440\u0438\u043d et al_2019_\u041e\u0431\u0437\u043e\u0440 \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\\u0422\u044e\u0440\u0438\u043d et al_2019_\u041e\u0431\u0437\u043e\u0440 \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043b\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u043c\u0430\u0440\u0442-\u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u043e\u0432.pdf:application/pdf},}"
        },
        {
            "id": "ref-3e64d94e-d822-4ba3-a935-14e534f8d629",
            "name": "Nikolic 2018",
            "author": "Nikolic",
            "year": 2018,
            "title": "Finding The Greedy, Prodigal, and Suicidal Contracts at Scale (MAIAN)",
            "bibtex": "@misc{nikolic_finding_2018,\ttitle = {Finding The Greedy, Prodigal, and Suicidal Contracts at Scale},\turl = {http://arxiv.org/abs/1802.06038},\tdoi = {10.48550/arXiv.1802.06038},\tabstract = {Smart contracts---stateful executable objects hosted on blockchains like Ethereum---carry billions of dollars worth of coins and cannot be updated once deployed. We present a new systematic characterization of a class of trace vulnerabilities, which result from analyzing multiple invocations of a contract over its lifetime. We focus attention on three example properties of such trace vulnerabilities: finding contracts that either lock funds indefinitely, leak them carelessly to arbitrary users, or can be killed by anyone. We implemented {MAIAN}, the first tool for precisely specifying and reasoning about trace properties, which employs inter-procedural symbolic analysis and concrete validator for exhibiting real exploits. Our analysis of nearly one million contracts flags 34,200 (2,365 distinct) contracts vulnerable, in 10 seconds per contract. On a subset of3,759 contracts which we sampled for concrete validation and manual analysis, we reproduce real exploits at a true positive rate of 89\\%, yielding exploits for3,686 contracts. Our tool finds exploits for the infamous Parity bug that indirectly locked 200 million dollars worth in Ether, which previous analyses failed to capture.},\tnumber = {{arXiv}:1802.06038},\tpublisher = {{arXiv}},\tauthor = {Nikolic, Ivica and Kolluri, Aashish and Sergey, Ilya and Saxena, Prateek and Hobor, Aquinas},\turldate = {2023-10-12},\tdate = {2018-03-14},\teprinttype = {arxiv},\teprint = {1802.06038 [cs]},\tkeywords = {Computer Science - Cryptography and Security},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\99M9BVGB\\\\1802.html:text/html;Nikolic et al_2018_Finding The Greedy, Prodigal, and Suicidal Contracts at Scale.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Nikolic et al_2018_Finding The Greedy, Prodigal, and Suicidal Contracts at Scale.pdf:application/pdf},}"
        },
        {
            "id": "ref-540a461f-dc72-4856-b65d-700ae3edaa5e",
            "name": "Hu 2023",
            "author": "Hu",
            "year": 2023,
            "title": "Detect Defects of Solidity Smart Contract Based on the Knowledge Graph (SoliDetector)",
            "bibtex": "@article{hu_detect_2023,\ttitle = {Detect Defects of Solidity Smart Contract Based on the Knowledge Graph},\tissn = {0018-9529, 1558-1721},\turl = {https://ieeexplore.ieee.org/document/10025570/},\tdoi = {10.1109/TR.2023.3233999},\tabstract = {Smart contract security is one of the core issues in any application based on blockchain. There are many techniques focusing on smart contract security, however, due to the diversity of Solidity versions and limitations of detection time, it is dif\ufb01cult for them to comprehensively localize defects in different versions of smart contracts. In this article, we propose a static defect detection method based on the knowledge graph of the Solidity language and present a defect detection tool called {SoliDetector}. First, we de\ufb01ne the ontology layer of the knowledge graph and construct the instance layer in which syntactic and logical relationships are captured. Second, we introduce the defect pattern to describe each defect and design inference rules to infer complex relationships and judge whether a defect exists. Finally, we localize defects by executing {SPARQL} queries. {SoliDetector} can support the detection of 20 kinds of defects and the automatic {SPARQL} query generation. We conducted several experiments on multiple datasets. {SoliDetector} obtains a high F-score (i.e., 92.97\\% on Dataset1 and 91.54\\% on the {SmartBug} dataset). To compare {SoliDetector} with {SmartCheck}, Slither, and Mythril, we conducted experiments on a labeled benchmark Dataset3 and real-world contracts. {SoliDetector} has a high F-score of 94.04\\% and is faster than other tools with an average time of 0.37 s for each contract.},\tpages = {1--17},\tjournaltitle = {{IEEE} Transactions on Reliability},\tshortjournal = {{IEEE} Trans. Rel.},\tauthor = {Hu, Tianyuan and Li, Bixin and Pan, Zhenyu and Qian, Chen},\turldate = {2023-11-07},\tdate = {2023},\tlangid = {english},\tfile = {Hu et al. - 2023 - Detect Defects of Solidity Smart Contract Based on.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\Q3Q6TNW9\\\\Hu et al. - 2023 - Detect Defects of Solidity Smart Contract Based on.pdf:application/pdf},}"
        },
        {
            "id": "ref-1415a694-6569-495f-b7ad-8aec77e0175d",
            "name": "Sun 2020",
            "author": "Sun",
            "year": 2020,
            "title": "A Formal Verification Framework for Security Issues of Blockchain Smart Contracts",
            "bibtex": "@article{sun_formal_2020,\ttitle = {A Formal Verification Framework for Security Issues of Blockchain Smart Contracts},\tvolume = {9},\trights = {http://creativecommons.org/licenses/by/3.0/},\tissn = {2079-9292},\turl = {https://www.mdpi.com/2079-9292/9/2/255},\tdoi = {10.3390/electronics9020255},\tabstract = {Blockchain technology has attracted more and more attention from academia and industry recently. Ethereum, which uses blockchain technology, is a distributed computing platform and operating system. Smart contracts are small programs deployed to the Ethereum blockchain for execution. Errors in smart contracts will lead to huge losses. Formal verification can provide a reliable guarantee for the security of blockchain smart contracts. In this paper, the formal method is applied to inspect the security issues of smart contracts. We summarize five kinds of security issues in smart contracts and present formal verification methods for these issues, thus establishing a formal verification framework that can effectively verify the security vulnerabilities of smart contracts. Furthermore, we present a complete formal verification of the Binance Coin ({BNB}) contract. It shows how to formally verify the above security issues based on the formal verification framework in a specific smart contract. All the proofs are checked formally using the Coq proof assistant in which contract model and specification are formalized. The formal work of this paper has a variety of essential applications, such as the verification of blockchain smart contracts, program verification, and the formal establishment of mathematical and computer theoretical foundations.},\tpages = {255},\tnumber = {2},\tjournaltitle = {Electronics},\tauthor = {Sun, Tianyu and Yu, Wensheng},\turldate = {2023-10-12},\tdate = {2020-02},\tlangid = {english},\tnote = {Number: 2Publisher: Multidisciplinary Digital Publishing Institute},\tkeywords = {smart contracts, blockchain, Ethereum, formal verification, {BNB}, Coq proof assistant},\tfile = {Sun_Yu_2020_A Formal Verification Framework for Security Issues of Blockchain Smart.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Sun_Yu_2020_A Formal Verification Framework for Security Issues of Blockchain Smart.pdf:application/pdf},}"
        },
        {
            "id": "ref-6f78b4eb-9fe6-49bf-989b-5a3ed96e5cca",
            "name": "Bose 2021",
            "author": "Bose",
            "year": 2021,
            "title": "SAILFISH: Vetting Smart Contract State-Inconsistency Bugs in Seconds",
            "bibtex": "@misc{bose_sailfish_2021,\ttitle = {{SAILFISH}: Vetting Smart Contract State-Inconsistency Bugs in Seconds},\turl = {http://arxiv.org/abs/2104.08638},\tdoi = {10.48550/arXiv.2104.08638},\tshorttitle = {{SAILFISH}},\tabstract = {This paper presents {SAILFISH}, a scalable system for automatically finding state-inconsistency bugs in smart contracts. To make the analysis tractable, we introduce a hybrid approach that includes (i) a light-weight exploration phase that dramatically reduces the number of instructions to analyze, and (ii) a precise refinement phase based on symbolic evaluation guided by our novel value-summary analysis, which generates extra constraints to over-approximate the side effects of whole-program execution, thereby ensuring the precision of the symbolic evaluation. We developed a prototype of {SAILFISH} and evaluated its ability to detect two state-inconsistency flaws, viz., reentrancy and transaction order dependence ({TOD}) in Ethereum smart contracts. Further, we present detection rules for other kinds of smart contract flaws that {SAILFISH} can be extended to detect. Our experiments demonstrate the efficiency of our hybrid approach as well as the benefit of the value summary analysis. In particular, we show that S {SAILFISH} outperforms five state-of-the-art smart contract analyzers ({SECURITY}, {MYTHRIL}, {OYENTE}, {SEREUM} and {VANDAL} ) in terms of performance, and precision. In total, {SAILFISH} discovered 47 previously unknown vulnerable smart contracts out of 89,853 smart contracts from {ETHERSCAN} .},\tnumber = {{arXiv}:2104.08638},\tpublisher = {{arXiv}},\tauthor = {Bose, Priyanka and Das, Dipanjan and Chen, Yanju and Feng, Yu and Kruegel, Christopher and Vigna, Giovanni},\turldate = {2023-10-12},\tdate = {2021-12-12},\teprinttype = {arxiv},\teprint = {2104.08638 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Programming Languages},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\RPPS3KM3\\\\2104.html:text/html;Bose et al_2021_SAILFISH.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Bose et al_2021_SAILFISH.pdf:application/pdf},}"
        },
        {
            "id": "ref-0d568c83-0358-4e59-8979-b0ce663ecff5",
            "name": "Kushwaha 2022",
            "author": "Kushwaha",
            "year": 2022,
            "title": "Systematic Review of Security Vulnerabilities in Ethereum Blockchain Smart Contract",
            "bibtex": "@article{kushwaha_systematic_2022,\ttitle = {Systematic Review of Security Vulnerabilities in Ethereum Blockchain Smart Contract},\tvolume = {10},\tissn = {2169-3536},\turl = {https://ieeexplore.ieee.org/document/9667515},\tdoi = {10.1109/ACCESS.2021.3140091},\tabstract = {Blockchain is a revolutionary technology that enables users to communicate in a trust-less manner. It revolutionizes the modes of business between organizations without the need for a trusted third party. It is a distributed ledger technology based on a decentralized peer-to-peer (P2P) network. It enables users to store data globally on thousands of computers in an immutable format and empowers users to deploy small pieces of programs known as smart contracts. The blockchain-based smart contract enables auto enforcement of the agreed terms between two untrusted parties. There are several security vulnerabilities in Ethereum blockchain-based smart contracts, due to which sometimes it does not behave as intended. Because a smart contract can hold millions of dollars as cryptocurrency, so these security vulnerabilities can lead to disastrous losses. In this paper, a systematic review of the security vulnerabilities in the Ethereum blockchain is presented. The main objective is to discuss Ethereum smart contract security vulnerabilities, detection tools, real life attacks and preventive mechanisms. Comparisons are drawn among the Ethereum smart contract analysis tools by considering various features. From the extensive depth review, various issues associated with the Ethereum blockchain-based smart contract are highlighted. Finally, various future directions are also discussed in the field of the Ethereum blockchain-based smart contract that can help the researchers to set the directions for future research in this domain.},\tpages = {6605--6621},\tjournaltitle = {{IEEE} Access},\tauthor = {Kushwaha, Satpal Singh and Joshi, Sandeep and Singh, Dilbag and Kaur, Manjit and Lee, Heung-No},\turldate = {2023-10-10},\tdate = {2022},\tnote = {Conference Name: {IEEE} Access},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\45TGHSTL\\\\9667515.html:text/html;Kushwaha et al_2022_Systematic Review of Security Vulnerabilities in Ethereum Blockchain Smart.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Kushwaha et al_2022_Systematic Review of Security Vulnerabilities in Ethereum Blockchain Smart.pdf:application/pdf},}"
        },
        {
            "id": "ref-03df2a75-4c17-468f-b876-b7e0c5bd6e2c",
            "name": "Sun 2023",
            "author": "Sun",
            "year": 2023,
            "title": "When GPT Meets Program Analysis: Towards Intelligent Detection of Smart Contract Logic Vulnerabilities in GPTScan",
            "bibtex": "@misc{sun_when_2023,\ttitle = {When {GPT} Meets Program Analysis: Towards Intelligent Detection of Smart Contract Logic Vulnerabilities in {GPTScan}},\turl = {http://arxiv.org/abs/2308.03314},\tdoi = {10.48550/arXiv.2308.03314},\tshorttitle = {When {GPT} Meets Program Analysis},\tabstract = {Smart contracts are prone to various vulnerabilities, leading to substantial financial losses over time. Current analysis tools mainly target vulnerabilities with fixed control or dataflow patterns, such as re-entrancy and integer overflow. However, a recent study on Web3 security bugs revealed that about 80\\% of these bugs cannot be audited by existing tools due to the lack of domain-specific property description and checking. Given recent advances in Generative Pretraining Transformer ({GPT}), it is worth exploring how {GPT} could aid in detecting logic vulnerabilities in smart contracts. In this paper, we propose {GPTScan}, the first tool combining {GPT} with static analysis for smart contract logic vulnerability detection. Instead of relying solely on {GPT} to identify vulnerabilities, which can lead to high false positives and is limited by {GPT}'s pre-trained knowledge, we utilize {GPT} as a versatile code understanding tool. By breaking down each logic vulnerability type into scenarios and properties, {GPTScan} matches candidate vulnerabilities with {GPT}. To enhance accuracy, {GPTScan} further instructs {GPT} to intelligently recognize key variables and statements, which are then validated by static confirmation. Evaluation on diverse datasets with around 400 contract projects and 3K Solidity files shows that {GPTScan} achieves high precision (over 90\\%) for token contracts and acceptable precision (57.14\\%) for large projects like Web3Bugs. It effectively detects groundtruth logic vulnerabilities with a recall of over 80\\%, including 9 new vulnerabilities missed by human auditors. {GPTScan} is fast and cost-effective, taking an average of 14.39 seconds and 0.01 {USD} to scan per thousand lines of Solidity code. Moreover, static confirmation helps {GPTScan} reduce two-thirds of false positives.},\tnumber = {{arXiv}:2308.03314},\tpublisher = {{arXiv}},\tauthor = {Sun, Yuqiang and Wu, Daoyuan and Xue, Yue and Liu, Han and Wang, Haijun and Xu, Zhengzi and Xie, Xiaofei and Liu, Yang},\turldate = {2023-10-12},\tdate = {2023-08-07},\teprinttype = {arxiv},\teprint = {2308.03314 [cs]},\tkeywords = {Computer Science - Artificial Intelligence, Computer Science - Cryptography and Security, Computer Science - Software Engineering},\tannotation = {Comment: This is a technical report from Nanyang Technological University},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\FVI39V5X\\\\2308.html:text/html;Sun et al_2023_When GPT Meets Program Analysis.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Sun et al_2023_When GPT Meets Program Analysis.pdf:application/pdf},}"
        },
        {
            "id": "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca",
            "name": "Tikhomirov 2018",
            "author": "Tikhomirov",
            "year": 2018,
            "title": "SmartCheck: Static Analysis of Ethereum Smart Contracts",
            "bibtex": "@inproceedings{tikhomirov_smartcheck_2018,\tlocation = {Gothenburg Sweden},\ttitle = {{SmartCheck}: static analysis of ethereum smart contracts},\tisbn = {978-1-4503-5726-5},\turl = {https://dl.acm.org/doi/10.1145/3194113.3194115},\tdoi = {10.1145/3194113.3194115},\tshorttitle = {{SmartCheck}},\tabstract = {Ethereum is a major blockchain-based platform for smart contracts \u2013 Turing complete programs that are executed in a decentralized network and usually manipulate digital units of value. Solidity is the most mature high-level smart contract language. Ethereum is a hostile execution environment, where anonymous attackers exploit bugs for immediate financial gain. Developers have a very limited ability to patch deployed contracts. Hackers steal up to tens of millions of dollars from flawed contracts, a well-known example being \u201cThe {DAO}\u201c, broken in June 2016. Advice on secure Ethereum programming practices is spread out across blogs, papers, and tutorials. Many sources are outdated due to a rapid pace of development in this field. Automated vulnerability detection tools, which help detect potentially problematic language constructs, are still underdeveloped in this area.},\teventtitle = {{ICSE} '18: 40th International Conference on Software Engineering},\tpages = {9--16},\tbooktitle = {Proceedings of the 1st International Workshop on Emerging Trends in Software Engineering for Blockchain},\tpublisher = {{ACM}},\tauthor = {Tikhomirov, Sergei and Voskresenskaya, Ekaterina and Ivanitskiy, Ivan and Takhaviev, Ramil and Marchenko, Evgeny and Alexandrov, Yaroslav},\turldate = {2023-10-11},\tdate = {2018-05-27},\tlangid = {english},\tfile = {Tikhomirov et al. - 2018 - SmartCheck static analysis of ethereum smart cont.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\SJ95MKR7\\\\Tikhomirov et al. - 2018 - SmartCheck static analysis of ethereum smart cont.pdf:application/pdf},}"
        },
        {
            "id": "ref-41dcfa82-b03b-4b1b-8c8f-8aafe4ae7514",
            "name": "Smart Contract Security Field Guide 2023",
            "author": "Smart Contract Security Field Guide",
            "year": 2023,
            "title": "The Smart Contract Security Field Guide for Hackers",
            "bibtex": "@online{noauthor_smart_nodate,    title = {The Smart Contract Security Field Guide for Hackers - Smart Contract Security Field Guide},    url = {https://scsfg.io/hackers/},    urldate = {2024-02-03},    file = {The Smart Contract Security Field Guide for Hackers - Smart Contract Security Field Guide:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\2KEQ5CKU\\\\hackers.html:text/html},}"
        },
        {
            "id": "ref-956278b2-559a-41dc-930f-af8eeacf8356",
            "name": "Vidal 2023 - OpenSCV",
            "author": "Vidal - OpenSCV",
            "year": 2023,
            "title": "OpenSCV: An Open Hierarchical Taxonomy for Smart Contract Vulnerabilities",
            "bibtex": "@misc{vidal_openscv_2023,\ttitle = {{OpenSCV}: An Open Hierarchical Taxonomy for Smart Contract Vulnerabilities},\turl = {http://arxiv.org/abs/2303.14523},\tshorttitle = {{OpenSCV}},\tabstract = {Smart contracts are nowadays at the core of most blockchain systems, as they specify and allow an agreement between entities that wish to perform a transaction. As any computer program, smart contracts are subject to the presence of residual faults, including severe security vulnerabilities, which require that the vulnerable contract is terminated in the blockchain. In this context, research began to be developed to prevent the deployment of smart contract holding vulnerabilities, mostly in the form of vulnerability detection tools. Along with these efforts, several and heterogeneous vulnerability classification schemes arised (e.g., most notably {DASP} and {SWC}). At the time of writing, these are mostly outdated initiatives, despite the fact that smart contract vulnerabilities are continuously being discovered and the associated rich information being mostly disregarded. In this paper, we propose {OpenSCV}, a new and Open hierarchical taxonomy for Smart Contract Vulnerabilities, which is open to community contributions and matches the current state of the practice, while being prepared to handle future modifications and evolution. The taxonomy was built based on the analysis of research on vulnerability classification, community-maintained classification schemes, and research on smart contract vulnerability detection. We show how {OpenSCV} covers the announced detection ability of current vulnerability detection tools, and highlight its usefulness as a resource in smart contract vulnerability research.},\tnumber = {{arXiv}:2303.14523},\tpublisher = {{arXiv}},\tauthor = {Vidal, Fernando Richter and Ivaki, Naghmeh and Laranjeiro, Nuno},\turldate = {2023-10-30},\tdate = {2023-04-07},\teprinttype = {arxiv},\teprint = {2303.14523 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\RJW69L3Q\\\\2303.html:text/html;Vidal et al_2023_OpenSCV.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Vidal et al_2023_OpenSCV.pdf:application/pdf},}"
        },
        {
            "id": "ref-4cc26a95-44d7-4b41-8a4e-274f948d3daa",
            "name": "Li 2017",
            "author": "Li",
            "year": 2017,
            "title": "A survey on the security of blockchain systems",
            "bibtex": "@article{li_survey_2020,\ttitle = {A survey on the security of blockchain systems},\tvolume = {107},\tissn = {0167-739X},\turl = {https://www.sciencedirect.com/science/article/pii/S0167739X17318332},\tdoi = {10.1016/j.future.2017.08.020},\tabstract = {Since its inception, the blockchain technology has shown promising application prospects. From the initial cryptocurrency to the current smart contract, blockchain has been applied to many fields. Although there are some studies on the security and privacy issues of blockchain, there lacks a systematic examination on the security of blockchain systems. In this paper, we conduct a systematic study on the security threats to blockchain and survey the corresponding real attacks by examining popular blockchain systems. We also review the security enhancement solutions for blockchain, which could be used in the development of various blockchain systems, and suggest some future directions to stir research efforts into this area.},\tpages = {841--853},\tjournaltitle = {Future Generation Computer Systems},\tshortjournal = {Future Generation Computer Systems},\tauthor = {Li, Xiaoqi and Jiang, Peng and Chen, Ting and Luo, Xiapu and Wen, Qiaoyan},\turldate = {2023-10-11},\tdate = {2020-06-01},\tkeywords = {Security, Blockchain, Smart contract, Cryptocurrency},\tfile = {Li et al_2020_A survey on the security of blockchain systems.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Li et al_2020_A survey on the security of blockchain systems.pdf:application/pdf;ScienceDirect Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\Q8WD2T8W\\\\S0167739X17318332.html:text/html},}"
        },
        {
            "id": "ref-68259fca-e4c9-4c5d-9bca-fb4ff9102150",
            "name": "Arganaraz 2020",
            "author": "Arganaraz",
            "year": 2020,
            "title": "Detection of Vulnerabilities in Smart Contracts Specifications in Ethereum Platforms",
            "bibtex": "@article{arganaraz_detection_2020,\ttitle = {Detection of Vulnerabilities in Smart Contracts Specifications in Ethereum Platforms},\tabstract = {Ethereum is the principal ecosystem based on blockchain that provides a suitable environment for coding and executing smart contracts, which have been receiving great attention due to the commercial apps and among the scienti\ufb01c community. The process of writing secure and well performing contracts in the Ethereum platform is a major challenge for developers. It consists of the application of non-conventional programming paradigms due to the inherent characteristics of the execution of distributed computing programs. Furthermore, the errors in the deployed contracts could have serious consequences because of the immediate linkage between the contract code and the \ufb01nancial transactions. The direct handling of the assets means that the errors can be more relevant for security and have greater economic consequences than a mistake in the conventional apps. In this paper, we propose a tool for the detection of vulnerabilities in high-level languages based on automatized static analysis.},\tauthor = {Arga\u00f1araz, Mauro C and Ber\u00f3n, Mario M and Pereira, Maria J Varanda and Henriques, Pedro Rangel},\tdate = {2020},\tlangid = {english},\tfile = {Arga\u00f1araz et al. - 2020 - Detection of Vulnerabilities in Smart Contracts Sp.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\6FKS6M9W\\\\Arga\u00f1araz et al. - 2020 - Detection of Vulnerabilities in Smart Contracts Sp.pdf:application/pdf},}"
        },
        {
            "id": "ref-b8018f43-9ab2-4465-9df4-ee91839d25cb",
            "name": "Iii William E Bodell 2023",
            "author": "Iii William E Bodell",
            "year": 2023,
            "title": "Proxy Hunting: Understanding and Characterizing Proxy-based Upgradeable Smart Contracts in Blockchains",
            "bibtex": "@inproceedings{iii_proxy_2023,\ttitle = {Proxy Hunting: Understanding and Characterizing Proxy-based Upgradeable Smart Contracts in Blockchains},\tisbn = {978-1-939133-37-3},\turl = {https://www.usenix.org/conference/usenixsecurity23/presentation/bodell},\tshorttitle = {Proxy Hunting},\teventtitle = {32nd {USENIX} Security Symposium ({USENIX} Security 23)},\tpages = {1829--1846},\tauthor = {Iii, William E. Bodell and Meisami, Sajad and Duan, Yue},\turldate = {2023-10-11},\tdate = {2023},\tlangid = {english},\tfile = {Iii et al_2023_Proxy Hunting.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Iii et al_2023_Proxy Hunting.pdf:application/pdf},}"
        },
        {
            "id": "ref-7f358d08-e575-4f8e-a946-02ca0891af13",
            "name": "Consensys Diligence 2022",
            "author": "Consensys Diligence",
            "year": 2022,
            "title": "Consensys security best practices - attacks",
            "bibtex": "@online{noauthor_index_nodate,\ttitle = {Index - Ethereum Smart Contract Best Practices},\turl = {https://consensys.github.io/smart-contract-best-practices/attacks/},\turldate = {2024-02-03},\tfile = {Index - Ethereum Smart Contract Best Practices:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\B5DBH96I\\\\attacks.html:text/html},}"
        },
        {
            "id": "ref-40b2f693-4497-45a2-9911-39f751fd061f",
            "name": "Grech 2018",
            "author": "Grech",
            "year": 2018,
            "title": "MadMax: surviving out-of-gas conditions in Ethereum smart contracts",
            "bibtex": "@article{grech_madmax_2018,\ttitle = {{MadMax}: surviving out-of-gas conditions in Ethereum smart contracts},\tvolume = {2},\turl = {https://dl.acm.org/doi/10.1145/3276486},\tdoi = {10.1145/3276486},\tshorttitle = {{MadMax}},\tabstract = {Ethereum is a distributed blockchain platform, serving as an ecosystem for smart contracts: full-fledged inter-communicating programs that capture the transaction logic of an account. Unlike programs in mainstream languages, a gas limit restricts the execution of an Ethereum smart contract: execution proceeds as long as gas is available. Thus, gas is a valuable resource that can be manipulated by an attacker to provoke unwanted behavior in a victim's smart contract (e.g., wasting or blocking funds of said victim). Gas-focused vulnerabilities exploit undesired behavior when a contract (directly or through other interacting contracts) runs out of gas. Such vulnerabilities are among the hardest for programmers to protect against, as out-of-gas behavior may be uncommon in non-attack scenarios and reasoning about it is far from trivial. In this paper, we classify and identify gas-focused vulnerabilities, and present {MadMax}: a static program analysis technique to automatically detect gas-focused vulnerabilities with very high confidence. Our approach combines a control-flow-analysis-based decompiler and declarative program-structure queries. The combined analysis captures high-level domain-specific concepts (such as \"dynamic data structure storage\" and \"safely resumable loops\") and achieves high precision and scalability. {MadMax} analyzes the entirety of smart contracts in the Ethereum blockchain in just 10 hours (with decompilation timeouts in 8\\% of the cases) and flags contracts with a (highly volatile) monetary value of over \\$2.8B as vulnerable. Manual inspection of a sample of flagged contracts shows that 81\\% of the sampled warnings do indeed lead to vulnerabilities, which we report on in our experiment.},\tpages = {116:1--116:27},\tissue = {{OOPSLA}},\tjournaltitle = {Proceedings of the {ACM} on Programming Languages},\tshortjournal = {Proc. {ACM} Program. Lang.},\tauthor = {Grech, Neville and Kong, Michael and Jurisevic, Anton and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},\turldate = {2023-10-11},\tdate = {2018-10-24},\tkeywords = {Security, Blockchain, Smart Contracts, Program Analysis},\tfile = {Grech et al_2018_MadMax.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Grech et al_2018_MadMax.pdf:application/pdf},}"
        },
        {
            "id": "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44",
            "name": "Brent 2018",
            "author": "Brent",
            "year": 2018,
            "title": "Vandal: A Scalable Security Analysis Framework for Smart Contracts",
            "bibtex": "@misc{brent_vandal_2018,\ttitle = {Vandal: A Scalable Security Analysis Framework for Smart Contracts},\turl = {http://arxiv.org/abs/1809.03981},\tdoi = {10.48550/arXiv.1809.03981},\tshorttitle = {Vandal},\tabstract = {The rise of modern blockchains has facilitated the emergence of smart contracts: autonomous programs that live and run on the blockchain. Smart contracts have seen a rapid climb to prominence, with applications predicted in law, business, commerce, and governance. Smart contracts are commonly written in a high-level language such as Ethereum's Solidity, and translated to compact low-level bytecode for deployment on the blockchain. Once deployed, the bytecode is autonomously executed, usually by a \\%Turing-complete virtual machine. As with all programs, smart contracts can be highly vulnerable to malicious attacks due to deficient programming methodologies, languages, and toolchains, including buggy compilers. At the same time, smart contracts are also high-value targets, often commanding large amounts of cryptocurrency. Hence, developers and auditors need security frameworks capable of analysing low-level bytecode to detect potential security vulnerabilities. In this paper, we present Vandal: a security analysis framework for Ethereum smart contracts. Vandal consists of an analysis pipeline that converts low-level Ethereum Virtual Machine ({EVM}) bytecode to semantic logic relations. Users of the framework can express security analyses in a declarative fashion: a security analysis is expressed in a logic specification written in the {\\textbackslash}souffle language. We conduct a large-scale empirical study for a set of common smart contract security vulnerabilities, and show the effectiveness and efficiency of Vandal. Vandal is both fast and robust, successfully analysing over 95{\\textbackslash}\\% of all 141k unique contracts with an average runtime of 4.15 seconds; outperforming the current state of the art tools---Oyente, {EthIR}, Mythril, and Rattle---under equivalent conditions.},\tnumber = {{arXiv}:1809.03981},\tpublisher = {{arXiv}},\tauthor = {Brent, Lexi and Jurisevic, Anton and Kong, Michael and Liu, Eric and Gauthier, Francois and Gramoli, Vincent and Holz, Ralph and Scholz, Bernhard},\turldate = {2023-10-11},\tdate = {2018-09-11},\teprinttype = {arxiv},\teprint = {1809.03981 [cs]},\tkeywords = {Computer Science - Programming Languages},\tannotation = {Comment: 28 pages, 11 figures},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\U7UJI3BS\\\\1809.html:text/html;Brent et al_2018_Vandal.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Brent et al_2018_Vandal.pdf:application/pdf},}"
        },
        {
            "id": "ref-4cc635c3-0714-4455-86ea-4668ab690d0a",
            "name": "Chaliasos 2023",
            "author": "Chaliasos",
            "year": 2023,
            "title": "Smart Contract and DeFi Security: Insights from Tool Evaluations and Practitioner Surveys",
            "bibtex": "@misc{chaliasos_smart_2023,\ttitle = {Smart Contract and {DeFi} Security: Insights from Tool Evaluations and Practitioner Surveys},\turl = {http://arxiv.org/abs/2304.02981},\tdoi = {10.48550/arXiv.2304.02981},\tshorttitle = {Smart Contract and {DeFi} Security},\tabstract = {The growth of the decentralized finance ({DeFi}) ecosystem built on blockchain technology and smart contracts has led to an increased demand for secure and reliable smart contract development. However, attacks targeting smart contracts are increasing, causing an estimated {\\textbackslash}\\$6.45 billion in financial losses. Researchers have proposed various automated security tools to detect vulnerabilities, but their real-world impact remains uncertain. In this paper, we aim to shed light on the effectiveness of automated security tools in identifying vulnerabilities that can lead to high-profile attacks, and their overall usage within the industry. Our comprehensive study encompasses an evaluation of five {SoTA} automated security tools, an analysis of 127 high-impact real-world attacks resulting in {\\textbackslash}\\$2.3 billion in losses, and a survey of 49 developers and auditors working in leading {DeFi} protocols. Our findings reveal a stark reality: the tools could have prevented a mere 8\\% of the attacks in our dataset, amounting to {\\textbackslash}\\$149 million out of the {\\textbackslash}\\$2.3 billion in losses. Notably, all preventable attacks were related to reentrancy vulnerabilities. Furthermore, practitioners distinguish logic-related bugs and protocol layer vulnerabilities as significant threats that are not adequately addressed by existing security tools. Our results emphasize the need to develop specialized tools catering to the distinct demands and expectations of developers and auditors. Further, our study highlights the necessity for continuous advancements in security tools to effectively tackle the ever-evolving challenges confronting the {DeFi} ecosystem.},\tnumber = {{arXiv}:2304.02981},\tpublisher = {{arXiv}},\tauthor = {Chaliasos, Stefanos and Charalambous, Marcos Antonios and Zhou, Liyi and Galanopoulou, Rafaila and Gervais, Arthur and Mitropoulos, Dimitris and Livshits, Ben},\turldate = {2023-10-10},\tdate = {2023-04-06},\teprinttype = {arxiv},\teprint = {2304.02981 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\JFLK72XG\\\\2304.html:text/html;Chaliasos et al_2023_Smart Contract and DeFi Security.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Chaliasos et al_2023_Smart Contract and DeFi Security.pdf:application/pdf},}"
        },
        {
            "id": "ref-b1b7fca6-9f04-4650-bbf4-e75156284768",
            "name": "Huang 2019",
            "author": "Huang",
            "year": 2019,
            "title": "Smart Contract Security: A Software Lifecycle Perspective",
            "bibtex": "@article{huang_smart_2019,    title = {Smart Contract Security: A Software Lifecycle Perspective},    volume = {7},    issn = {2169-3536},    url = {https://ieeexplore.ieee.org/document/8864988},    doi = {10.1109/ACCESS.2019.2946988},    shorttitle = {Smart Contract Security},    abstract = {Smart contract security is an emerging research area that deals with security issues arising from the execution of smart contracts in a blockchain system. Generally, a smart contract is a piece of executable code that automatically runs on the blockchain to enforce an agreement preset between parties involved in the transaction. As an innovative technology, smart contracts have been applied in various business areas, such as digital asset exchange, supply chains, crowdfunding, and intellectual property. Unfortunately, many security issues in smart contracts have been reported in the media, often leading to substantial financial losses. These security issues pose new challenges to security research because the execution environment of smart contracts is based on blockchain computing and its decentralized nature of execution. Thus far, many partial solutions have been proposed to address specific aspects of these security issues, and the trend is to develop new methods and tools to automatically detect common security vulnerabilities. However, smart contract security is systematic engineering that should be explored from a global perspective, and a comprehensive study of issues in smart contract security is urgently needed. To this end, we conduct a literature review of smart contract security from a software lifecycle perspective. We first analyze the key features of blockchain that can cause security issues in smart contracts and then summarize the common security vulnerabilities of smart contracts. To address these vulnerabilities, we examine recent advances in smart contract security spanning four development phases: 1) security design; 2) security implementation; 3) testing before deployment; and 4) monitoring and analysis. Finally, we outline emerging challenges and opportunities in smart contract security for blockchain engineers and researchers.},    pages = {150184--150202},    journaltitle = {{IEEE} Access},    author = {Huang, Yongfeng and Bian, Yiyang and Li, Renpu and Zhao, J. Leon and Shi, Peizhong},    urldate = {2023-10-18},    date = {2019},    note = {Conference Name: {IEEE} Access},    file = {Huang et al_2019_Smart Contract Security.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Huang et al_2019_Smart Contract Security.pdf:application/pdf;IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\WQYJZUHW\\\\8864988.html:text/html},}"
        },
        {
            "id": "ref-3f03c52d-028a-442d-bebd-389100f387a8",
            "name": "Bartoletti 2020",
            "author": "Bartoletti",
            "year": 2020,
            "title": "Dissecting Ponzi schemes on Ethereum: Identification, analysis, and impact",
            "bibtex": "@article{bartoletti_dissecting_2020,\ttitle = {Dissecting Ponzi schemes on Ethereum: Identification, analysis, and impact},\tvolume = {102},\tissn = {0167-739X},\turl = {https://www.sciencedirect.com/science/article/pii/S0167739X18301407},\tdoi = {10.1016/j.future.2019.08.014},\tshorttitle = {Dissecting Ponzi schemes on Ethereum},\tabstract = {Ponzi schemes are financial frauds which lure users under the promise of high profits. Actually, users are repaid only with the investments of new users joining the scheme: consequently, a Ponzi scheme implodes soon after users stop joining it. Originated in the offline world 150 years ago, Ponzi schemes have since then migrated to the digital world, approaching first the Web, and more recently hanging over cryptocurrencies like Bitcoin. Smart contract platforms like Ethereum have provided a new opportunity for scammers, who have now the possibility of creating \u201ctrustworthy\u201d frauds that still make users lose money, but at least are guaranteed to execute \u201ccorrectly\u201d. We present a comprehensive survey of Ponzi schemes on Ethereum, analysing their behaviour and their impact from various viewpoints.},\tpages = {259--277},\tjournaltitle = {Future Generation Computer Systems},\tshortjournal = {Future Generation Computer Systems},\tauthor = {Bartoletti, Massimo and Carta, Salvatore and Cimoli, Tiziana and Saia, Roberto},\turldate = {2023-10-12},\tdate = {2020-01-01},\tkeywords = {Smart contracts, Cryptocurrencies, Electronic frauds, Ponzi schemes},\tfile = {Bartoletti et al_2020_Dissecting Ponzi schemes on Ethereum.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Bartoletti et al_2020_Dissecting Ponzi schemes on Ethereum.pdf:application/pdf;ScienceDirect Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\6QSAVXNX\\\\S0167739X18301407.html:text/html},}"
        },
        {
            "id": "ref-ed1413d4-1ba2-426c-9e83-7dc06c8c7616",
            "name": "Durieux 2020",
            "author": "Durieux",
            "year": 2020,
            "title": "Empirical review of automated analysis tools on 47,587 Ethereum smart contracts",
            "bibtex": "@inproceedings{durieux_empirical_2020,\tlocation = {New York, {NY}, {USA}},\ttitle = {Empirical review of automated analysis tools on 47,587 Ethereum smart contracts},\tisbn = {978-1-4503-7121-6},\turl = {https://doi.org/10.1145/3377811.3380364},\tdoi = {10.1145/3377811.3380364},\tseries = {{ICSE} '20},\tabstract = {Over the last few years, there has been substantial research on automated analysis, testing, and debugging of Ethereum smart contracts. However, it is not trivial to compare and reproduce that research. To address this, we present an empirical evaluation of 9 state-of-the-art automated analysis tools using two new datasets: i) a dataset of 69 annotated vulnerable smart contracts that can be used to evaluate the precision of analysis tools; and ii) a dataset with all the smart contracts in the Ethereum Blockchain that have Solidity source code available on Etherscan (a total of 47,518 contracts). The datasets are part of {SmartBugs}, a new extendable execution framework that we created to facilitate the integration and comparison between multiple analysis tools and the analysis of Ethereum smart contracts. We used {SmartBugs} to execute the 9 automated analysis tools on the two datasets. In total, we ran 428,337 analyses that took approximately 564 days and 3 hours, being the largest experimental setup to date both in the number of tools and in execution time. We found that only 42\\% of the vulnerabilities from our annotated dataset are detected by all the tools, with the tool Mythril having the higher accuracy (27\\%). When considering the largest dataset, we observed that 97\\% of contracts are tagged as vulnerable, thus suggesting a considerable number of false positives. Indeed, only a small number of vulnerabilities (and of only two categories) were detected simultaneously by four or more tools.},\tpages = {530--541},\tbooktitle = {Proceedings of the {ACM}/{IEEE} 42nd International Conference on Software Engineering},\tpublisher = {Association for Computing Machinery},\tauthor = {Durieux, Thomas and Ferreira, Jo\u00e3o F. and Abreu, Rui and Cruz, Pedro},\turldate = {2023-10-18},\tdate = {2020-10-01},\tkeywords = {smart contracts, blockchain, Ethereum, solidity, debugging, reproducible bugs, testing, tools},\tfile = {Durieux et al_2020_Empirical review of automated analysis tools on 47,587 Ethereum smart contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Durieux et al_2020_Empirical review of automated analysis tools on 47,587 Ethereum smart contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-d72ee2e0-9ba6-456f-a183-3737e953c48a",
            "name": "Di Angelo 2019",
            "author": "Di Angelo",
            "year": 2019,
            "title": "A Survey of Tools for Analyzing Ethereum Smart Contracts",
            "bibtex": "@inproceedings{di_angelo_survey_2019,    title = {A Survey of Tools for Analyzing Ethereum Smart Contracts},    url = {https://ieeexplore.ieee.org/document/8782988},    doi = {10.1109/DAPPCON.2019.00018},    abstract = {Smart contracts are at the heart of many decentralized applications, encapsulating core parts of the business logic. They handle the exchange of valuable assets like crypto-currencies or tokens in a transparent, decentralized manner. Being computer programs, they are also prone to programming errors, which have already lead to spectacular losses. Therefore, methods and tools have emerged to support the development of secure smart contracts and to aid the analysis of deployed ones. Assessing the quality of such tools turns out to be difficult. There are academic tools, tools developed by companies, and community tools in open repositories, but no comprehensive survey that may serve as a guide. Most discussions of related work in research papers are not helpful either, as they concentrate on methods rather than tools, base their review on publications about the tools rather than the tools themselves, or disregard tools outside of academia. Our survey aims at filling this gap by considering tools regardless of their provenance and by installing and testing them. It is meant as a guide for those who intend to analyze already deployed code, want to develop secure smart contracts, or plan to teach a related subject. We investigate 27 tools for analyzing Ethereum smart contracts regarding availability, maturity level, methods employed, and detection of security issues.},    eventtitle = {2019 {IEEE} International Conference on Decentralized Applications and Infrastructures ({DAPPCON})},    pages = {69--78},    booktitle = {2019 {IEEE} International Conference on Decentralized Applications and Infrastructures ({DAPPCON})},    author = {di Angelo, Monika and Salzer, Gernot},    urldate = {2023-10-10},    date = {2019-04},    file = {di Angelo_Salzer_2019_A Survey of Tools for Analyzing Ethereum Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\di Angelo_Salzer_2019_A Survey of Tools for Analyzing Ethereum Smart Contracts.pdf:application/pdf;IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\JKIAR5WY\\\\8782988.html:text/html},}"
        },
        {
            "id": "ref-7837ff88-5ade-4416-8c0e-c25ca549cc28",
            "name": "Dika 2017",
            "author": "Dika",
            "year": 2017,
            "title": "Ethereum Smart Contracts: Security Vulnerabilities and Security Tools",
            "bibtex": "@thesis{dika_ethereum_2017,\ttitle = {Ethereum Smart Contracts: Security Vulnerabilities and Security Tools},\turl = {https://ntnuopen.ntnu.no/ntnu-xmlui/handle/11250/2479191},\tshorttitle = {Ethereum Smart Contracts},\tabstract = {Ethereum represents the second generation of blockchain technology by providingan open and global computing platform which allows the exchange of cryptocurrency(Ether) and the development of self-verifying smart contract applications.Smart contracts present a foundation for possessing digital assets and a variety ofdecentralized applications within the blockchain area. Ethereum and smart contractsare public, distributed and immutable, as such, they are prone to vulnerabilitiessourcing from simple coding mistakes of developers.Motivated by the security breaches and recurring financial losses in smart contracts,we aim to advance the field of security in smart contract programming.The main objective is to aid smart contract developers by providing a taxonomy ofall known security issues and by inspecting the security code analysis tools usedto identify those vulnerabilities. Based on previous research as well as attacks onEthereum smart contracts, we propose an updated taxonomy which categorizesall known vulnerabilities within their architectural and severity level. Our secondproposed taxonomy is a novel categorization of security tools on Ethereum.Furthermore, we conduct the investigation of security code analysis tools onEthereum by assessing their effectiveness and accuracy. In particular, we analyzefour security tools, namely, Oyente, Securify, Remix, and {SmartCheck}. The resultsindicate that there are overall inconsistencies between the tools on different securityproperties. {SmartCheck} outperformed the other tools in terms of effectiveness,whereas Oyente performed the best in terms of accuracy. Furthermore, based onthe limitations we identified, we propose future improvements within the user interfaces,interpretation of results, and additional vulnerability checks.},\tinstitution = {{NTNU}},\ttype = {Master thesis},\tauthor = {Dika, Ardit},\turldate = {2023-10-06},\tdate = {2017},\tnote = {Accepted: 2018-01-23T15:00:59Z},\tfile = {Dika_2017_Ethereum Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Dika_2017_Ethereum Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-5979f499-2bb2-4c94-9e46-d8eb56debd85",
            "name": "Sayeed 2020",
            "author": "Sayeed",
            "year": 2020,
            "title": "Smart Contract: Attacks and Protections",
            "bibtex": "@article{sayeed_smart_2020,\ttitle = {Smart Contract: Attacks and Protections},\tvolume = {8},\tissn = {2169-3536},\turl = {https://ieeexplore.ieee.org/document/8976179},\tdoi = {10.1109/ACCESS.2020.2970495},\tshorttitle = {Smart Contract},\tabstract = {Smart contracts are programs that reside within decentralized blockchains and are executed pursuant to triggered instructions. A smart contract acts in a similar way to a traditional agreement but negates the necessity for the involvement of a third party. Smart contracts are capable of initiating their commands automatically, thus eliminating the involvement of a regulatory body. As a consequence of blockchain's immutable feature, smart contracts are developed in a manner that is distinct from traditional software. Once deployed to the blockchain, a smart contract cannot be modified or updated for security patches, thus encouraging developers to implement strong security strategies before deployment in order to avoid potential exploitation at a later time. However, the most recent dreadful attacks and the multifarious existing vulnerabilities which result as a consequence of the absence of security patches have challenged the sustainability of this technology. Attacks such as the Decentralized Autonomous Organization ({DAO}) attack and the Parity Wallet hack have cost millions of dollars simply as a consequence of na\u00efve bugs in the smart contract code. In this paper, we classify blockchain exploitation techniques into 4 categories based on the attack rationale; attacking consensus protocols, bugs in the smart contract, malware running in the operating system, and fraudulent users. We then focus on smart contract vulnerabilities, analyzing the 7 most important attack techniques to determine the real impact on smart contract technology. We reveal that even adopting the 10 most widely used tools to detect smart contract vulnerabilities, these still contain known vulnerabilities, providing a dangerously false sense of security. We conclude the paper with a discussion about recommendations and future research lines to progress towards a secure smart contract solution.},\tpages = {24416--24427},\tjournaltitle = {{IEEE} Access},\tauthor = {Sayeed, Sarwar and Marco-Gisbert, Hector and Caira, Tom},\turldate = {2023-10-10},\tdate = {2020},\tnote = {Conference Name: {IEEE} Access},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\MXHKJBEB\\\\8976179.html:text/html;Sayeed et al_2020_Smart Contract.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Sayeed et al_2020_Smart Contract.pdf:application/pdf},}"
        },
        {
            "id": "ref-1b9be924-133e-444a-b7a0-2ed381d851dc",
            "name": "Tantikul 2020",
            "author": "Tantikul",
            "year": 2020,
            "title": "Exploring Vulnerabilities in Solidity Smart Contract",
            "bibtex": "@inproceedings{tantikul_exploring_2020,\ttitle = {Exploring Vulnerabilities in Solidity Smart Contract},\tvolume = {2},\tisbn = {978-989-758-399-5},\turl = {http://www.scitepress.org/Papers/2020/89098},\tdoi = {10.5220/0008909803170324},\tabstract = {A smart contract is a decentralized program executed automatically, reliably, and transparently on a blockchain. It is now commonly used in financial-related applications, which require heavily secure operations and transactions. However, like other programs, smart contracts might contain some flaws. Thus, developers are encouraged to write secure smart contracts, and some approaches are proposed to detect vulnerabilities of smart contracts before deployment. Due to the immutability property of a blockchain, developers cannot modify the smart contract even though there is a vulnerability which may cause financial losses. In this paper, we propose the comparison of vulnerability detection tools to deployed smart contracts on the Ethereum blockchain. We also present the analysis of the state of vulnerabilities in smart contracts as well as their characteristics.},\teventtitle = {International Conference on Information Systems Security and Privacy},\tpages = {317--324},\tpublisher = {{SCITEPRESS}},\tauthor = {Tantikul, Phitchayaphong and Ngamsuriyaroj, Sudsanguan},\turldate = {2023-10-18},\tdate = {2020-02-25},\tlangid = {english},\tfile = {Tantikul_Ngamsuriyaroj_2020_Exploring Vulnerabilities in Solidity Smart Contract.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Tantikul_Ngamsuriyaroj_2020_Exploring Vulnerabilities in Solidity Smart Contract.pdf:application/pdf},}"
        },
        {
            "id": "ref-c7113b63-5800-41ef-afe6-eaa2caf806bc",
            "name": "Enterprise Ethereum Alliance: EEA EthTrust Security Levels Specification 2023",
            "author": "Enterprise Ethereum Alliance: EEA EthTrust Security Levels Specification",
            "year": 2023,
            "title": "EEA EthTrust Security Levels Specification v1, v-after-1",
            "bibtex": "@online{noauthor_eea_nodate,\ttitle = {{EEA} {EthTrust} Security Levels Specification v-after-2 Editor's Draft},\turl = {https://entethalliance.github.io/eta-registry/security-levels-spec.html},\turldate = {2024-02-08},\tfile = {EEA EthTrust Security Levels Specification v-after-2 Editor's Draft:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\DGLAPWMB\\\\security-levels-spec.html:text/html},}"
        },
        {
            "id": "ref-4015b87e-f4d4-4bc2-9c16-ceeeef9f74e5",
            "name": "SCSVS 2020",
            "author": "SCSVS",
            "year": 2020,
            "title": "Smart Contract Security Verification Standard (SCSVS)",
            "bibtex": "@software{noauthor_composablesecurityscsvs_2024,\ttitle = {{ComposableSecurity}/{SCSVS}},\turl = {https://github.com/ComposableSecurity/SCSVS},\tabstract = {Smart Contract Security Verification Standard},\tpublisher = {Composable Security},\turldate = {2024-03-07},\tdate = {2024-03-06},\tnote = {original-date: 2023-02-16T09:57:04Z},}"
        },
        {
            "id": "ref-915796d8-cecc-4605-8c53-6830b3bdf6a9",
            "name": "Tang 2021",
            "author": "Tang",
            "year": 2021,
            "title": "The Vulnerabilities in Smart Contracts: A Survey",
            "bibtex": "@inproceedings{tang_vulnerabilities_2021,\tlocation = {Cham},\ttitle = {The Vulnerabilities in Smart Contracts: A Survey},\tisbn = {978-3-030-78621-2},\tdoi = {10.1007/978-3-030-78621-2_14},\tseries = {Communications in Computer and Information Science},\tshorttitle = {The Vulnerabilities in Smart Contracts},\tabstract = {Blockchain has attracted widespread attention since its inception and one of the special technologies is smart contracts. Smart contracts are programs on blockchain that act as trusted intermediary between the users and are widely used in variety of industry (e.g., {IoT}, supply chain management). Smart contracts can store or manipulate valuable assets which may cause huge economic losses. Unlike traditional computer programs, the code of a smart contract cannot be modified after it is deployed on the blockchain. Hence, the security analysis and vulnerability detection of the smart contract must be performed before its deployment. In this survey, we considered 15 security vulnerabilities in smart contracts and introduced the vulnerable areas and the causes of vulnerabilities. According to the methods used, we introduced the existing smart contract analysis methods and vulnerability detection tools from three aspects of static analysis, dynamic analysis and formal verification. Finally, by considering the analysis tools and security vulnerabilities, we found that a new attack cannot be detected by existing detection tools if the vulnerability without pre-defined. We recommend using machine learning methods to analyze smart contracts in combination with traditional program vulnerabilities, and find vulnerabilities that have not yet been discovered in smart contracts. In addition, many detection tools require too much resources or are too complex, so it is necessary to introduce new detection methods.},\tpages = {177--190},\tbooktitle = {Advances in Artificial Intelligence and Security},\tpublisher = {Springer International Publishing},\tauthor = {Tang, Xiangyan and Zhou, Ke and Cheng, Jieren and Li, Hui and Yuan, Yuming},\teditor = {Sun, Xingming and Zhang, Xiaorui and Xia, Zhihua and Bertino, Elisa},\tdate = {2021},\tlangid = {english},\tkeywords = {Smart contracts, Ethereum, Analysis tools, Vulnerability detection},\tfile = {Tang et al_2021_The Vulnerabilities in Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Tang et al_2021_The Vulnerabilities in Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-ff929a1b-f21a-4eb9-b893-098bb6697f8c",
            "name": "Khan 2020",
            "author": "Khan",
            "year": 2020,
            "title": "A Survey on Vulnerabilities of Ethereum Smart Contracts",
            "bibtex": "@online{khan_survey_2020,\ttitle = {A Survey on Vulnerabilities of Ethereum Smart Contracts},\turl = {https://arxiv.org/abs/2012.14481v1},\tabstract = {Smart contract ({SC}) is an extension of {BlockChain} technology. Ethereum {BlockChain} was the first to incorporate {SC} and thus started a new era of crypto-currencies and electronic transactions. Solidity helps to program the {SCs}. Still, soon after Solidity's emergence in 2014, Solidity-based {SCs} suffered many attacks that deprived the {SC} account holders of their precious funds. The main reason for these attacks was the presence of vulnerabilities in {SC}. This paper discusses {SC} vulnerabilities and classifies them according to the domain knowledge of the faulty operations. This classification is a source of reminding developers and software engineers that for {SC}'s safety, each {SC} requires proper testing with effective tools to catch those classes' vulnerabilities.},\ttitleaddon = {{arXiv}.org},\tauthor = {Khan, Zulfiqar Ali and Namin, Akbar Siami},\turldate = {2023-10-10},\tdate = {2020-12-28},\tlangid = {english},\tfile = {Khan_Namin_2020_A Survey on Vulnerabilities of Ethereum Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Khan_Namin_2020_A Survey on Vulnerabilities of Ethereum Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-92511551-8603-4ec2-952a-6263eea03fa0",
            "name": "Singh 2019",
            "author": "Singh",
            "year": 2019,
            "title": "Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities",
            "bibtex": "@article{singh_blockchain_2020,\ttitle = {Blockchain smart contracts formalization: Approaches and challenges to address vulnerabilities},\tvolume = {88},\tissn = {0167-4048},\turl = {https://www.sciencedirect.com/science/article/pii/S0167404818310927},\tdoi = {10.1016/j.cose.2019.101654},\tshorttitle = {Blockchain smart contracts formalization},\tabstract = {Blockchain as a distributed computing platform enables users to deploy pieces of software (known as smart contracts) for a wealth of next-generation decentralized applications without involving a trusted third-party. The advantages of smart contracts do, however, come at a price. As with most technologies, there are potential security threats, vulnerabilities and various other issues associated with smart contracts. Writing secure and safe smart contracts can be extremely difficult due to various business logics, as well as platform vulnerabilities and limitations. Formal methods have recently been advocated to mitigate these vulnerabilities. This paper aims to provide a first-time study on current formalization research on all smart contract-related platforms on blockchains, which is scarce in the literature. To this end, a timely and rigorous systematic review to examine the state-of-the-art research and achievements published between 2015 and July 2019 is provided. This study is based on a comprehensive review of a set of 35 research papers that have been extracted from eight major online digital databases. The results indicate that the most common formalization technique is theorem proving, which is most often used to verify security properties relating to smart contracts, while other techniques such as symbolic execution and model checking were also frequently used. These techniques were most commonly used to verify the functional correctness of smart contracts. From the language and automation point of views, there were 12 languages (domain specific/specification/general purpose) proposed or used for the formalization of smart contracts on blockchains, while 15 formal method-specific automated tools/frameworks were identified for mitigating various vulnerabilities of smart contracts. From the results of this work, we further highlight three open issues for future research in this emerging domain including: formal testing, automated verification of smart contracts, and domain specific languages ({DSLs}) for Ethereum. These issues suggest the need for additional, in-depth research. Our study also provides possible future research directions.},\tpages = {101654},\tjournaltitle = {Computers \\& Security},\tshortjournal = {Computers \\& Security},\tauthor = {Singh, Amritraj and Parizi, Reza M. and Zhang, Qi and Choo, Kim-Kwang Raymond and Dehghantanha, Ali},\turldate = {2023-10-10},\tdate = {2020-01-01},\tkeywords = {Smart contracts, Blockchain, Verification, Formal methods, Systematic review},\tfile = {ScienceDirect Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\MTZFQYR7\\\\S0167404818310927.html:text/html;Singh et al_2020_Blockchain smart contracts formalization.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Singh et al_2020_Blockchain smart contracts formalization.pdf:application/pdf},}"
        },
        {
            "id": "ref-cb1b25f1-559b-49c6-9fa5-4d66c05c9d5e",
            "name": "He 2020",
            "author": "He",
            "year": 2020,
            "title": "Smart Contract Vulnerability Analysis and Security Audit",
            "bibtex": "@article{he_smart_2020,\ttitle = {Smart Contract Vulnerability Analysis and Security Audit},\tvolume = {34},\tissn = {1558-156X},\turl = {https://ieeexplore.ieee.org/document/9143290},\tdoi = {10.1109/MNET.001.1900656},\tabstract = {Ethereum started the blockchain-based smart contract technology that due to its scalability more and more decentralized applications are now based on. On the downside this has led to the exposure of more and more security issues and challenges, which has gained widespread attention in terms of research in the field of Ethereum smart contract vulnerabilities in both academia and industry. This article presents a survey of the Ethereum smart contract's various vulnerabilities and the corresponding defense mechanisms that have been applied to combat them. In particular, we focus on the random number vulnerability in the Fomo3d-like game contracts, as well as that attack and defense methods applied. Finally, we summarize the existing Ethereum smart contract security audit methods and compare several mainstream audit tools from various perspectives.},\tpages = {276--282},\tnumber = {5},\tjournaltitle = {{IEEE} Network},\tauthor = {He, Daojing and Deng, Zhi and Zhang, Yuxing and Chan, Sammy and Cheng, Yao and Guizani, Nadra},\turldate = {2023-10-11},\tdate = {2020-09},\tnote = {Conference Name: {IEEE} Network},\tfile = {He et al_2020_Smart Contract Vulnerability Analysis and Security Audit.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\He et al_2020_Smart Contract Vulnerability Analysis and Security Audit.pdf:application/pdf;IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\2AWP99UI\\\\9143290.html:text/html},}"
        },
        {
            "id": "ref-077db4c4-aed8-437f-8e99-eaf8cdc14c96",
            "name": "Garfatta 2021",
            "author": "Garfatta",
            "year": 2021,
            "title": "A Survey on Formal Verification for Solidity Smart Contracts",
            "bibtex": "@inproceedings{garfatta_survey_2021,\tlocation = {New York, {NY}, {USA}},\ttitle = {A Survey on Formal Verification for Solidity Smart Contracts},\tisbn = {978-1-4503-8956-3},\turl = {https://dl.acm.org/doi/10.1145/3437378.3437879},\tdoi = {10.1145/3437378.3437879},\tseries = {{ACSW} '21},\tabstract = {One of the 21st century\u2019s hottest topics in the world of {IT} has been the emergence of what some predict to be the foundation stone for a new era of internet (web 3.0): Blockchain technology. Besides being the backbone of what we come to know as cryptocurrencies, Blockchain\u2019s features make for a bottomless list of possible applications, especially thanks to the concept of smart contracts. This, however, caused Blockchain to be in the limelight of not only interested investors but also malicious users who started hunting for this technology\u2019s vulnerabilities, which resulted in numerous attacks on different Blockchain platforms. In an attempt to mend such loopholes, researchers took an interest in the verification of smart contracts, which are at the heart of Blockchain\u2019s applications. In this survey, we aim to present a general overview of the different axes investigated by researchers towards the verification of smart contracts, while taking a special interest in studies that focus on formal verification, the different approaches they apply and vulnerabilities they target.},\tpages = {1--10},\tbooktitle = {Proceedings of the 2021 Australasian Computer Science Week Multiconference},\tpublisher = {Association for Computing Machinery},\tauthor = {Garfatta, Ikram and Klai, Kais and Gaaloul, Walid and Graiet, Mohamed},\turldate = {2023-10-11},\tdate = {2021-02-01},\tkeywords = {Blockchain, Ethereum, Formal Verification, Smart Contract, Solidity},\tfile = {Garfatta et al_2021_A Survey on Formal Verification for Solidity Smart Contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Garfatta et al_2021_A Survey on Formal Verification for Solidity Smart Contracts.pdf:application/pdf},}"
        },
        {
            "id": "ref-45142094-d96a-472f-8167-8f863f14a1aa",
            "name": "Piantadosi 2022",
            "author": "Piantadosi",
            "year": 2022,
            "title": "Detecting functional and security-related issues in smart contracts: A systematic literature review",
            "bibtex": "@article{piantadosi_detecting_2023,\ttitle = {Detecting functional and security-related issues in smart contracts: A systematic literature review},\tvolume = {53},\trights = {\u00a9 2022 John Wiley \\& Sons Ltd.},\tissn = {1097-024X},\turl = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.3156},\tdoi = {10.1002/spe.3156},\tshorttitle = {Detecting functional and security-related issues in smart contracts},\tabstract = {Blockchain is a platform of distributed elaboration, which allows users to provide software for a huge range of next-generation decentralized applications without involving reliable third parties. Smart contracts ({SCs}) are an important component in blockchain applications: they are programmatic agreements among two or more parties that cannot be rescinded. Furthermore, {SCs} have an important characteristic: they allow users to implement reliable transactions without involving third parties. However, the advantages of {SCs} have a price. Like any program, {SCs} can contain bugs, some of which may also constitute security threats. Writing correct and secure {SCs} can be extremely difficult because, once deployed, they cannot be modified. Although {SCs} have been recently introduced, a large number of approaches have been proposed to find bugs and vulnerabilities in {SCs}. In this article, we present a systematic literature review on the approaches for the automated detection of bugs and vulnerabilities in {SCs}. We survey 68 papers published between 2015 and 2020, and we annotate each paper according to our classification framework to provide quantitative results and find possible areas not explored yet. Finally, we identify the open problems in this research field to provide possible directions to future researchers.},\tpages = {465--495},\tnumber = {2},\tjournaltitle = {Software: Practice and Experience},\tauthor = {Piantadosi, Valentina and Rosa, Giovanni and Placella, Davide and Scalabrino, Simone and Oliveto, Rocco},\turldate = {2023-10-11},\tdate = {2023},\tlangid = {english},\tnote = {\\_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.3156},\tkeywords = {smart contracts, blockchain},\tfile = {Piantadosi et al_2023_Detecting functional and security-related issues in smart contracts.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Piantadosi et al_2023_Detecting functional and security-related issues in smart contracts2.pdf:application/pdf;Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\9M7GKZI4\\\\spe.html:text/html},}"
        },
        {
            "id": "ref-41ed27f9-2b26-4a1d-b49a-16b916ec8acc",
            "name": "DApps collection 2020",
            "author": "DApps collection",
            "year": 2020,
            "title": "extensive dataset of 995 Ethereum DApps using smart contracts",
            "bibtex": "@software{frankrwu_swordsoul646dapp-collection_2023,\ttitle = {swordsoul646/{DApp}-Collection},\turl = {https://github.com/swordsoul646/DApp-Collection},\tabstract = {Some programs to get {DApp} metadata used in \"A First Look at Blockchain-based Decentralized Applications\"},\tauthor = {Frank.R.Wu},\turldate = {2024-03-07},\tdate = {2023-04-01},\tnote = {original-date: 2019-10-29T02:49:20Z},}"
        },
        {
            "id": "ref-634af91f-3d63-473a-8c4c-f2cbcb960c9d",
            "name": "DAppSCAN datasets 2022",
            "author": "DAppSCAN datasets",
            "year": 2022,
            "title": "DAppSCAN-source, DAppSCAN-bytecode datasets with contract code/bytecode, audit reports and SWC reports",
            "bibtex": "@software{inpluslab_inpluslabdappscan_2024,\ttitle = {{InPlusLab}/{DAppSCAN}},\turl = {https://github.com/InPlusLab/DAppSCAN},\tabstract = {{DAppSCAN}: Building Large-Scale Datasets for Smart Contract Weaknesses in {DApp} Projects.},\tauthor = {{InPlusLab}},\turldate = {2024-03-07},\tdate = {2024-02-21},\tnote = {original-date: 2023-04-20T16:51:09Z},}"
        },
        {
            "id": "ref-ad18b90c-b97e-406b-95a7-595d8b551c03",
            "name": "Smart Contract Audit Reports Dataset 2022",
            "author": "Smart Contract Audit Reports Dataset",
            "year": 2022,
            "title": "from source https://github.com/InPlusLab/DAppSCAN",
            "bibtex": "@online{noauthor_smart_nodate-2,\ttitle = {Smart Contract Audit Reports Dataset},\turl = {https://www.kaggle.com/datasets/shivam017arora/smart-contract-audit-reports-dataset},\tabstract = {Smart Contract Weaknesses in {EVM} Applications},\turldate = {2024-03-07},\tlangid = {english},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\3GTQJL7P\\\\smart-contract-audit-reports-dataset.html:text/html},}"
        },
        {
            "id": "ref-e6df9ea7-a73f-43c6-b396-9de9d72e02af",
            "name": "Quillhash: Solidity-Attack-Vectors 2023",
            "author": "Quillhash: Solidity-Attack-Vectors",
            "year": 2023,
            "title": "Common Solidity SmartContract Attack Vectors",
            "bibtex": "@software{noauthor_quillhashsolidity-attack-vectors_2024,\ttitle = {Quillhash/Solidity-Attack-Vectors},\turl = {https://github.com/Quillhash/Solidity-Attack-Vectors},\tabstract = {This Repository contains list of Common Solidity {SmartContract} Attack Vectors. If you find any attack vectors missing, you can create a pull request and be a contributor of the project.},\tpublisher = {{QuillAudits}},\turldate = {2024-02-08},\tdate = {2024-02-07},\tnote = {original-date: 2022-09-22T15:30:56Z},\tkeywords = {blockchain, ethereum, security, solidity},}"
        },
        {
            "id": "ref-1b3f6411-9baa-4211-b63b-f5c2e28e84a6",
            "name": "Rareskills SmartContract Security 2023",
            "author": "Rareskills SmartContract Security",
            "year": 2023,
            "title": "Smart Contract Security",
            "bibtex": "@online{noauthor_smart_2023,\ttitle = {Smart Contract Security: The Ultimate Guide},\turl = {https://www.rareskills.io/post/smart-contract-security},\tshorttitle = {Smart Contract Security},\tabstract = {This article serves as a mini course on smart contract security and provides an extensive list of the issues and vulnerabilities that tend to recur in Solidity smart contracts. A security issue in Solidity boils down to smart contracts not behaving the way they were intended to. This can fall into four broad categories: Funds getting stolen Funds getting locked up or frozen inside a contract People receive less rewards than anticipated (rewards are delayed or reduced) People receive more rewards},\ttitleaddon = {{RareSkills}},\turldate = {2024-02-08},\tdate = {2023-05-05},\tlangid = {english},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\IRMJXN9D\\\\smart-contract-security.html:text/html},}"
        },
        {
            "id": "ref-76e315f0-879a-4ede-84e1-ef9f6a11f777",
            "name": "manifoldfinance:DeFi-Threat Matrix v32022",
            "author": "manifoldfinance:DeFi-Threat Matrix v2",
            "year": 3202,
            "title": "knowledge base of adversary tactics and techniques based on real-world observations on decentralized finance",
            "bibtex": "@software{noauthor_manifoldfinancedefi-threat_2024,\ttitle = {manifoldfinance/defi-threat},\trights = {{MPL}-2.0},\turl = {https://github.com/manifoldfinance/defi-threat},\tabstract = {a globally-accessible knowledge base of adversary tactics and techniques based on real-world observations on decentralized finance},\tpublisher = {Manifold Finance},\turldate = {2024-02-08},\tdate = {2024-01-29},\tnote = {original-date: 2020-08-25T19:09:04Z},\tkeywords = {advisories, blockchain, cve, defi, defi-threat, erc20, erc721, ethereum, evm, infosec, kill-chain, nfts, smart-contracts, smart-contracts-audit, solidity, threat, threat-matrix},}"
        },
        {
            "id": "ref-99458160-995c-47a1-944b-0c6db1b6ce1c",
            "name": "Runtimeverification: verified-smart-contracts - List of Security Vulnerabilities2022",
            "author": "Runtimeverification: verified-smart-contracts - List of Security Vulnerabilities",
            "year": 2022,
            "title": "List of Security Vulnerabilities from various sources",
            "bibtex": "@online{noauthor_list_nodate,\ttitle = {List of Security Vulnerabilities},\turl = {https://github.com/runtimeverification/verified-smart-contracts/wiki/List-of-Security-Vulnerabilities},\tabstract = {Smart contracts which are formally verified. Contribute to runtimeverification/verified-smart-contracts development by creating an account on {GitHub}.},\ttitleaddon = {{GitHub}},\turldate = {2024-02-08},\tlangid = {english},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\AY9ADU32\\\\List-of-Security-Vulnerabilities.html:text/html},}"
        },
        {
            "id": "ref-33208372-ad9d-41b4-90d5-863d4b2dceb9",
            "name": "Solidity documentation:list of known compiler bugs 2023",
            "author": "Solidity documentation:list of known compiler bugs",
            "year": 2023,
            "title": "JSON-formatted list of some of the known security-relevant bugs in the Solidity compiler as far as version 0.3.0 ( https://github.com/ethereum/solidity/blob/develop/docs/bugs.json )+ file to check which bugs affect a specific compiler version( https://github.com/ethereum/solidity/blob/develop/docs/bugs_by_version.json )",
            "bibtex": "@online{noauthor_list_nodate-1,\ttitle = {List of Known Bugs \u2014 Solidity 0.8.25 documentation},\turl = {https://docs.soliditylang.org/en/latest/bugs.html},\turldate = {2024-02-08},\tfile = {List of Known Bugs \u2014 Solidity 0.8.25 documentation:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\Q3ACF2B9\\\\bugs.html:text/html},}"
        },
        {
            "id": "ref-d0a08e6e-f815-49e4-8864-d5c7a000a6a6",
            "name": "Solidity documentation:security considerations2023",
            "author": "Solidity documentation:security considerations",
            "year": 2023,
            "title": "https://github.com/ethereum/solidity/blob/develop/docs/security-considerations.rst",
            "bibtex": "@online{noauthor_security_nodate,\ttitle = {Security Considerations \u2014 Solidity 0.8.25 documentation},\turl = {https://docs.soliditylang.org/en/latest/security-considerations.html},\turldate = {2024-02-08},\tfile = {Security Considerations \u2014 Solidity 0.8.25 documentation:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\DFQRBQHN\\\\security-considerations.html:text/html},}"
        },
        {
            "id": "ref-2d76fd88-9463-4014-a2c9-5ac7be2a5ab8",
            "name": "sec-bit: Awesome Buggy ERC20 Tokens2018",
            "author": "sec-bit: Awesome Buggy ERC20 Tokens",
            "year": 2018,
            "title": "A Collection of Vulnerabilities in ERC20 Smart Contracts With Tokens Affected",
            "bibtex": "@online{noauthor_awesome-buggy-erc20-tokenserc20_token_issue_listmd_nodate,\ttitle = {awesome-buggy-erc20-tokens/{ERC}20\\_token\\_issue\\_list.md at master \u00b7 sec-bit/awesome-buggy-erc20-tokens},\turl = {https://github.com/sec-bit/awesome-buggy-erc20-tokens/blob/master/ERC20_token_issue_list.md},\tabstract = {A Collection of Vulnerabilities in {ERC}20 Smart Contracts With Tokens Affected - sec-bit/awesome-buggy-erc20-tokens},\ttitleaddon = {{GitHub}},\turldate = {2024-02-08},\tlangid = {english},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\CSXWJH9C\\\\ERC20_token_issue_list.html:text/html},}"
        },
        {
            "id": "ref-f61565a0-27bf-46fe-9b17-a0a72c89d321",
            "name": "Secureum: Security Pitfalls \\& Best Practices 1012021",
            "author": "Secureum: Security Pitfalls \\& Best Practices 021",
            "year": 1012,
            "title": "101 Security Pitfalls \\& Best Practices",
            "bibtex": "@online{secureum_security_2021,\ttitle = {Security Pitfalls \\& Best Practices 101},\turl = {https://secureum.substack.com/p/security-pitfalls-and-best-practices-101},\tabstract = {101 Security Pitfalls \\& Best Practices},\ttitleaddon = {Secureum},\ttype = {Substack newsletter},\tauthor = {Secureum, Rajeev \\{{\\textbackslash}textbar\\}},\turldate = {2024-02-08},\tdate = {2021-10-24},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\TRDBEXR9\\\\security-pitfalls-and-best-practices-101.html:text/html},}"
        },
        {
            "id": "ref-1a39a9e2-b390-4d79-9d6e-550f85597cf5",
            "name": "Secureum: Security Pitfalls \\& Best Practices 2012021",
            "author": "Secureum: Security Pitfalls \\& Best Practices 021",
            "year": 2012,
            "title": "100 more Security Pitfalls \\& Best Practices",
            "bibtex": "@online{secureum_security_2021-1,\ttitle = {Security Pitfalls \\& Best Practices 201},\turl = {https://secureum.substack.com/p/security-pitfalls-and-best-practices-201},\tabstract = {100 more Security Pitfalls \\& Best Practices},\ttitleaddon = {Secureum},\ttype = {Substack newsletter},\tauthor = {Secureum, Rajeev \\{{\\textbackslash}textbar\\}},\turldate = {2024-02-08},\tdate = {2021-10-31},\tfile = {Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\3SA26XN4\\\\security-pitfalls-and-best-practices-201.html:text/html},}"
        },
        {
            "id": "ref-9e83a92b-a0a2-45ef-8899-72216b96120d",
            "name": "Rameder 2022",
            "author": "Rameder",
            "year": 2022,
            "title": "Review of Automated Vulnerability Analysis of Smart Contracts on Ethereum",
            "bibtex": "@article{rameder_review_2022,\ttitle = {Review of Automated Vulnerability Analysis of Smart Contracts on Ethereum},\tvolume = {5},\tissn = {2624-7852},\turl = {https://www.frontiersin.org/articles/10.3389/fbloc.2022.814977},\tabstract = {Programs on public blockchains often handle valuable assets, making them attractive targets for attack. At the same time, it is challenging to design correct blockchain applications. Checking code for potential vulnerabilities is a viable option to increase trust. Therefore, numerous methods and tools have been proposed with the intention to support developers and analysts in detecting code vulnerabilities. Moreover, publications keep emerging with different focus, scope, and quality, making it difficult to keep up with the field and to identify relevant trends. Thus, regular reviews are essential to keep pace with the varied developments in a structured manner. Regarding blockchain programs, Ethereum is the platform most widely used and best documented. Moreover, applications based on Ethereum are entrusted with billions of {USD}. Like on similar blockchains, they are subject to numerous attacks and losses due to vulnerabilities that exist at all levels of the ecosystem. Countermeasures are in great demand. In this work, we perform a systematic literature review ({SLR}) to assess the state of the art regarding automated vulnerability analysis of smart contracts on Ethereum with a focus on classifications of vulnerabilities, detection methods, security analysis tools, and benchmarks for the assessment of tools. Our initial search of the major on-line libraries yields more than 1,300 publications. For the review, we apply a clear strategy and protocol to assure consequent, comprehensive, and reproducible documentation and results. After collecting the initial results, cleaning up references, removing duplicates and applying the inclusion and exclusion criteria, we retain 303 publications that include 214 primary studies, 70 surveys and 19 {SLRs}. For quality appraisal, we assess their intrinsic quality (derived from the reputation of the publication venue) as well as their contextual quality (determined by rating predefined criteria). For about 200 publications with at least a medium score, we extract the vulnerabilities, methods, and tools addressed, among other data. In a second step, we synthesize and structure the data into a classification of both the smart contract weaknesses and the analysis methods. Furthermore, we give an overview of tools and benchmarks used to evaluate tools. Finally, we provide a detailed discussion.},\tjournaltitle = {Frontiers in Blockchain},\tauthor = {Rameder, Heidelinde and di Angelo, Monika and Salzer, Gernot},\turldate = {2023-11-14},\tdate = {2022},\tfile = {Rameder et al_2022_Review of Automated Vulnerability Analysis of Smart Contracts on Ethereum.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Rameder et al_2022_Review of Automated Vulnerability Analysis of Smart Contracts on Ethereum.pdf:application/pdf},}"
        },
        {
            "id": "ref-fb9e91f8-1160-442d-abfd-2fa4e49102ee",
            "name": "Krupp 2018",
            "author": "Krupp",
            "year": 2018,
            "title": "teEther: Gnawing at Ethereum to Automatically Exploit Smart Contracts",
            "bibtex": "@inproceedings{krupp_teether_2018,\ttitle = {\\{{teEther}\\}: Gnawing at Ethereum to Automatically Exploit Smart Contracts},\tisbn = {978-1-939133-04-5},\turl = {https://www.usenix.org/conference/usenixsecurity18/presentation/krupp},\tshorttitle = {\\{{teEther}\\}},\teventtitle = {27th {USENIX} Security Symposium ({USENIX} Security 18)},\tpages = {1317--1333},\tauthor = {Krupp, Johannes and Rossow, Christian},\turldate = {2024-03-07},\tdate = {2018},\tlangid = {english},\tfile = {Krupp_Rossow_2018_ teEther .pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Krupp_Rossow_2018_ teEther .pdf:application/pdf},}"
        },
        {
            "id": "ref-2aa977d9-1bc4-44af-ba18-f6fbf47513ba",
            "name": "Solhint 2017",
            "author": "Solhint",
            "year": 2017,
            "title": "solhint",
            "bibtex": "@software{noauthor_protofiresolhint_2024,\ttitle = {protofire/solhint},\trights = {{MIT}},\turl = {https://github.com/protofire/solhint},\tabstract = {Solhint is an open-source project to provide a linting utility for Solidity code.},\tpublisher = {Protofire},\turldate = {2024-03-07},\tdate = {2024-03-04},\tnote = {original-date: 2017-10-16T11:48:44Z},\tkeywords = {ast, code-quality, dapp, developer-tools, ethereum, linter, security-scanner, smart-contracts, solhint, solidity},}"
        },
        {
            "id": "ref-9b2319b5-840c-4f0a-a4fe-b2421a25aa33",
            "name": "Feist 2019",
            "author": "Feist",
            "year": 2019,
            "title": "Slither: A Static Analysis Framework For Smart Contracts",
            "bibtex": "@inproceedings{feist_slither_2019,\ttitle = {Slither: A Static Analysis Framework For Smart Contracts},\turl = {http://arxiv.org/abs/1908.09878},\tdoi = {10.1109/WETSEB.2019.00008},\tshorttitle = {Slither},\tabstract = {This paper describes Slither, a static analysis framework designed to provide rich information about Ethereum smart contracts. It works by converting Solidity smart contracts into an intermediate representation called {SlithIR}. {SlithIR} uses Static Single Assignment ({SSA}) form and a reduced instruction set to ease implementation of analyses while preserving semantic information that would be lost in transforming Solidity to bytecode. Slither allows for the application of commonly used program analysis techniques like dataflow and taint tracking. Our framework has four main use cases: (1) automated detection of vulnerabilities, (2) automated detection of code optimization opportunities, (3) improvement of the user's understanding of the contracts, and (4) assistance with code review. In this paper, we present an overview of Slither, detail the design of its intermediate representation, and evaluate its capabilities on real-world contracts. We show that Slither's bug detection is fast, accurate, and outperforms other static analysis tools at finding issues in Ethereum smart contracts in terms of speed, robustness, and balance of detection and false positives. We compared tools using a large dataset of smart contracts and manually reviewed results for 1000 of the most used contracts.},\tpages = {8--15},\tbooktitle = {2019 {IEEE}/{ACM} 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain ({WETSEB})},\tauthor = {Feist, Josselin and Grieco, Gustavo and Groce, Alex},\turldate = {2023-10-11},\tdate = {2019-05},\teprinttype = {arxiv},\teprint = {1908.09878 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\T4WDNYCH\\\\1908.html:text/html;Feist et al_2019_Slither.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Feist et al_2019_Slither.pdf:application/pdf},}"
        },
        {
            "id": "ref-dcb9c1df-aef7-4d5d-a05a-0538a61ab857",
            "name": "Nguyen 2020",
            "author": "Nguyen",
            "year": 2020,
            "title": "sFuzz: An Efficient Adaptive Fuzzer for Solidity Smart Contracts",
            "bibtex": "@misc{nguyen_sfuzz_2020-1,\ttitle = {{sFuzz}: An Efficient Adaptive Fuzzer for Solidity Smart Contracts},\turl = {http://arxiv.org/abs/2004.08563},\tdoi = {10.48550/arXiv.2004.08563},\tshorttitle = {{sFuzz}},\tabstract = {Smart contracts are Turing-complete programs that execute on the infrastructure of the blockchain, which often manage valuable digital assets. Solidity is one of the most popular programming languages for writing smart contracts on the Ethereum platform. Like traditional programs, smart contracts may contain vulnerabilities. Unlike traditional programs, smart contracts cannot be easily patched once they are deployed. It is thus important that smart contracts are tested thoroughly before deployment. In this work, we present an adaptive fuzzer for smart contracts on the Ethereum platform called {sFuzz}. Compared to existing Solidity fuzzers, {sFuzz} combines the strategy in the {AFL} fuzzer and an efficient lightweight multi-objective adaptive strategy targeting those hard-to-cover branches. {sFuzz} has been applied to more than 4 thousand smart contracts and the experimental results show that (1) {sFuzz} is efficient, e.g., two orders of magnitude faster than state-of-the-art tools; (2) {sFuzz} is effective in achieving high code coverage and discovering vulnerabilities; and (3) the different fuzzing strategies in {sFuzz} complement each other.},\tnumber = {{arXiv}:2004.08563},\tpublisher = {{arXiv}},\tauthor = {Nguyen, Tai D. and Pham, Long H. and Sun, Jun and Lin, Yun and Minh, Quang Tran},\turldate = {2024-03-07},\tdate = {2020-04-18},\teprinttype = {arxiv},\teprint = {2004.08563 [cs]},\tkeywords = {Computer Science - Software Engineering},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\HHNDVXK6\\\\2004.html:text/html;Nguyen et al_2020_sFuzz.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Nguyen et al_2020_sFuzz2.pdf:application/pdf},}"
        },
        {
            "id": "ref-a8abb51c-a70b-434d-b514-1acc6213c9a0",
            "name": "Semgrep 2023",
            "author": "Semgrep",
            "year": 2023,
            "title": "semgrep-smart-contracts",
            "bibtex": "@software{noauthor_decuritysemgrep-smart-contracts_2024,    title = {Decurity/semgrep-smart-contracts},    url = {https://github.com/Decurity/semgrep-smart-contracts},    abstract = {Semgrep rules for smart contracts based on {DeFi} exploits},    publisher = {Decurity},    urldate = {2024-03-07},    date = {2024-03-06},    note = {original-date: 2022-04-01T13:15:39Z},    keywords = {defi, ethereum, security, semgrep, solidity},}"
        },
        {
            "id": "ref-2ab28047-9fe3-4fa0-86cc-9e7d60f54fb5",
            "name": "Pakala 2018",
            "author": "Pakala",
            "year": 2018,
            "title": "pakala",
            "bibtex": "@software{palkeo_palkeopakala_2024,\ttitle = {palkeo/pakala},\trights = {{GPL}-3.0},\turl = {https://github.com/palkeo/pakala},\tabstract = {Offensive vulnerability scanner for ethereum, and symbolic execution tool for the Ethereum Virtual Machine},\tauthor = {palkeo},\turldate = {2024-03-07},\tdate = {2024-02-20},\tnote = {original-date: 2018-12-03T17:31:46Z},\tkeywords = {ethereum, ethereum-virtual-machine, security, security-scanner, symbolic-execution},}"
        },
        {
            "id": "ref-103fc032-9688-4d28-adda-41dc6f0f4b94",
            "name": "Torres 2018",
            "author": "Torres",
            "year": 2018,
            "title": "Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts",
            "bibtex": "@inproceedings{torres_osiris_2018,\tlocation = {New York, {NY}, {USA}},\ttitle = {Osiris: Hunting for Integer Bugs in Ethereum Smart Contracts},\tisbn = {978-1-4503-6569-7},\turl = {https://doi.org/10.1145/3274694.3274737},\tdoi = {10.1145/3274694.3274737},\tseries = {{ACSAC} '18},\tshorttitle = {Osiris},\tabstract = {The capability of executing so-called smart contracts in a decentralised manner is one of the compelling features of modern blockchains. Smart contracts are fully fledged programs which cannot be changed once deployed to the blockchain. They typically implement the business logic of distributed apps and carry billions of dollars worth of coins. In that respect, it is imperative that smart contracts are correct and have no vulnerabilities or bugs. However, research has identified different classes of vulnerabilities in smart contracts, some of which led to prominent multi-million dollar fraud cases. In this paper we focus on vulnerabilities related to integer bugs, a class of bugs that is particularly difficult to avoid due to some characteristics of the Ethereum Virtual Machine and the Solidity programming language. In this paper we introduce Osiris -- a framework that combines symbolic execution and taint analysis, in order to accurately find integer bugs in Ethereum smart contracts. Osiris detects a greater range of bugs than existing tools, while providing a better specificity of its detection. We have evaluated its performance on a large experimental dataset containing more than 1.2 million smart contracts. We found that 42,108 contracts contain integer bugs. Besides being able to identify several vulnerabilities that have been reported in the past few months, we were also able to identify a yet unknown critical vulnerability in a couple of smart contracts that are currently deployed on the Ethereum blockchain.},\tpages = {664--676},\tbooktitle = {Proceedings of the 34th Annual Computer Security Applications Conference},\tpublisher = {Association for Computing Machinery},\tauthor = {Torres, Christof Ferreira and Sch\u00fctte, Julian and State, Radu},\turldate = {2023-10-11},\tdate = {2018-12-03},\tkeywords = {smart contracts, symbolic execution, Ethereum, integer bugs, taint analysis},\tfile = {Torres et al_2018_Osiris.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Torres et al_2018_Osiris.pdf:application/pdf},}"
        },
        {
            "id": "ref-c40ca42f-0b05-4ce0-95ac-b5f303e68afa",
            "name": "Mythril 2017",
            "author": "Mythril",
            "year": 2017,
            "title": "mythril",
            "bibtex": "@software{noauthor_consensysmythril_2024,\ttitle = {Consensys/mythril},\trights = {{MIT}},\turl = {https://github.com/Consensys/mythril},\tabstract = {Security analysis tool for {EVM} bytecode. Supports smart contracts built for Ethereum, Hedera, Quorum, Vechain, Roostock, Tron and other {EVM}-compatible blockchains.},\tpublisher = {Consensys},\turldate = {2024-03-07},\tdate = {2024-03-06},\tnote = {original-date: 2017-09-18T04:14:20Z},\tkeywords = {blockchain, ethereum, program-analysis, security, security-analysis, smart-contracts, solidity, symbolic-execution},}"
        },
        {
            "id": "ref-8387838a-cdb2-456e-9cb3-ef2d145cf02b",
            "name": "Mossberg 2019",
            "author": "Mossberg",
            "year": 2019,
            "title": "Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts",
            "bibtex": "@inproceedings{mossberg_manticore_2019,\ttitle = {Manticore: A User-Friendly Symbolic Execution Framework for Binaries and Smart Contracts},\turl = {https://ieeexplore.ieee.org/document/8952204},\tdoi = {10.1109/ASE.2019.00133},\tshorttitle = {Manticore},\tabstract = {An effective way to maximize code coverage in software tests is through dynamic symbolic execution-a technique that uses constraint solving to systematically explore a program's state space. We introduce an open-source dynamic symbolic execution framework called Manticore for analyzing binaries and Ethereum smart contracts. Manticore's flexible architecture allows it to support both traditional and exotic execution environments, and its {API} allows users to customize their analysis. Here, we discuss Manticore's architecture and demonstrate the capabilities we have used to find bugs and verify the correctness of code for our commercial clients.},\teventtitle = {2019 34th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})},\tpages = {1186--1189},\tbooktitle = {2019 34th {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE})},\tauthor = {Mossberg, Mark and Manzano, Felipe and Hennenfent, Eric and Groce, Alex and Grieco, Gustavo and Feist, Josselin and Brunson, Trent and Dinaburg, Artem},\turldate = {2023-10-11},\tdate = {2019-11},\tnote = {{ISSN}: 2643-1572},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\EJSVT89N\\\\8952204.html:text/html;Mossberg et al_2019_Manticore.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Mossberg et al_2019_Manticore2.pdf:application/pdf},}"
        },
        {
            "id": "ref-a8de81ca-3a67-4935-962a-22baecce8036",
            "name": "HoneyBadger 2019",
            "author": "HoneyBadger",
            "year": 2019,
            "title": "HoneyBadger",
            "bibtex": "@software{torres_christoftorreshoneybadger_2023,\ttitle = {christoftorres/{HoneyBadger}},\turl = {https://github.com/christoftorres/HoneyBadger},\tabstract = {A tool that detects honeypots in Ethereum smart contracts :honey\\_pot: ({USENIX} 2019).},\tauthor = {Torres, Christof},\turldate = {2024-03-07},\tdate = {2023-12-28},\tnote = {original-date: 2019-02-07T19:29:10Z},}"
        },
        {
            "id": "ref-a8ffc028-e180-4a72-9c01-4c2aef40c151",
            "name": "Grech 2019",
            "author": "Grech",
            "year": 2019,
            "title": "Gigahorse: Thorough, Declarative Decompilation of Smart Contracts",
            "bibtex": "@inproceedings{grech_gigahorse_2019,\tlocation = {Montreal, {QC}, Canada},\ttitle = {Gigahorse: Thorough, Declarative Decompilation of Smart Contracts},\tisbn = {978-1-72810-869-8},\turl = {https://ieeexplore.ieee.org/document/8811905/},\tdoi = {10.1109/ICSE.2019.00120},\tshorttitle = {Gigahorse},\tabstract = {The rise of smart contracts\u2014autonomous applications running on blockchains\u2014has led to a growing number of threats, necessitating sophisticated program analysis. However, smart contracts, which transact valuable tokens and cryptocurrencies, are compiled to very low-level bytecode. This bytecode is the ultimate semantics and means of enforcement of the contract. We present the Gigahorse toolchain. At its core is a reverse compiler (i.e., a decompiler) that decompiles smart contracts from Ethereum Virtual Machine ({EVM}) bytecode into a highlevel 3-address code representation. The new intermediate representation of smart contracts makes implicit data- and control\ufb02ow dependencies of the {EVM} bytecode explicit. Decompilation obviates the need for a contract\u2019s source and allows the analysis of both new and deployed contracts.},\teventtitle = {2019 {IEEE}/{ACM} 41st International Conference on Software Engineering ({ICSE})},\tpages = {1176--1186},\tbooktitle = {2019 {IEEE}/{ACM} 41st International Conference on Software Engineering ({ICSE})},\tpublisher = {{IEEE}},\tauthor = {Grech, Neville and Brent, Lexi and Scholz, Bernhard and Smaragdakis, Yannis},\turldate = {2024-03-07},\tdate = {2019-05},\tlangid = {english},\tfile = {Grech et al. - 2019 - Gigahorse Thorough, Declarative Decompilation of .pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\39NLLBYX\\\\Grech et al. - 2019 - Gigahorse Thorough, Declarative Decompilation of .pdf:application/pdf},}"
        },
        {
            "id": "ref-6f29aa05-edc8-4ee8-8954-b70e03d59f27",
            "name": "Schneidewind 2020",
            "author": "Schneidewind",
            "year": 2020,
            "title": "eThor: Practical and Provably Sound Static Analysis of Ethereum Smart Contracts",
            "bibtex": "@misc{schneidewind_ethor_2020,\ttitle = {{eThor}: Practical and Provably Sound Static Analysis of Ethereum Smart Contracts},\turl = {http://arxiv.org/abs/2005.06227},\tdoi = {10.48550/arXiv.2005.06227},\tshorttitle = {{eThor}},\tabstract = {Ethereum has emerged as the most popular smart contract development platform, with hundreds of thousands of contracts stored on the blockchain and covering a variety of application scenarios, such as auctions, trading platforms, and so on. Given their financial nature, security vulnerabilities may lead to catastrophic consequences and, even worse, they can be hardly fixed as data stored on the blockchain, including the smart contract code itself, are immutable. An automated security analysis of these contracts is thus of utmost interest, but at the same time technically challenging for a variety of reasons, such as the specific transaction-oriented programming mechanisms, which feature a subtle semantics, and the fact that the blockchain data which the contract under analysis interacts with, including the code of callers and callees, are not statically known. In this work, we present {eThor}, the first sound and automated static analyzer for {EVM} bytecode, which is based on an abstraction of the {EVM} bytecode semantics based on Horn clauses. In particular, our static analysis supports reachability properties, which we show to be sufficient for capturing interesting security properties for smart contracts (e.g., single-entrancy) as well as contract-specific functional properties. Our analysis is proven sound against a complete semantics of {EVM} bytecode and an experimental large-scale evaluation on real-world contracts demonstrates that {eThor} is practical and outperforms the state-of-the-art static analyzers: specifically, {eThor} is the only one to provide soundness guarantees, terminates on 95\\% of a representative set of real-world contracts, and achieves an F-measure (which combines sensitivity and specificity) of 89\\%.},\tnumber = {{arXiv}:2005.06227},\tpublisher = {{arXiv}},\tauthor = {Schneidewind, Clara and Grishchenko, Ilya and Scherer, Markus and Maffei, Matteo},\turldate = {2024-03-07},\tdate = {2020-05-13},\teprinttype = {arxiv},\teprint = {2005.06227 [cs]},\tkeywords = {Computer Science - Cryptography and Security, Computer Science - Programming Languages},\tfile = {arXiv.org Snapshot:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\243NQSBP\\\\2005.html:text/html;Schneidewind et al_2020_eThor.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Schneidewind et al_2020_eThor.pdf:application/pdf},}"
        },
        {
            "id": "ref-b1f81fef-aa26-434f-86a9-ed3000b69492",
            "name": "Veloso 2021",
            "author": "Veloso",
            "year": 2021,
            "title": "Conkas: A Modular and Static Analysis Tool for Ethereum Bytecode",
            "bibtex": "@article{veloso_conkas_nodate,\ttitle = {Conkas: A Modular and Static Analysis Tool for Ethereum Bytecode},\tabstract = {Since the beginning of Ethereum, started the development of tools to aimed developers to not introduce bugs with static analysis tools that show warnings to developers if they introduce some bugs. However, vulnerabilities exist as shown by {TheDAO} attack, a very famous attack that stole a lot of Ether. To try to reduce the probability of new future attacks of happening we introduce Conkas, a modular static analysis tool that use symbolic execution to \ufb01nd traces that lead to vulnerabilities and uses an intermediate representation ({IR}). The users can interact with Conkas via Command-Line Interface ({CLI}) and the output will be the result of the analysis. Conkas supports Ethereum bytecode or contracts written in Solidity and is compatible with all version of Solidity, but the analysis is done at the bytecode level. Conkas support already 5 modules that detect vulnerabilities related to {DASP}10 categories, being Arithmetic, Front-Running, Reentrancy, Time Manipulation and Unchecked Low-Level Calls. Conkas is also easy to extend, meaning that you can add your custom modules to detect other types of vulnerabilities. We analyse Conkas with {SmartBugs} and our tool has the best precision, with 54\\%.},\tauthor = {Veloso, Nuno},\tlangid = {english},\tfile = {Veloso - Conkas A Modular and Static Analysis Tool for Eth.pdf:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\IMJ254NG\\\\Veloso - Conkas A Modular and Static Analysis Tool for Eth.pdf:application/pdf},}"
        },
        {
            "id": "ref-de522dd0-5f7f-4b5f-b5a4-ac1f138f7763",
            "name": "Torres 2020",
            "author": "Torres",
            "year": 2020,
            "title": "ConFuzzius: A Data Dependency-Aware Hybrid Fuzzer for Smart Contracts",
            "bibtex": "@inproceedings{torres_confuzzius_2021,\ttitle = {{ConFuzzius}: A Data Dependency-Aware Hybrid Fuzzer for Smart Contracts},\turl = {https://ieeexplore.ieee.org/document/9581164},\tdoi = {10.1109/EuroSP51992.2021.00018},\tshorttitle = {{ConFuzzius}},\tabstract = {Smart contracts are Turing-complete programs that are executed across a blockchain. Unlike traditional programs, once deployed, they cannot be modified. As smart contracts carry more value, they become more of an exciting target for attackers. Over the last years, they suffered from exploits costing millions of dollars due to simple programming mistakes. As a result, a variety of tools for detecting bugs have been proposed. Most of these tools rely on symbolic execution, which may yield false positives due to over-approximation. Recently, many fuzzers have been proposed to detect bugs in smart contracts. However, these tend to be more effective in finding shallow bugs and less effective in finding bugs that lie deep in the execution, therefore achieving low code coverage and many false negatives. An alternative that has proven to achieve good results in traditional programs is hybrid fuzzing, a combination of symbolic execution and fuzzing. In this work, we study hybrid fuzzing on smart contracts and present {ConFuzzius}, the first hybrid fuzzer for smart contracts. {ConFuzzius} uses evolutionary fuzzing to exercise shallow parts of a smart contract and constraint solving to generate inputs that satisfy complex conditions that prevent evolutionary fuzzing from exploring deeper parts. Moreover, {ConFuzzius} leverages dynamic data dependency analysis to efficiently generate sequences of transactions that are more likely to result in contract states in which bugs may be hidden. We evaluate the effectiveness of {ConFuzzius} by comparing it with state-of-the-art symbolic execution tools and fuzzers for smart contracts. Our evaluation on a curated dataset of 128 contracts and a dataset of 21K real-world contracts shows that our hybrid approach detects more bugs than state-of-the-art tools (up to 23\\%) and that it outperforms existing tools in terms of code coverage (up to 69\\%). We also demonstrate that data dependency analysis can boost bug detection up to 18\\%.},\teventtitle = {2021 {IEEE} European Symposium on Security and Privacy ({EuroS}\\&P)},\tpages = {103--119},\tbooktitle = {2021 {IEEE} European Symposium on Security and Privacy ({EuroS}\\&P)},\tauthor = {Torres, Christof Ferreira and Iannillo, Antonio Ken and Gervais, Arthur and State, Radu},\turldate = {2023-10-11},\tdate = {2021-09},\tfile = {IEEE Xplore Abstract Record:C\\:\\\\Users\\\\Claudia\\\\Zotero\\\\storage\\\\L2VU2NHX\\\\9581164.html:text/html;Torres et al_2021_ConFuzzius.pdf:C\\:\\\\Users\\\\Claudia\\\\Documents\\\\Zotero\\\\Torres et al_2021_ConFuzzius.pdf:application/pdf},}"
        }
    ],
    "cwes": [
        {
            "id": "cwe-179fa40e-2a4c-4c3d-88c3-183af7d016e2",
            "weakness": "Use of Low-Level Functionality",
            "weakness_id": 695,
            "name": "CWE-695: Use of Low-Level Functionality",
            "abstraction": ""
        },
        {
            "id": "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538",
            "weakness": "Inclusion of Functionality from Untrusted Control Sphere",
            "weakness_id": 829,
            "name": "CWE-829: Inclusion of Functionality from Untrusted Control Sphere",
            "abstraction": ""
        },
        {
            "id": "cwe-23d97431-c83e-4de3-b047-de3e04edefdd",
            "weakness": "Write-what-where Condition",
            "weakness_id": 123,
            "name": "CWE-123: Write-what-where Condition",
            "abstraction": ""
        },
        {
            "id": "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f",
            "weakness": "Unchecked Return Value",
            "weakness_id": 252,
            "name": "CWE-252: Unchecked Return Value",
            "abstraction": ""
        },
        {
            "id": "cwe-d20b2915-c270-4732-a2a9-dcd46bfbd9cd",
            "weakness": "Dead code",
            "weakness_id": 561,
            "name": "CWE-561: Dead code",
            "abstraction": ""
        },
        {
            "id": "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98",
            "weakness": "Insufficient Verification of Data Authenticity",
            "weakness_id": 345,
            "name": "CWE-345: Insufficient Verification of Data Authenticity",
            "abstraction": ""
        },
        {
            "id": "cwe-f23fd63f-8103-4094-b7e6-3af680754c8d",
            "weakness": "Improper Initialization",
            "weakness_id": 655,
            "name": "CWE-655: Improper Initialization",
            "abstraction": ""
        },
        {
            "id": "cwe-76f0425a-9804-403d-b72a-880a305546ef",
            "weakness": "CWE-20:Improper Input Validation",
            "weakness_id": 20,
            "name": "CWE-20:Improper Input Validation",
            "abstraction": ""
        },
        {
            "id": "cwe-7d75895f-6dc2-4db7-9028-f9a80f4de15f",
            "weakness": "Incorrect Type Conversion or Cast",
            "weakness_id": 704,
            "name": "CWE-704: Incorrect Type Conversion or Cast",
            "abstraction": ""
        },
        {
            "id": "cwe-a50912f8-e612-4c46-b6df-f2c68c05c3e9",
            "weakness": "User Interface (UI) Misrepresentation of Critical Information",
            "weakness_id": 451,
            "name": "CWE-451: User Interface (UI) Misrepresentation of Critical Information",
            "abstraction": ""
        },
        {
            "id": "cwe-0f8aa2b6-f0e7-4cc0-9053-584b7b49ca1d",
            "weakness": "Improper Verification of Cryptographic Signature",
            "weakness_id": 347,
            "name": "CWE-347: Improper Verification of Cryptographic Signature",
            "abstraction": ""
        },
        {
            "id": "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144",
            "weakness": "Insufficient Control Flow Management",
            "weakness_id": 691,
            "name": "CWE-691: Insufficient Control Flow Management",
            "abstraction": ""
        },
        {
            "id": "cwe-1d7eb3a7-8810-46da-8e7d-15fbe7b4d968",
            "weakness": "Declaration of Catch for Generic Exception",
            "weakness_id": 396,
            "name": "CWE-396: Declaration of Catch for Generic Exception",
            "abstraction": ""
        },
        {
            "id": "cwe-3b343980-56e9-42ec-8386-3041cb9083d6",
            "weakness": "Access of Uninitialized Pointer",
            "weakness_id": 824,
            "name": "CWE-824: Access of Uninitialized Pointer",
            "abstraction": ""
        },
        {
            "id": "cwe-bf95240f-5046-4cdc-9d32-09bd73d1c64d",
            "weakness": "Use of Insufficiently Random Values",
            "weakness_id": 330,
            "name": "CWE-330: Use of Insufficiently Random Values",
            "abstraction": ""
        },
        {
            "id": "cwe-ef50a957-e547-4bfb-ac18-c396ce3684dc",
            "weakness": "Authentication Bypass by Capture-replay",
            "weakness_id": 294,
            "name": "CWE-294: Authentication Bypass by Capture-replay",
            "abstraction": ""
        },
        {
            "id": "cwe-700db885-365a-4888-8a16-3b28065dc398",
            "weakness": "Improper Control of a Resource Through its Lifetime",
            "weakness_id": 664,
            "name": "CWE-664: Improper Control of a Resource Through its Lifetime",
            "abstraction": ""
        },
        {
            "id": "cwe-61e91e04-4cc9-423a-a8e7-9d5c66ce877a",
            "weakness": "Improper Locking",
            "weakness_id": 667,
            "name": "CWE-667: Improper Locking",
            "abstraction": ""
        },
        {
            "id": "cwe-c2da8d60-ecb5-486a-856c-ce03f19c0578",
            "weakness": "Incorrect Provision of Specified Functionality",
            "weakness_id": 684,
            "name": "CWE-684: Incorrect Provision of Specified Functionality",
            "abstraction": ""
        },
        {
            "id": "cwe-b71fe313-5245-4af1-bf01-4c97867682cd",
            "weakness": "Improper Adherence to Coding Standards",
            "weakness_id": 710,
            "name": "CWE-710: Improper Adherence to Coding Standards",
            "abstraction": ""
        },
        {
            "id": "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4",
            "weakness": "Improper Check or Handling of Exceptional Conditions",
            "weakness_id": 703,
            "name": "CWE-703: Improper Check or Handling of Exceptional Conditions",
            "abstraction": ""
        },
        {
            "id": "cwe-7d812309-7085-43db-a6c6-832d09ea7670",
            "weakness": "Improper Enforcement of Behavioral Workflow",
            "weakness_id": 841,
            "name": "CWE-841: Improper Enforcement of Behavioral Workflow",
            "abstraction": ""
        },
        {
            "id": "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205",
            "weakness": "Incorrect Calculation",
            "weakness_id": 682,
            "name": "CWE-682: Incorrect Calculation",
            "abstraction": ""
        },
        {
            "id": "cwe-a9734e31-3393-43af-8c97-3b7c6695a051",
            "weakness": "Exposure of Resource to Wrong Sphere",
            "weakness_id": 668,
            "name": "CWE-668: Exposure of Resource to Wrong Sphere",
            "abstraction": ""
        },
        {
            "id": "cwe-93aebfd2-700b-4689-a47f-1242ae96410f",
            "weakness": "Using Components with Known Vulnerabilities",
            "weakness_id": 937,
            "name": "CWE-937: Using Components with Known Vulnerabilities",
            "abstraction": ""
        },
        {
            "id": "cwe-f64336c4-4bc6-4389-9ea5-c8d24be964a2",
            "weakness": "Improper Following of Specification by Caller",
            "weakness_id": 573,
            "name": "CWE-573: Improper Following of Specification by Caller",
            "abstraction": ""
        },
        {
            "id": "cwe-f451d548-645d-4056-9691-1c2e5e907476",
            "weakness": "Improper Neutralization of Argument Delimitersin a Command ('Argument Injection')",
            "weakness_id": 88,
            "name": "CWE-88: Improper Neutralization of Argument Delimitersin a Command ('Argument Injection')",
            "abstraction": ""
        },
        {
            "id": "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019",
            "weakness": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
            "weakness_id": 362,
            "name": "CWE-362: Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
            "abstraction": ""
        },
        {
            "id": "cwe-cc6b94e2-cad1-4e05-af1c-b2af0a30d26b",
            "weakness": "Use of Incorrect Operator",
            "weakness_id": 480,
            "name": "CWE-480: Use of Incorrect Operator",
            "abstraction": ""
        },
        {
            "id": "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248",
            "weakness": "Improper Access Control",
            "weakness_id": 284,
            "name": "CWE-284: Improper Access Control",
            "abstraction": ""
        },
        {
            "id": "cwe-0066f920-b9b7-44c7-b699-c6b6298f5376",
            "weakness": "Irrelevant Code",
            "weakness_id": 1164,
            "name": "CWE-1164: Irrelevant Code",
            "abstraction": ""
        },
        {
            "id": "cwe-d693e38c-f4fc-40a2-802b-e18019401e70",
            "weakness": "Uncontrolled Resource Consumption",
            "weakness_id": 400,
            "name": "CWE-400: Uncontrolled Resource Consumption",
            "abstraction": ""
        },
        {
            "id": "cwe-8f75473e-0a77-4eca-afdc-20a6a68a647d",
            "weakness": "Improper Input Validation",
            "weakness_id": 20,
            "name": "CWE-20: Improper Input Validation",
            "abstraction": ""
        },
        {
            "id": "cwe-d745593f-beea-488f-9cfc-9daaa7d64c2d",
            "weakness": "Always-Incorrect Control Flow Implementation",
            "weakness_id": 670,
            "name": "CWE-670: Always-Incorrect Control Flow Implementation",
            "abstraction": ""
        },
        {
            "id": "cwe-1a81bd17-91b5-4521-959b-fb2891601a9b",
            "weakness": "Incorrect Resource Transfer Between Spheres",
            "weakness_id": 669,
            "name": "CWE-669: Incorrect Resource Transfer Between Spheres",
            "abstraction": ""
        },
        {
            "id": "cwe-caf2a717-0565-469b-b7f9-bc80f720d1fe",
            "weakness": "Improper Initialization",
            "weakness_id": 665,
            "name": "CWE-665: Improper Initialization",
            "abstraction": ""
        },
        {
            "id": "cwe-f0275cc6-8de4-48c9-b1ec-ef1a1e63f1cb",
            "weakness": "Use of Obsolete Function",
            "weakness_id": 477,
            "name": "CWE-477: Use of Obsolete Function",
            "abstraction": ""
        }
    ],
    "swcs": [
        {
            "id": "swc-937acc93-347b-4870-bbfd-4d4644206c92",
            "weakness": "Transaction Order Dependence",
            "weakness_id": 114,
            "name": "SWC-114: Transaction Order Dependence",
            "cwe_mapping": "cwe-0be466bb-c0ef-49d8-8d96-c348e1e27019"
        },
        {
            "id": "swc-92bd30a4-b796-45d6-a289-191809bef469",
            "weakness": "Hash Collisions With Multiple Variable Length Arguments",
            "weakness_id": 133,
            "name": "SWC-133: Hash Collisions With Multiple Variable Length Arguments",
            "cwe_mapping": "cwe-ef50a957-e547-4bfb-ac18-c396ce3684dc"
        },
        {
            "id": "swc-68fe907c-32b1-4aa2-b070-7e2b85a72f77",
            "weakness": "Assert Violation",
            "weakness_id": 110,
            "name": "SWC-110: Assert Violation",
            "cwe_mapping": "cwe-d745593f-beea-488f-9cfc-9daaa7d64c2d"
        },
        {
            "id": "swc-6b2ab2e2-e82f-4252-bb5c-760dfc6897d9",
            "weakness": "Requirement Violation",
            "weakness_id": 123,
            "name": "SWC-123: Requirement Violation",
            "cwe_mapping": "cwe-f64336c4-4bc6-4389-9ea5-c8d24be964a2"
        },
        {
            "id": "swc-8b80b443-421a-4f0b-8378-83e3cfe6a5a5",
            "weakness": "Right-To-Left Override control character (U+202E)",
            "weakness_id": 130,
            "name": "SWC-130: Right-To-Left Override control character (U+202E)",
            "cwe_mapping": "cwe-a50912f8-e612-4c46-b6df-f2c68c05c3e9"
        },
        {
            "id": "swc-53ad4bb2-f228-40a0-94af-6072015da611",
            "weakness": "DoS with Failed Call",
            "weakness_id": 113,
            "name": "SWC-113: DoS with Failed Call",
            "cwe_mapping": "cwe-fe3d5b52-22c9-4d00-93ad-1d19efd949b4"
        },
        {
            "id": "swc-7908771d-afbc-425f-9df7-a2a17a0e4df2",
            "weakness": "Reentrancy",
            "weakness_id": 107,
            "name": "SWC-107: Reentrancy",
            "cwe_mapping": "cwe-7d812309-7085-43db-a6c6-832d09ea7670"
        },
        {
            "id": "swc-a65116d3-ce8a-40e1-955f-f7fc6bd4c544",
            "weakness": "Code With No Effects",
            "weakness_id": 135,
            "name": "SWC-135: Code With No Effects",
            "cwe_mapping": "cwe-0066f920-b9b7-44c7-b699-c6b6298f5376"
        },
        {
            "id": "swc-5c8788e9-23ca-40f9-9329-3f335e204f6d",
            "weakness": "Unchecked Call Return Value",
            "weakness_id": 104,
            "name": "SWC-104: Unchecked Call Return Value",
            "cwe_mapping": "cwe-eab988dc-3599-4d3f-a593-f2dcd1e63e2f"
        },
        {
            "id": "swc-004ea315-b3a3-483a-a0cb-303d62e8270c",
            "weakness": "Unprotected Ether Withdrawal",
            "weakness_id": 105,
            "name": "SWC-105: Unprotected Ether Withdrawal",
            "cwe_mapping": "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
        },
        {
            "id": "swc-72c3a708-ecd7-4b59-99eb-f1fb6733cf0e",
            "weakness": "Outdated Compiler Version",
            "weakness_id": 102,
            "name": "SWC-102: Outdated Compiler Version",
            "cwe_mapping": "cwe-93aebfd2-700b-4689-a47f-1242ae96410f"
        },
        {
            "id": "swc-db896544-6aca-4907-8b30-9ee5d685cbcd",
            "weakness": "Message Call with Hardcoded Gas Amount",
            "weakness_id": 134,
            "name": "SWC-134: Message Call with Hardcoded Gas Amount",
            "cwe_mapping": "cwe-f23fd63f-8103-4094-b7e6-3af680754c8d"
        },
        {
            "id": "swc-ea974d7a-46ee-4434-8fa9-ce43f064bae9",
            "weakness": "Uninitialized Storage Pointer",
            "weakness_id": 109,
            "name": "SWC-109: Uninitialized Storage Pointer",
            "cwe_mapping": "cwe-3b343980-56e9-42ec-8386-3041cb9083d6"
        },
        {
            "id": "swc-1cd0d8ac-ef1b-4d9c-8ef9-819b83462d39",
            "weakness": "Missing Protection against Signature Replay Attacks",
            "weakness_id": 121,
            "name": "SWC-121: Missing Protection against Signature Replay Attacks",
            "cwe_mapping": "cwe-0f8aa2b6-f0e7-4cc0-9053-584b7b49ca1d"
        },
        {
            "id": "swc-229f84d6-0bfd-441f-aa9b-e00cd9c01e84",
            "weakness": "Typographical Error",
            "weakness_id": 129,
            "name": "SWC-129: Typographical Error",
            "cwe_mapping": "cwe-cc6b94e2-cad1-4e05-af1c-b2af0a30d26b"
        },
        {
            "id": "swc-53fda511-06c8-4d14-b5ac-530126793122",
            "weakness": "Weak Sources of Randomness from Chain Attributes",
            "weakness_id": 120,
            "name": "SWC-120: Weak Sources of Randomness from Chain Attributes",
            "cwe_mapping": "cwe-bf95240f-5046-4cdc-9d32-09bd73d1c64d"
        },
        {
            "id": "swc-78a9dc1b-2f05-40af-a422-00cdedcee8ba",
            "weakness": "Incorrect Constructor Name",
            "weakness_id": 118,
            "name": "SWC-118: Incorrect Constructor Name",
            "cwe_mapping": "cwe-caf2a717-0565-469b-b7f9-bc80f720d1fe"
        },
        {
            "id": "swc-c82c4650-a9fc-4fff-b3b5-f790bd7cb249",
            "weakness": "Unprotected SELFDESTRUCT Instruction",
            "weakness_id": 106,
            "name": "SWC-106: Unprotected SELFDESTRUCT Instruction",
            "cwe_mapping": "cwe-965a3780-77a6-47f9-a9e0-fa5d47195248"
        },
        {
            "id": "swc-6c2af0d3-040c-42f4-b5d0-1b67d36ed8a8",
            "weakness": "Signature Malleability",
            "weakness_id": 117,
            "name": "SWC-117: Signature Malleability",
            "cwe_mapping": "cwe-0f8aa2b6-f0e7-4cc0-9053-584b7b49ca1d"
        },
        {
            "id": "swc-230782ab-4191-4a00-a157-072e1159f8b5",
            "weakness": "Floating Pragma",
            "weakness_id": 103,
            "name": "SWC-103: Floating Pragma",
            "cwe_mapping": "cwe-700db885-365a-4888-8a16-3b28065dc398"
        },
        {
            "id": "swc-f596a439-7175-4260-ae27-02f6e7a58519",
            "weakness": "Lack of Proper Signature Verification",
            "weakness_id": 122,
            "name": "SWC-122: Lack of Proper Signature Verification",
            "cwe_mapping": "cwe-b7b44336-fcdc-4e6a-984e-06de78c03c98"
        },
        {
            "id": "swc-20b54258-9726-43be-8f0f-38e0fc6e47a2",
            "weakness": "Authorization through tx.origin",
            "weakness_id": 115,
            "name": "SWC-115: Authorization through tx.origin",
            "cwe_mapping": "cwe-f0275cc6-8de4-48c9-b1ec-ef1a1e63f1cb"
        },
        {
            "id": "swc-ebb5656a-badc-4830-b29d-37c8b002906d",
            "weakness": "Function Default Visibility",
            "weakness_id": 100,
            "name": "SWC-100: Function Default Visibility",
            "cwe_mapping": "cwe-b71fe313-5245-4af1-bf01-4c97867682cd"
        },
        {
            "id": "swc-a714522b-44b6-4d28-8363-c9198e8145aa",
            "weakness": "DoS with Block Gas Limit",
            "weakness_id": 128,
            "name": "SWC-128: DoS with Block Gas Limit",
            "cwe_mapping": "cwe-d693e38c-f4fc-40a2-802b-e18019401e70"
        },
        {
            "id": "swc-05f574a5-33c4-4ca0-8de5-e6582b768245",
            "weakness": "Unexpected Ether Balance",
            "weakness_id": 132,
            "name": "SWC-132: Unexpected Ether Balance",
            "cwe_mapping": "cwe-61e91e04-4cc9-423a-a8e7-9d5c66ce877a"
        },
        {
            "id": "swc-5e041de8-7633-4387-b87b-c831a1e8d917",
            "weakness": "Insufficient Gas Griefing",
            "weakness_id": 126,
            "name": "SWC-126: Insufficient Gas Griefing",
            "cwe_mapping": "cwe-cbf34733-9c41-4ff8-bc30-8905a7485144"
        },
        {
            "id": "swc-7a7fc3a0-6937-488b-ba06-78d1fc292ae3",
            "weakness": "Write To Arbitrary Storage Location",
            "weakness_id": 124,
            "name": "SWC-124: Write To Arbitrary Storage Location",
            "cwe_mapping": "cwe-23d97431-c83e-4de3-b047-de3e04edefdd"
        },
        {
            "id": "swc-9dace717-c658-4ceb-86f0-1eea5df436d4",
            "weakness": "Block Values as a Proxy for Time",
            "weakness_id": 116,
            "name": "SWC-116: Block Values as a Proxy for Time",
            "cwe_mapping": "cwe-6fd1d436-6e17-4d66-9c7c-a0ca65766538"
        },
        {
            "id": "swc-d47f1064-8089-4110-8e69-340ccd8b1996",
            "weakness": "Use of Deprecated Solidity Functions",
            "weakness_id": 111,
            "name": "SWC-111: Use of Deprecated Solidity Functions",
            "cwe_mapping": "cwe-f0275cc6-8de4-48c9-b1ec-ef1a1e63f1cb"
        },
        {
            "id": "swc-ae95f408-d373-4d2f-9ec3-df55e05989ca",
            "weakness": "State Variable Default Visibility",
            "weakness_id": 108,
            "name": "SWC-108: State Variable Default Visibility",
            "cwe_mapping": "cwe-b71fe313-5245-4af1-bf01-4c97867682cd"
        },
        {
            "id": "swc-299fbb87-9336-4f86-85ee-75b6bc3a3b3d",
            "weakness": "Integer Overflow and Underflow",
            "weakness_id": 101,
            "name": "SWC-101: Integer Overflow and Underflow",
            "cwe_mapping": "cwe-3756aadb-32ee-49f0-ac0c-498c0cdb3205"
        },
        {
            "id": "swc-b4f59d51-d7bf-4d20-abc9-dc92a30c6e71",
            "weakness": "Arbitrary Jump with Function Type Variable",
            "weakness_id": 127,
            "name": "SWC-127: Arbitrary Jump with Function Type Variable",
            "cwe_mapping": "cwe-179fa40e-2a4c-4c3d-88c3-183af7d016e2"
        },
        {
            "id": "swc-1ae64b08-2013-4d3d-b5c5-3add10d4962c",
            "weakness": "Presence of Unused Variables",
            "weakness_id": 131,
            "name": "SWC-131: Presence of Unused Variables",
            "cwe_mapping": "cwe-0066f920-b9b7-44c7-b699-c6b6298f5376"
        }
    ],
    "tools": [
        {
            "id": "too-6ef67863-d6aa-4faf-8803-a0d3d8845f2a",
            "name": "ethainter",
            "year": 2020,
            "type": "Static analysis",
            "references": [
                "ref-e835c41a-6b9e-447f-94fd-e9b57260c41f"
            ]
        },
        {
            "id": "too-5506d4d0-c7e6-433e-aaec-157b2b0b955d",
            "name": "osiris",
            "year": 2018,
            "type": "Symbolic execution",
            "references": [
                "ref-103fc032-9688-4d28-adda-41dc6f0f4b94"
            ]
        },
        {
            "id": "too-646ade9e-eaad-48b4-ace9-0fe0ef0254c9",
            "name": "confuzzius",
            "year": 2020,
            "type": "Fuzzing",
            "references": [
                "ref-de522dd0-5f7f-4b5f-b5a4-ac1f138f7763"
            ]
        },
        {
            "id": "too-6e8209e2-5878-49ec-a44a-406b3a9075c6",
            "name": "sfuzz",
            "year": 2020,
            "type": "Fuzzing",
            "references": [
                "ref-dcb9c1df-aef7-4d5d-a05a-0538a61ab857"
            ]
        },
        {
            "id": "too-422d6eee-7f77-42ab-a45a-d208500c1dee",
            "name": "conkas",
            "year": 2021,
            "type": "Symbolic execution",
            "references": [
                "ref-b1f81fef-aa26-434f-86a9-ed3000b69492"
            ]
        },
        {
            "id": "too-28a775eb-eaf3-4655-8765-14eb468815de",
            "name": "semgrep",
            "year": 2023,
            "type": "Static analysis",
            "references": [
                "ref-a8abb51c-a70b-434d-b514-1acc6213c9a0"
            ]
        },
        {
            "id": "too-0f83f86d-b99f-47ed-8feb-b0d32b39f859",
            "name": "slither",
            "year": 2019,
            "type": "Static analysis",
            "references": [
                "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca"
            ]
        },
        {
            "id": "too-3e4b8086-74cc-4de5-a4d2-2f030f053695",
            "name": "securify",
            "year": 2019,
            "type": "Static analysis",
            "references": [
                "ref-36102c95-d5a5-4d6a-be9a-b213005c3ab0"
            ]
        },
        {
            "id": "too-610adb11-13de-434f-bba3-9a99ad2a3f93",
            "name": "honeybadger",
            "year": 2019,
            "type": "Symbolic execution",
            "references": [
                "ref-a8de81ca-3a67-4935-962a-22baecce8036"
            ]
        },
        {
            "id": "too-69c8c350-168b-43f2-8ae0-6ed198d5ebd5",
            "name": "oyente",
            "year": 2017,
            "type": "Symbolic execution",
            "references": [
                "ref-ef5097c6-be00-4b8b-95d9-46644c2e2138"
            ]
        },
        {
            "id": "too-be7a3b74-2d64-4b26-ac18-4541f0a33b4e",
            "name": "teether",
            "year": 2018,
            "type": "Fuzzing",
            "references": [
                "ref-fb9e91f8-1160-442d-abfd-2fa4e49102ee"
            ]
        },
        {
            "id": "too-cf5ab6cb-b78a-4cfc-aff8-dc90ea180210",
            "name": "smartcheck",
            "year": 2019,
            "type": "Static analysis",
            "references": [
                "ref-9003bf5d-cc62-404d-92ba-8f932ea07eca"
            ]
        },
        {
            "id": "too-c599653a-1124-4465-b497-0def6ef119b5",
            "name": "vandal",
            "year": 2018,
            "type": "Static analysis",
            "references": [
                "ref-b9c5f540-86d8-45d3-913f-4da6cc220c44"
            ]
        },
        {
            "id": "too-ba4d57ec-0c14-4d04-b0db-3547bea306ce",
            "name": "ethor",
            "year": 2020,
            "type": "Static analysis",
            "references": [
                "ref-6f29aa05-edc8-4ee8-8954-b70e03d59f27"
            ]
        },
        {
            "id": "too-2a5b9f12-e518-4f32-b8b3-ee412c998f7a",
            "name": "mythril",
            "year": 2017,
            "type": "Symbolic execution, SMT solving and Taint analysis",
            "references": [
                "ref-c40ca42f-0b05-4ce0-95ac-b5f303e68afa"
            ]
        },
        {
            "id": "too-00e25a91-8d67-47f9-9d46-f652c45e1f79",
            "name": "madmax",
            "year": 2020,
            "type": "Static analysis",
            "references": [
                "ref-40b2f693-4497-45a2-9911-39f751fd061f"
            ]
        },
        {
            "id": "too-c62699da-8b2f-4813-b011-072625f91e66",
            "name": "maian",
            "year": 2018,
            "type": "Symbolic execution",
            "references": [
                "ref-3e64d94e-d822-4ba3-a935-14e534f8d629"
            ]
        },
        {
            "id": "too-fba79187-6e92-4191-85c4-80bfd20a1fb7",
            "name": "pakala",
            "year": 2018,
            "type": "Symbolic execution",
            "references": [
                "ref-2ab28047-9fe3-4fa0-86cc-9e7d60f54fb5"
            ]
        }
    ],
    "mitigations": [
        {
            "id": "mit-44c3792c-4b9a-4f5e-b45d-7066a87ee6ed",
            "description": "",
            "name": "Use OpenZeppelin's SafeMath"
        },
        {
            "id": "mit-357865b1-51e8-4da1-8778-2f90b56e8b6e",
            "description": "",
            "name": "Use Access Control Libraries: Utilize well-audited access control libraries, such as OpenZeppelin's AccessControl, to manage role-based access control in your smart contracts. These libraries provide robust access control mechanisms that are less prone to vulnerabilities."
        },
        {
            "id": "mit-51057c21-f244-4489-bba0-15aed79ef521",
            "description": "",
            "name": "Commit-Reveal Schemes"
        }
    ],
    "patches": [
        {
            "id": "pat-9976fcaf-d1da-4018-a3f2-0761b86d919e",
            "name": "Patch BEC Tokens using SafeMath",
            "description": "import \"@openzeppelin/contracts/utils/math/SafeMath.sol\"; contract PausableToken is StandardToken, Pausable {   using SafeMath for uint256;   // Rest of your contract code   function batchTransfer(address[] memory _receivers, uint256 _value) public whenNotPaused returns (bool) {     uint cnt = _receivers.length;     uint256 amount = cnt.mul(_value);     require(cnt > 0 && cnt <= 20);     require(_value > 0 && balances[msg.sender] >= amount);     balances[msg.sender] = balances[msg.sender].sub(amount);     for (uint i = 0; i < cnt; i++) {       balances[_receivers[i]] = balances[_receivers[i]].add(_value);       Transfer(msg.sender, _receivers[i], _value);     }     return true;   } }",
            "mitigations": [
                "mit-44c3792c-4b9a-4f5e-b45d-7066a87ee6ed"
            ]
        }
    ]
}